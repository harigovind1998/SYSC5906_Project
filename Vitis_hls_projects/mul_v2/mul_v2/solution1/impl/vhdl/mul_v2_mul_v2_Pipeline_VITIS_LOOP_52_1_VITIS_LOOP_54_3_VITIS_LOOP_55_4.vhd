-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    I : IN STD_LOGIC_VECTOR (63 downto 0);
    value_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    value_r_ce0 : OUT STD_LOGIC;
    value_r_we0 : OUT STD_LOGIC;
    value_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    value_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    value_r_ce1 : OUT STD_LOGIC;
    value_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_B4 : STD_LOGIC_VECTOR (8 downto 0) := "010110100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv11_39 : STD_LOGIC_VECTOR (10 downto 0) := "00000111001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mul_v2_filter_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_v2_filter_ce0 : STD_LOGIC;
    signal mul_v2_filter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln52_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_1100_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_1104_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_reg_1114_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_reg_1122_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_reg_1129_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_355_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1142 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1142_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_1_fu_805_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_1_reg_1150_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_reg_1155 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln56_5_fu_962_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_5_reg_1161_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_addr_reg_1176 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr_cmp_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1182 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter8_stage0 : STD_LOGIC;
    signal zext_ln56_1_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln54_1_cast_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln56_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln56_6_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tz_fu_142 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln54_4_fu_838_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_146 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln54_5_fu_399_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ty_fu_150 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln53_6_fu_752_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten50_fu_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten50_load : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln53_7_fu_413_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_fu_158 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_1_fu_583_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten129_fu_162 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten129_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_268_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln55_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln52_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln53_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_367_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_367_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_367_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_1_fu_393_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln53_1_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_458_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_458_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_476_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_fu_468_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_fu_484_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_494_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_502_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_fu_464_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_17_fu_506_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln54_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_458_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_fu_522_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_534_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl5_fu_526_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_540_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln52_fu_450_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_20_fu_544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_550_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_16_fu_488_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln52_1_fu_577_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid163_fu_598_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid163_fu_598_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid163_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln56_fu_516_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln52_1_fu_625_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_21_fu_556_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_fu_570_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_fu_636_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl2_mid1_fu_661_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_mid1_fu_653_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_mid1_fu_669_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid116_fu_673_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_3_fu_611_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_mid1_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_mid1_fu_694_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln53_1_fu_649_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid118_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln54_1_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln52_2_fu_604_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln56_7_fu_708_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln52_4_fu_618_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln53_2_fu_714_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln52_2_cast_fu_590_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid138_fu_725_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln52_5_fu_629_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_fu_562_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln53_fu_642_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln54_fu_759_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_23_fu_765_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_777_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl5_mid1_fu_769_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_mid1_fu_783_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_787_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid1_fu_793_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_1_fu_679_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid15_fu_799_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln53_3_fu_731_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_mid1_fu_812_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln53_4_fu_738_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln53_5_fu_745_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln54_3_fu_827_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_845_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln56_1_fu_856_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln56_fu_852_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_2_fu_863_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln56_fu_867_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln56_3_fu_873_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln56_1_fu_877_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln56_1_fu_883_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln53_fu_721_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln56_2_fu_887_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_893_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln56_2_fu_901_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln56_4_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln56_3_fu_909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_914_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp3_fu_934_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_2_fu_820_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln56_fu_946_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln56_6_fu_952_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln54_3_cast_fu_834_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln56_4_fu_956_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln56_5_fu_942_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln56_fu_1005_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal reuse_select_fu_1013_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln56_fu_1005_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_fu_458_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_367_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_mid163_fu_598_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mul_v2_mul_5ns_7ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component mul_v2_urem_5ns_5ns_5_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mul_v2_mul_3ns_6ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mul_v2_mul_5s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4_mul_v2_filter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_v2_filter_U : component mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4_mul_v2_filter
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mul_v2_filter_address0,
        ce0 => mul_v2_filter_ce0,
        q0 => mul_v2_filter_q0);

    mul_5ns_7ns_11_1_1_U1 : component mul_v2_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_fu_367_p0,
        din1 => mul_fu_367_p1,
        dout => mul_fu_367_p2);

    urem_5ns_5ns_5_9_1_U2 : component mul_v2_urem_5ns_5ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln54_fu_355_p3,
        din1 => ap_const_lv5_9,
        ce => grp_fu_381_ce,
        dout => grp_fu_381_p2);

    mul_3ns_6ns_8_1_1_U3 : component mul_v2_mul_3ns_6ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => empty_fu_458_p0,
        din1 => empty_fu_458_p1,
        dout => empty_fu_458_p2);

    mul_3ns_6ns_8_1_1_U4 : component mul_v2_mul_3ns_6ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => p_mid163_fu_598_p0,
        din1 => p_mid163_fu_598_p1,
        dout => p_mid163_fu_598_p2);

    mul_5s_32s_32_1_1_U5 : component mul_v2_mul_5s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln56_fu_1005_p0,
        din1 => gmem_addr_read_reg_1166,
        dout => mul_ln56_fu_1005_p2);

    flow_control_loop_pipe_sequential_init_U : component mul_v2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten129_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln52_fu_262_p2 = ap_const_lv1_0))) then 
                    indvar_flatten129_fu_162 <= add_ln52_fu_268_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten129_fu_162 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten50_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln52_fu_262_p2 = ap_const_lv1_0))) then 
                    indvar_flatten50_fu_154 <= select_ln53_7_fu_413_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten50_fu_154 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln52_fu_262_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_146 <= select_ln54_5_fu_399_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_146 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln52_fu_262_p2 = ap_const_lv1_0))) then 
                    j_fu_138 <= j_1_fu_387_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_138 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_addr_reg_fu_130 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter16 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_130 <= select_ln54_1_cast_fu_983_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg_fu_134 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter17 = ap_const_logic_1)) then 
                    reuse_reg_fu_134 <= add_ln56_6_fu_1020_p2;
                end if;
            end if; 
        end if;
    end process;

    tx_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tx_fu_158 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln52_reg_1100_pp0_iter7_reg = ap_const_lv1_0))) then 
                    tx_fu_158 <= select_ln52_1_fu_583_p3;
                end if;
            end if; 
        end if;
    end process;

    ty_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ty_fu_150 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln52_reg_1100_pp0_iter7_reg = ap_const_lv1_0))) then 
                    ty_fu_150 <= select_ln53_6_fu_752_p3;
                end if;
            end if; 
        end if;
    end process;

    tz_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tz_fu_142 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln52_reg_1100_pp0_iter7_reg = ap_const_lv1_0))) then 
                    tz_fu_142 <= select_ln54_4_fu_838_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln52_reg_1100_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln56_5_reg_1161 <= add_ln56_5_fu_962_p2;
                gmem_addr_reg_1155 <= sext_ln56_fu_924_p1;
                select_ln54_1_reg_1150 <= select_ln54_1_fu_805_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln56_5_reg_1161_pp0_iter10_reg <= add_ln56_5_reg_1161_pp0_iter9_reg;
                add_ln56_5_reg_1161_pp0_iter11_reg <= add_ln56_5_reg_1161_pp0_iter10_reg;
                add_ln56_5_reg_1161_pp0_iter12_reg <= add_ln56_5_reg_1161_pp0_iter11_reg;
                add_ln56_5_reg_1161_pp0_iter13_reg <= add_ln56_5_reg_1161_pp0_iter12_reg;
                add_ln56_5_reg_1161_pp0_iter14_reg <= add_ln56_5_reg_1161_pp0_iter13_reg;
                add_ln56_5_reg_1161_pp0_iter15_reg <= add_ln56_5_reg_1161_pp0_iter14_reg;
                add_ln56_5_reg_1161_pp0_iter9_reg <= add_ln56_5_reg_1161;
                addr_cmp_reg_1182 <= addr_cmp_fu_994_p2;
                and_ln52_1_reg_1114_pp0_iter2_reg <= and_ln52_1_reg_1114_pp0_iter1_reg;
                and_ln52_1_reg_1114_pp0_iter3_reg <= and_ln52_1_reg_1114_pp0_iter2_reg;
                and_ln52_1_reg_1114_pp0_iter4_reg <= and_ln52_1_reg_1114_pp0_iter3_reg;
                and_ln52_1_reg_1114_pp0_iter5_reg <= and_ln52_1_reg_1114_pp0_iter4_reg;
                and_ln52_1_reg_1114_pp0_iter6_reg <= and_ln52_1_reg_1114_pp0_iter5_reg;
                and_ln52_1_reg_1114_pp0_iter7_reg <= and_ln52_1_reg_1114_pp0_iter6_reg;
                and_ln53_reg_1129_pp0_iter2_reg <= and_ln53_reg_1129_pp0_iter1_reg;
                and_ln53_reg_1129_pp0_iter3_reg <= and_ln53_reg_1129_pp0_iter2_reg;
                and_ln53_reg_1129_pp0_iter4_reg <= and_ln53_reg_1129_pp0_iter3_reg;
                and_ln53_reg_1129_pp0_iter5_reg <= and_ln53_reg_1129_pp0_iter4_reg;
                and_ln53_reg_1129_pp0_iter6_reg <= and_ln53_reg_1129_pp0_iter5_reg;
                and_ln53_reg_1129_pp0_iter7_reg <= and_ln53_reg_1129_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_read_reg_1166 <= m_axi_gmem_RDATA;
                icmp_ln52_reg_1100_pp0_iter2_reg <= icmp_ln52_reg_1100_pp0_iter1_reg;
                icmp_ln52_reg_1100_pp0_iter3_reg <= icmp_ln52_reg_1100_pp0_iter2_reg;
                icmp_ln52_reg_1100_pp0_iter4_reg <= icmp_ln52_reg_1100_pp0_iter3_reg;
                icmp_ln52_reg_1100_pp0_iter5_reg <= icmp_ln52_reg_1100_pp0_iter4_reg;
                icmp_ln52_reg_1100_pp0_iter6_reg <= icmp_ln52_reg_1100_pp0_iter5_reg;
                icmp_ln52_reg_1100_pp0_iter7_reg <= icmp_ln52_reg_1100_pp0_iter6_reg;
                icmp_ln53_reg_1104_pp0_iter2_reg <= icmp_ln53_reg_1104_pp0_iter1_reg;
                icmp_ln53_reg_1104_pp0_iter3_reg <= icmp_ln53_reg_1104_pp0_iter2_reg;
                icmp_ln53_reg_1104_pp0_iter4_reg <= icmp_ln53_reg_1104_pp0_iter3_reg;
                icmp_ln53_reg_1104_pp0_iter5_reg <= icmp_ln53_reg_1104_pp0_iter4_reg;
                icmp_ln53_reg_1104_pp0_iter6_reg <= icmp_ln53_reg_1104_pp0_iter5_reg;
                icmp_ln53_reg_1104_pp0_iter7_reg <= icmp_ln53_reg_1104_pp0_iter6_reg;
                or_ln53_reg_1122_pp0_iter2_reg <= or_ln53_reg_1122_pp0_iter1_reg;
                or_ln53_reg_1122_pp0_iter3_reg <= or_ln53_reg_1122_pp0_iter2_reg;
                or_ln53_reg_1122_pp0_iter4_reg <= or_ln53_reg_1122_pp0_iter3_reg;
                or_ln53_reg_1122_pp0_iter5_reg <= or_ln53_reg_1122_pp0_iter4_reg;
                or_ln53_reg_1122_pp0_iter6_reg <= or_ln53_reg_1122_pp0_iter5_reg;
                or_ln53_reg_1122_pp0_iter7_reg <= or_ln53_reg_1122_pp0_iter6_reg;
                select_ln54_1_reg_1150_pp0_iter10_reg <= select_ln54_1_reg_1150_pp0_iter9_reg;
                select_ln54_1_reg_1150_pp0_iter11_reg <= select_ln54_1_reg_1150_pp0_iter10_reg;
                select_ln54_1_reg_1150_pp0_iter12_reg <= select_ln54_1_reg_1150_pp0_iter11_reg;
                select_ln54_1_reg_1150_pp0_iter13_reg <= select_ln54_1_reg_1150_pp0_iter12_reg;
                select_ln54_1_reg_1150_pp0_iter14_reg <= select_ln54_1_reg_1150_pp0_iter13_reg;
                select_ln54_1_reg_1150_pp0_iter15_reg <= select_ln54_1_reg_1150_pp0_iter14_reg;
                select_ln54_1_reg_1150_pp0_iter9_reg <= select_ln54_1_reg_1150;
                tmp_1_reg_1142_pp0_iter2_reg <= tmp_1_reg_1142_pp0_iter1_reg;
                tmp_1_reg_1142_pp0_iter3_reg <= tmp_1_reg_1142_pp0_iter2_reg;
                tmp_1_reg_1142_pp0_iter4_reg <= tmp_1_reg_1142_pp0_iter3_reg;
                tmp_1_reg_1142_pp0_iter5_reg <= tmp_1_reg_1142_pp0_iter4_reg;
                tmp_1_reg_1142_pp0_iter6_reg <= tmp_1_reg_1142_pp0_iter5_reg;
                tmp_1_reg_1142_pp0_iter7_reg <= tmp_1_reg_1142_pp0_iter6_reg;
                value_addr_reg_1176 <= select_ln54_1_cast_fu_983_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln52_fu_262_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln52_1_reg_1114 <= and_ln52_1_fu_313_p2;
                and_ln53_reg_1129 <= and_ln53_fu_337_p2;
                icmp_ln53_reg_1104 <= icmp_ln53_fu_283_p2;
                or_ln53_reg_1122 <= or_ln53_fu_319_p2;
                tmp_1_reg_1142 <= mul_fu_367_p2(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln52_1_reg_1114_pp0_iter1_reg <= and_ln52_1_reg_1114;
                and_ln53_reg_1129_pp0_iter1_reg <= and_ln53_reg_1129;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln52_reg_1100 <= icmp_ln52_fu_262_p2;
                icmp_ln52_reg_1100_pp0_iter1_reg <= icmp_ln52_reg_1100;
                icmp_ln53_reg_1104_pp0_iter1_reg <= icmp_ln53_reg_1104;
                or_ln53_reg_1122_pp0_iter1_reg <= or_ln53_reg_1122;
                tmp_1_reg_1142_pp0_iter1_reg <= tmp_1_reg_1142;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln52_1_fu_577_p2 <= std_logic_vector(unsigned(tx_fu_158) + unsigned(ap_const_lv3_1));
    add_ln52_fu_268_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten129_load) + unsigned(ap_const_lv11_1));
    add_ln53_1_fu_407_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten50_load) + unsigned(ap_const_lv9_1));
    add_ln53_fu_636_p2 <= std_logic_vector(unsigned(select_ln52_fu_570_p3) + unsigned(ap_const_lv3_1));
    add_ln54_1_fu_393_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln54_fu_759_p2 <= std_logic_vector(unsigned(select_ln53_fu_642_p3) + unsigned(ap_const_lv2_1));
    add_ln56_1_fu_877_p2 <= std_logic_vector(unsigned(sub_ln56_fu_867_p2) + unsigned(zext_ln56_3_fu_873_p1));
    add_ln56_2_fu_887_p2 <= std_logic_vector(signed(sext_ln56_1_fu_883_p1) + signed(sext_ln53_fu_721_p1));
    add_ln56_3_fu_909_p2 <= std_logic_vector(unsigned(zext_ln56_4_fu_905_p1) + unsigned(I));
    add_ln56_4_fu_956_p2 <= std_logic_vector(unsigned(zext_ln56_6_fu_952_p1) + unsigned(select_ln54_3_cast_fu_834_p1));
    add_ln56_5_fu_962_p2 <= std_logic_vector(unsigned(add_ln56_4_fu_956_p2) + unsigned(zext_ln56_5_fu_942_p1));
    add_ln56_6_fu_1020_p2 <= std_logic_vector(unsigned(reuse_select_fu_1013_p3) + unsigned(mul_ln56_fu_1005_p2));
    add_ln56_7_fu_708_p2 <= std_logic_vector(signed(sext_ln54_1_fu_704_p1) + signed(select_ln52_2_fu_604_p3));
    add_ln56_fu_516_p2 <= std_logic_vector(signed(sext_ln54_fu_512_p1) + signed(empty_fu_458_p2));
    addr_cmp_fu_994_p2 <= "1" when (reuse_addr_reg_fu_130 = select_ln54_1_cast_fu_983_p1) else "0";
    and_ln52_1_fu_313_p2 <= (xor_ln52_fu_289_p2 and icmp_ln54_fu_307_p2);
    and_ln52_fu_301_p2 <= (xor_ln52_fu_289_p2 and icmp_ln55_fu_295_p2);
    and_ln53_fu_337_p2 <= (or_ln53_1_fu_331_p2 and and_ln52_fu_301_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter16, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter16, m_axi_gmem_ARREADY, m_axi_gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (m_axi_gmem_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter16_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter16 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_262_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln52_fu_262_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter8_stage0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_subdone, icmp_ln52_reg_1100_pp0_iter7_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln52_reg_1100_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter8_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter8_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter16_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten129_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten129_fu_162)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten129_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten129_load <= indvar_flatten129_fu_162;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten50_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten50_fu_154)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten50_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten50_load <= indvar_flatten50_fu_154;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_146)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_146;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_138)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_138;
        end if; 
    end process;

    empty_16_fu_488_p2 <= std_logic_vector(unsigned(p_shl1_fu_468_p3) - unsigned(p_shl2_cast_fu_484_p1));
    empty_17_fu_506_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_502_p1) - unsigned(zext_ln53_fu_464_p1));
    empty_18_fu_522_p1 <= tz_fu_142(1 - 1 downto 0);
    empty_19_fu_534_p2 <= std_logic_vector(shift_left(unsigned(tz_fu_142),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    empty_20_fu_544_p2 <= std_logic_vector(unsigned(p_shl5_fu_526_p3) - unsigned(p_shl6_cast_fu_540_p1));
    empty_21_fu_556_p2 <= std_logic_vector(unsigned(tmp_fu_550_p2) + unsigned(empty_16_fu_488_p2));
    empty_23_fu_765_p1 <= add_ln54_fu_759_p2(1 - 1 downto 0);
    empty_24_fu_777_p2 <= std_logic_vector(shift_left(unsigned(add_ln54_fu_759_p2),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    empty_fu_458_p0 <= empty_fu_458_p00(3 - 1 downto 0);
    empty_fu_458_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_fu_158),8));
    empty_fu_458_p1 <= ap_const_lv8_15(6 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_gmem_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_gmem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_381_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_381_ce <= ap_const_logic_1;
        else 
            grp_fu_381_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln52_fu_262_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten129_load = ap_const_lv11_438) else "0";
    icmp_ln53_fu_283_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten50_load = ap_const_lv9_B4) else "0";
    icmp_ln54_fu_307_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_24) else "0";
    icmp_ln55_fu_295_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_12) else "0";
    j_1_fu_387_p2 <= std_logic_vector(unsigned(select_ln54_fu_355_p3) + unsigned(ap_const_lv5_1));
    m_axi_gmem_ARADDR <= gmem_addr_reg_1155;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mul_fu_367_p0 <= mul_fu_367_p00(5 - 1 downto 0);
    mul_fu_367_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_355_p3),11));
    mul_fu_367_p1 <= ap_const_lv11_39(7 - 1 downto 0);
    mul_ln56_fu_1005_p0 <= mul_v2_filter_q0(5 - 1 downto 0);
    mul_v2_filter_address0 <= zext_ln56_1_fu_987_p1(6 - 1 downto 0);

    mul_v2_filter_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mul_v2_filter_ce0 <= ap_const_logic_1;
        else 
            mul_v2_filter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln53_1_fu_331_p2 <= (xor_ln53_fu_325_p2 or icmp_ln53_fu_283_p2);
    or_ln53_fu_319_p2 <= (icmp_ln53_fu_283_p2 or and_ln52_1_fu_313_p2);
    or_ln54_1_fu_349_p2 <= (or_ln54_fu_343_p2 or icmp_ln53_fu_283_p2);
    or_ln54_fu_343_p2 <= (and_ln53_fu_337_p2 or and_ln52_1_fu_313_p2);
    or_ln56_fu_946_p2 <= (select_ln54_2_fu_820_p3 or grp_fu_381_p2);
    p_mid116_fu_673_p2 <= std_logic_vector(unsigned(p_shl1_mid1_fu_653_p3) - unsigned(p_shl2_cast_mid1_fu_669_p1));
    p_mid118_fu_698_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_694_p1) - unsigned(zext_ln53_1_fu_649_p1));
    p_mid138_fu_725_p2 <= std_logic_vector(unsigned(select_ln52_2_cast_fu_590_p1) + unsigned(p_mid116_fu_673_p2));
    p_mid15_fu_799_p2 <= std_logic_vector(unsigned(tmp_mid1_fu_793_p2) + unsigned(select_ln53_1_fu_679_p3));
    p_mid163_fu_598_p0 <= p_mid163_fu_598_p00(3 - 1 downto 0);
    p_mid163_fu_598_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_fu_577_p2),8));
    p_mid163_fu_598_p1 <= ap_const_lv8_15(6 - 1 downto 0);
    p_mid1_fu_787_p2 <= std_logic_vector(unsigned(p_shl5_mid1_fu_769_p3) - unsigned(p_shl6_cast_mid1_fu_783_p1));
    p_shl1_fu_468_p3 <= (ty_fu_150 & ap_const_lv3_0);
    p_shl1_mid1_fu_653_p3 <= (add_ln53_fu_636_p2 & ap_const_lv3_0);
    p_shl2_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_476_p3),6));
    p_shl2_cast_mid1_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_mid1_fu_661_p3),6));
    p_shl2_fu_476_p3 <= (ty_fu_150 & ap_const_lv1_0);
    p_shl2_mid1_fu_661_p3 <= (add_ln53_fu_636_p2 & ap_const_lv1_0);
    p_shl3_fu_562_p3 <= (empty_18_fu_522_p1 & ap_const_lv4_0);
    p_shl3_mid1_fu_812_p3 <= (empty_23_fu_765_p1 & ap_const_lv4_0);
    p_shl5_fu_526_p3 <= (empty_18_fu_522_p1 & ap_const_lv5_0);
    p_shl5_mid1_fu_769_p3 <= (empty_23_fu_765_p1 & ap_const_lv5_0);
    p_shl6_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_19_fu_534_p2),6));
    p_shl6_cast_mid1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_fu_777_p2),6));
    p_shl_cast_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_494_p3),6));
    p_shl_cast_mid1_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_686_p3),6));
    p_shl_fu_494_p3 <= (ty_fu_150 & ap_const_lv2_0);
    p_shl_mid1_fu_686_p3 <= (add_ln53_fu_636_p2 & ap_const_lv2_0);
    reuse_select_fu_1013_p3 <= 
        reuse_reg_fu_134 when (addr_cmp_reg_1182(0) = '1') else 
        value_r_q1;
    select_ln52_1_fu_583_p3 <= 
        add_ln52_1_fu_577_p2 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        tx_fu_158;
    select_ln52_2_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_1_fu_583_p3),6));
    select_ln52_2_fu_604_p3 <= 
        p_mid163_fu_598_p2 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        empty_fu_458_p2;
    select_ln52_3_fu_611_p3 <= 
        ap_const_lv6_0 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        empty_16_fu_488_p2;
    select_ln52_4_fu_618_p3 <= 
        p_mid163_fu_598_p2 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        add_ln56_fu_516_p2;
    select_ln52_5_fu_629_p3 <= 
        zext_ln52_1_fu_625_p1 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        empty_21_fu_556_p2;
    select_ln52_fu_570_p3 <= 
        ap_const_lv3_0 when (icmp_ln53_reg_1104_pp0_iter7_reg(0) = '1') else 
        ty_fu_150;
    select_ln53_1_fu_679_p3 <= 
        p_mid116_fu_673_p2 when (and_ln52_1_reg_1114_pp0_iter7_reg(0) = '1') else 
        select_ln52_3_fu_611_p3;
    select_ln53_2_fu_714_p3 <= 
        add_ln56_7_fu_708_p2 when (and_ln52_1_reg_1114_pp0_iter7_reg(0) = '1') else 
        select_ln52_4_fu_618_p3;
    select_ln53_3_fu_731_p3 <= 
        p_mid138_fu_725_p2 when (and_ln52_1_reg_1114_pp0_iter7_reg(0) = '1') else 
        select_ln52_5_fu_629_p3;
    select_ln53_4_fu_738_p3 <= 
        ap_const_lv5_0 when (or_ln53_reg_1122_pp0_iter7_reg(0) = '1') else 
        p_shl3_fu_562_p3;
    select_ln53_5_fu_745_p3 <= 
        ap_const_lv2_0 when (or_ln53_reg_1122_pp0_iter7_reg(0) = '1') else 
        empty_19_fu_534_p2;
    select_ln53_6_fu_752_p3 <= 
        add_ln53_fu_636_p2 when (and_ln52_1_reg_1114_pp0_iter7_reg(0) = '1') else 
        select_ln52_fu_570_p3;
    select_ln53_7_fu_413_p3 <= 
        ap_const_lv9_1 when (icmp_ln53_fu_283_p2(0) = '1') else 
        add_ln53_1_fu_407_p2;
    select_ln53_fu_642_p3 <= 
        ap_const_lv2_0 when (or_ln53_reg_1122_pp0_iter7_reg(0) = '1') else 
        tz_fu_142;
    select_ln54_1_cast_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_1_reg_1150_pp0_iter15_reg),64));
    select_ln54_1_fu_805_p3 <= 
        p_mid15_fu_799_p2 when (and_ln53_reg_1129_pp0_iter7_reg(0) = '1') else 
        select_ln53_3_fu_731_p3;
    select_ln54_2_fu_820_p3 <= 
        p_shl3_mid1_fu_812_p3 when (and_ln53_reg_1129_pp0_iter7_reg(0) = '1') else 
        select_ln53_4_fu_738_p3;
    select_ln54_3_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_3_fu_827_p3),6));
    select_ln54_3_fu_827_p3 <= 
        empty_24_fu_777_p2 when (and_ln53_reg_1129_pp0_iter7_reg(0) = '1') else 
        select_ln53_5_fu_745_p3;
    select_ln54_4_fu_838_p3 <= 
        add_ln54_fu_759_p2 when (and_ln53_reg_1129_pp0_iter7_reg(0) = '1') else 
        select_ln53_fu_642_p3;
    select_ln54_5_fu_399_p3 <= 
        ap_const_lv7_1 when (or_ln53_fu_319_p2(0) = '1') else 
        add_ln54_1_fu_393_p2;
    select_ln54_fu_355_p3 <= 
        ap_const_lv5_0 when (or_ln54_1_fu_349_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln53_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln53_2_fu_714_p3),10));

        sext_ln54_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_mid118_fu_698_p2),8));

        sext_ln54_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_17_fu_506_p2),8));

        sext_ln56_1_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln56_1_fu_877_p2),10));

        sext_ln56_2_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_893_p3),34));

        sext_ln56_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_914_p4),64));

    shl_ln56_1_fu_856_p3 <= (tmp_1_reg_1142_pp0_iter7_reg & ap_const_lv1_0);
    shl_ln_fu_845_p3 <= (tmp_1_reg_1142_pp0_iter7_reg & ap_const_lv7_0);
    sub_ln56_fu_867_p2 <= std_logic_vector(unsigned(zext_ln56_fu_852_p1) - unsigned(zext_ln56_2_fu_863_p1));
    tmp3_fu_934_p4 <= ((tmp_1_reg_1142_pp0_iter7_reg & ap_const_lv2_0) & tmp_1_reg_1142_pp0_iter7_reg);
    tmp_fu_550_p2 <= std_logic_vector(unsigned(zext_ln52_fu_450_p1) + unsigned(empty_20_fu_544_p2));
    tmp_mid1_fu_793_p2 <= std_logic_vector(unsigned(select_ln52_2_cast_fu_590_p1) + unsigned(p_mid1_fu_787_p2));
    tmp_s_fu_893_p3 <= (add_ln56_2_fu_887_p2 & ap_const_lv2_0);
    trunc_ln1_fu_914_p4 <= add_ln56_3_fu_909_p2(63 downto 2);
    value_r_address0 <= value_addr_reg_1176;
    value_r_address1 <= select_ln54_1_cast_fu_983_p1(6 - 1 downto 0);

    value_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_ce0 <= ap_const_logic_1;
        else 
            value_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    value_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_ce1 <= ap_const_logic_1;
        else 
            value_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    value_r_d0 <= std_logic_vector(unsigned(reuse_select_fu_1013_p3) + unsigned(mul_ln56_fu_1005_p2));

    value_r_we0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_we0 <= ap_const_logic_1;
        else 
            value_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln52_fu_289_p2 <= (icmp_ln53_fu_283_p2 xor ap_const_lv1_1);
    xor_ln53_fu_325_p2 <= (icmp_ln54_fu_307_p2 xor ap_const_lv1_1);
    zext_ln52_1_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_fu_577_p2),6));
    zext_ln52_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_fu_158),6));
    zext_ln53_1_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_fu_636_p2),6));
    zext_ln53_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_fu_150),6));
    zext_ln56_1_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_5_reg_1161_pp0_iter15_reg),64));
    zext_ln56_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln56_1_fu_856_p3),9));
    zext_ln56_3_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_381_p2),9));
    zext_ln56_4_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln56_2_fu_901_p1),64));
    zext_ln56_5_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_934_p4),6));
    zext_ln56_6_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln56_fu_946_p2),6));
    zext_ln56_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_845_p3),9));
end behav;
