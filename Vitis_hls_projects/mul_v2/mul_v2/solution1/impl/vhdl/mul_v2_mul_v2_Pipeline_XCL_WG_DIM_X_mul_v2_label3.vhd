-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul7 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul6_mid2 : IN STD_LOGIC_VECTOR (7 downto 0);
    hi_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    global_id_base_x_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    wi_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    mul14 : IN STD_LOGIC_VECTOR (7 downto 0);
    mul21_mid2 : IN STD_LOGIC_VECTOR (5 downto 0);
    shiftreg_out : OUT STD_LOGIC_VECTOR (191 downto 0);
    shiftreg_out_ap_vld : OUT STD_LOGIC;
    p_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_6C : STD_LOGIC_VECTOR (6 downto 0) := "1101100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mul_v2_I_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_v2_I_ce0 : STD_LOGIC;
    signal mul_v2_I_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_v2_filter_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_v2_filter_ce0 : STD_LOGIC;
    signal mul_v2_filter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln87_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_482_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_486_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln81_1_fu_281_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln81_1_reg_503_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508 : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal urem_ln81_reg_508_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_exit_pp0_iter17_stage0 : STD_LOGIC;
    signal zext_ln81_1_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln81_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal value_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_value_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_265_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shiftreg_fu_88 : STD_LOGIC_VECTOR (191 downto 0);
    signal select_ln87_2_fu_371_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal phi_ln44_fu_92 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln87_1_fu_302_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln87_fu_211_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln87_fu_226_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_244_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln81_3_fu_250_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_2_fu_254_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln81_fu_285_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln87_1_fu_296_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_33_fu_318_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln81_1_fu_325_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal urem_ln81_cast_cast_fu_321_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln81_1_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln81_1_fu_325_p2 : signal is "no";
    signal empty_34_fu_335_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln82_dup_fu_350_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal or_ln82_dup_fu_363_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_391_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_391_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_398_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_407_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_407_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mul_v2_udiv_5ns_32ns_5_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mul_v2_urem_5ns_32ns_5_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mul_v2_ama_addmuladd_5ns_8ns_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mul_v2_ama_addmuladd_8ns_3ns_8s_8ns_8_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mul_v2_mac_muladd_3ns_3ns_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_I IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_filter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_v2_I_U : component mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_I
    generic map (
        DataWidth => 32,
        AddressRange => 152,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mul_v2_I_address0,
        ce0 => mul_v2_I_ce0,
        q0 => mul_v2_I_q0);

    mul_v2_filter_U : component mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_filter
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mul_v2_filter_address0,
        ce0 => mul_v2_filter_ce0,
        q0 => mul_v2_filter_q0);

    udiv_5ns_32ns_5_9_1_U1 : component mul_v2_udiv_5ns_32ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 32,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => mul7,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    urem_5ns_32ns_5_9_1_U2 : component mul_v2_urem_5ns_32ns_5_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 32,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_244_p0,
        din1 => mul7,
        ce => ap_const_logic_1,
        dout => grp_fu_244_p2);

    ama_addmuladd_5ns_8ns_8s_8ns_8_4_1_U3 : component mul_v2_ama_addmuladd_5ns_8ns_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_391_p0,
        din1 => mul6_mid2,
        din2 => hi_cast,
        din3 => global_id_base_x_cast,
        ce => ap_const_logic_1,
        dout => grp_fu_391_p4);

    ama_addmuladd_8ns_3ns_8s_8ns_8_4_1_U4 : component mul_v2_ama_addmuladd_8ns_3ns_8s_8ns_8_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_391_p4,
        din1 => grp_fu_398_p1,
        din2 => wi_cast,
        din3 => mul14,
        ce => ap_const_logic_1,
        dout => grp_fu_398_p4);

    mac_muladd_3ns_3ns_32ns_32_4_1_U5 : component mul_v2_mac_muladd_3ns_3ns_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 3,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_407_p0,
        din1 => grp_fu_407_p1,
        din2 => ap_sig_allocacmp_value_1_load_1,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p3);

    flow_control_loop_pipe_sequential_init_U : component mul_v2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter17_stage0)) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_205_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_96 <= add_ln87_fu_211_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln87_fu_205_p2 = ap_const_lv1_0))) then 
                    j_fu_84 <= j_1_fu_265_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_84 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln44_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_ln44_fu_92 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln87_reg_482_pp0_iter10_reg = ap_const_lv1_0))) then 
                    phi_ln44_fu_92 <= select_ln87_1_fu_302_p3;
                end if;
            end if; 
        end if;
    end process;

    shiftreg_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg_fu_88 <= ap_const_lv192_lc_1;
                elsif (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln87_reg_482_pp0_iter16_reg = ap_const_lv1_0))) then 
                    shiftreg_fu_88 <= select_ln87_2_fu_371_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln80_reg_486_pp0_iter10_reg <= icmp_ln80_reg_486_pp0_iter9_reg;
                icmp_ln80_reg_486_pp0_iter11_reg <= icmp_ln80_reg_486_pp0_iter10_reg;
                icmp_ln80_reg_486_pp0_iter12_reg <= icmp_ln80_reg_486_pp0_iter11_reg;
                icmp_ln80_reg_486_pp0_iter13_reg <= icmp_ln80_reg_486_pp0_iter12_reg;
                icmp_ln80_reg_486_pp0_iter14_reg <= icmp_ln80_reg_486_pp0_iter13_reg;
                icmp_ln80_reg_486_pp0_iter15_reg <= icmp_ln80_reg_486_pp0_iter14_reg;
                icmp_ln80_reg_486_pp0_iter16_reg <= icmp_ln80_reg_486_pp0_iter15_reg;
                icmp_ln80_reg_486_pp0_iter2_reg <= icmp_ln80_reg_486_pp0_iter1_reg;
                icmp_ln80_reg_486_pp0_iter3_reg <= icmp_ln80_reg_486_pp0_iter2_reg;
                icmp_ln80_reg_486_pp0_iter4_reg <= icmp_ln80_reg_486_pp0_iter3_reg;
                icmp_ln80_reg_486_pp0_iter5_reg <= icmp_ln80_reg_486_pp0_iter4_reg;
                icmp_ln80_reg_486_pp0_iter6_reg <= icmp_ln80_reg_486_pp0_iter5_reg;
                icmp_ln80_reg_486_pp0_iter7_reg <= icmp_ln80_reg_486_pp0_iter6_reg;
                icmp_ln80_reg_486_pp0_iter8_reg <= icmp_ln80_reg_486_pp0_iter7_reg;
                icmp_ln80_reg_486_pp0_iter9_reg <= icmp_ln80_reg_486_pp0_iter8_reg;
                icmp_ln87_reg_482_pp0_iter10_reg <= icmp_ln87_reg_482_pp0_iter9_reg;
                icmp_ln87_reg_482_pp0_iter11_reg <= icmp_ln87_reg_482_pp0_iter10_reg;
                icmp_ln87_reg_482_pp0_iter12_reg <= icmp_ln87_reg_482_pp0_iter11_reg;
                icmp_ln87_reg_482_pp0_iter13_reg <= icmp_ln87_reg_482_pp0_iter12_reg;
                icmp_ln87_reg_482_pp0_iter14_reg <= icmp_ln87_reg_482_pp0_iter13_reg;
                icmp_ln87_reg_482_pp0_iter15_reg <= icmp_ln87_reg_482_pp0_iter14_reg;
                icmp_ln87_reg_482_pp0_iter16_reg <= icmp_ln87_reg_482_pp0_iter15_reg;
                icmp_ln87_reg_482_pp0_iter2_reg <= icmp_ln87_reg_482_pp0_iter1_reg;
                icmp_ln87_reg_482_pp0_iter3_reg <= icmp_ln87_reg_482_pp0_iter2_reg;
                icmp_ln87_reg_482_pp0_iter4_reg <= icmp_ln87_reg_482_pp0_iter3_reg;
                icmp_ln87_reg_482_pp0_iter5_reg <= icmp_ln87_reg_482_pp0_iter4_reg;
                icmp_ln87_reg_482_pp0_iter6_reg <= icmp_ln87_reg_482_pp0_iter5_reg;
                icmp_ln87_reg_482_pp0_iter7_reg <= icmp_ln87_reg_482_pp0_iter6_reg;
                icmp_ln87_reg_482_pp0_iter8_reg <= icmp_ln87_reg_482_pp0_iter7_reg;
                icmp_ln87_reg_482_pp0_iter9_reg <= icmp_ln87_reg_482_pp0_iter8_reg;
                trunc_ln81_1_reg_503_pp0_iter10_reg <= trunc_ln81_1_reg_503_pp0_iter9_reg;
                trunc_ln81_1_reg_503_pp0_iter11_reg <= trunc_ln81_1_reg_503_pp0_iter10_reg;
                trunc_ln81_1_reg_503_pp0_iter12_reg <= trunc_ln81_1_reg_503_pp0_iter11_reg;
                trunc_ln81_1_reg_503_pp0_iter13_reg <= trunc_ln81_1_reg_503_pp0_iter12_reg;
                trunc_ln81_1_reg_503_pp0_iter14_reg <= trunc_ln81_1_reg_503_pp0_iter13_reg;
                trunc_ln81_1_reg_503_pp0_iter2_reg <= trunc_ln81_1_reg_503;
                trunc_ln81_1_reg_503_pp0_iter3_reg <= trunc_ln81_1_reg_503_pp0_iter2_reg;
                trunc_ln81_1_reg_503_pp0_iter4_reg <= trunc_ln81_1_reg_503_pp0_iter3_reg;
                trunc_ln81_1_reg_503_pp0_iter5_reg <= trunc_ln81_1_reg_503_pp0_iter4_reg;
                trunc_ln81_1_reg_503_pp0_iter6_reg <= trunc_ln81_1_reg_503_pp0_iter5_reg;
                trunc_ln81_1_reg_503_pp0_iter7_reg <= trunc_ln81_1_reg_503_pp0_iter6_reg;
                trunc_ln81_1_reg_503_pp0_iter8_reg <= trunc_ln81_1_reg_503_pp0_iter7_reg;
                trunc_ln81_1_reg_503_pp0_iter9_reg <= trunc_ln81_1_reg_503_pp0_iter8_reg;
                urem_ln81_reg_508_pp0_iter10_reg <= urem_ln81_reg_508_pp0_iter9_reg;
                urem_ln81_reg_508_pp0_iter11_reg <= urem_ln81_reg_508_pp0_iter10_reg;
                urem_ln81_reg_508_pp0_iter12_reg <= urem_ln81_reg_508_pp0_iter11_reg;
                urem_ln81_reg_508_pp0_iter13_reg <= urem_ln81_reg_508_pp0_iter12_reg;
                urem_ln81_reg_508_pp0_iter9_reg <= urem_ln81_reg_508;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln80_reg_486_pp0_iter1_reg <= icmp_ln80_reg_486;
                icmp_ln87_reg_482 <= icmp_ln87_fu_205_p2;
                icmp_ln87_reg_482_pp0_iter1_reg <= icmp_ln87_reg_482;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_205_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln80_reg_486 <= icmp_ln80_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_482 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln81_1_reg_503 <= trunc_ln81_1_fu_281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_reg_482_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                urem_ln81_reg_508 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                value_1_fu_80 <= grp_fu_407_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln81_1_fu_325_p0 <= grp_fu_398_p4;
    add_ln81_1_fu_325_p2 <= std_logic_vector(signed(add_ln81_1_fu_325_p0) + signed(urem_ln81_cast_cast_fu_321_p1));
    add_ln81_2_fu_254_p2 <= std_logic_vector(unsigned(zext_ln81_3_fu_250_p1) + unsigned(mul21_mid2));
    add_ln87_1_fu_296_p2 <= std_logic_vector(unsigned(phi_ln44_fu_92) + unsigned(ap_const_lv3_1));
    add_ln87_fu_211_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_205_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter17_stage0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_subdone, icmp_ln87_reg_482_pp0_iter16_reg)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln87_reg_482_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter17_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter17_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_84, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_value_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, value_1_fu_80, grp_fu_407_p3)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_value_1_load_1 <= grp_fu_407_p3;
        else 
            ap_sig_allocacmp_value_1_load_1 <= value_1_fu_80;
        end if; 
    end process;

    empty_33_fu_318_p1 <= urem_ln81_reg_508_pp0_iter13_reg(5 - 1 downto 0);
    empty_34_fu_335_p1 <= mul_v2_I_q0(3 - 1 downto 0);
    grp_fu_238_p0 <= j_cast_fu_234_p1(5 - 1 downto 0);
    grp_fu_244_p0 <= j_cast_fu_234_p1(5 - 1 downto 0);
    grp_fu_391_p0 <= grp_fu_391_p00(5 - 1 downto 0);
    grp_fu_391_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln81_fu_285_p1),8));
    grp_fu_398_p1 <= grp_fu_398_p10(3 - 1 downto 0);
    grp_fu_398_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_1_fu_302_p3),8));
    grp_fu_407_p0 <= grp_fu_407_p00(3 - 1 downto 0);
    grp_fu_407_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln81_1_reg_503_pp0_iter14_reg),6));
    grp_fu_407_p1 <= grp_fu_407_p10(3 - 1 downto 0);
    grp_fu_407_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_fu_335_p1),6));
    icmp_ln80_fu_220_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_12) else "0";
    icmp_ln87_fu_205_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_6C) else "0";
    j_1_fu_265_p2 <= std_logic_vector(unsigned(select_ln87_fu_226_p3) + unsigned(ap_const_lv5_1));
    j_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_fu_226_p3),32));
    lshr_ln82_dup_fu_350_p4 <= shiftreg_fu_88(191 downto 32);
    mul_v2_I_address0 <= zext_ln81_fu_330_p1(8 - 1 downto 0);

    mul_v2_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mul_v2_I_ce0 <= ap_const_logic_1;
        else 
            mul_v2_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_v2_filter_address0 <= zext_ln81_1_fu_260_p1(6 - 1 downto 0);

    mul_v2_filter_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mul_v2_filter_ce0 <= ap_const_logic_1;
        else 
            mul_v2_filter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln82_dup_fu_363_p3 <= (ap_sig_allocacmp_value_1_load_1 & lshr_ln82_dup_fu_350_p4);
    p_out <= value_1_fu_80;

    p_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_482_pp0_iter16_reg)
    begin
        if (((icmp_ln87_reg_482_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln87_1_fu_302_p3 <= 
        add_ln87_1_fu_296_p2 when (icmp_ln80_reg_486_pp0_iter10_reg(0) = '1') else 
        phi_ln44_fu_92;
    select_ln87_2_fu_371_p3 <= 
        or_ln82_dup_fu_363_p3 when (icmp_ln80_reg_486_pp0_iter16_reg(0) = '1') else 
        shiftreg_fu_88;
    select_ln87_fu_226_p3 <= 
        ap_const_lv5_0 when (icmp_ln80_fu_220_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shiftreg_out <= shiftreg_fu_88;

    shiftreg_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln87_reg_482_pp0_iter16_reg)
    begin
        if (((icmp_ln87_reg_482_pp0_iter16_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            shiftreg_out_ap_vld <= ap_const_logic_1;
        else 
            shiftreg_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln81_1_fu_281_p1 <= mul_v2_filter_q0(3 - 1 downto 0);
    trunc_ln81_fu_285_p1 <= grp_fu_238_p2(5 - 1 downto 0);
    urem_ln81_cast_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_33_fu_318_p1),8));
    zext_ln81_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_2_fu_254_p2),64));
    zext_ln81_3_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln87_fu_226_p3),6));
    zext_ln81_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_1_fu_325_p2),64));
end behav;
