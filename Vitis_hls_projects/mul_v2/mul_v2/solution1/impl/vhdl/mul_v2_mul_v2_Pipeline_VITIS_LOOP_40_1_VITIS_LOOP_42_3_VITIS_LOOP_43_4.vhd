-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    wk : IN STD_LOGIC_VECTOR (31 downto 0);
    s : IN STD_LOGIC_VECTOR (31 downto 0);
    trunc_ln40_2 : IN STD_LOGIC_VECTOR (5 downto 0);
    trunc_ln40_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    co : IN STD_LOGIC_VECTOR (31 downto 0);
    ci : IN STD_LOGIC_VECTOR (31 downto 0);
    mul6 : IN STD_LOGIC_VECTOR (31 downto 0);
    hi : IN STD_LOGIC_VECTOR (31 downto 0);
    wi : IN STD_LOGIC_VECTOR (31 downto 0);
    I : IN STD_LOGIC_VECTOR (63 downto 0);
    ci_cast : IN STD_LOGIC_VECTOR (5 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (5 downto 0);
    value_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    value_r_ce0 : OUT STD_LOGIC;
    value_r_we0 : OUT STD_LOGIC;
    value_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    value_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    value_r_ce1 : OUT STD_LOGIC;
    value_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_B4 : STD_LOGIC_VECTOR (8 downto 0) := "010110100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv7_24 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal icmp_ln40_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln40_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mul_v2_filter_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_v2_filter_ce0 : STD_LOGIC;
    signal mul_v2_filter_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln40_reg_1017_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1017_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_1021_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_reg_1029_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_1036_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_reg_1036_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_reg_1042_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal tz_1_reg_1055 : STD_LOGIC_VECTOR (1 downto 0);
    signal tz_1_reg_1055_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tz_1_reg_1055_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tz_1_reg_1055_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tz_1_reg_1055_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1060 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1060_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1060_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1060_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln42_reg_1060_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tz_cast8_cast_mid2_cast_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ty_1_reg_1071 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln41_fu_581_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln41_reg_1076 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln44_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln44_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal srem_ln44_1_reg_1091 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln41_2_fu_653_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln41_2_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_1_fu_693_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln40_1_reg_1111 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln40_1_fu_706_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_23_fu_714_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_23_reg_1122 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_reg_1127 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast11_mid2_fu_796_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_reg_1133_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_879_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln44_3_reg_1138_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_addr_reg_1153 : STD_LOGIC_VECTOR (5 downto 0);
    signal addr_cmp_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1159 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter11_stage0 : STD_LOGIC;
    signal zext_ln44_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast11_mid2_cast_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln44_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reuse_addr_reg_fu_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_4_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_433_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tz_fu_136 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln42_fu_537_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_140 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln42_1_fu_445_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ty_fu_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln41_1_fu_591_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten35_fu_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten35_load : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln41_4_fu_459_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tx_fu_152 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln40_1_fu_699_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten79_fu_156 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten79_load : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_fu_328_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln43_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln41_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_415_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_427_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_1_fu_439_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln41_1_fu_453_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_487_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_18_fu_494_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln41_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_498_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_22_fu_522_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_1_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tz_cast8_cast_mid2_fu_526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_544_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_16_fu_569_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln40_fu_574_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_605_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_623_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1_fu_643_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_mid1_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid115_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln40_2_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_669_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_1_fu_674_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln40_2_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_723_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_fu_728_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_1_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_739_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln44_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln44_2_fu_751_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_756_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln40_3_fu_781_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_3_fu_784_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_851_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln41_3_fu_790_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_861_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln40_3_fu_784_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast11_mid2_fu_796_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_869_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln41_3_fu_790_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln44_2_fu_824_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal reuse_select_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln44_2_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_16_fu_569_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_851_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_851_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_861_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_861_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_mid1_fu_605_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_869_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_869_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln44_1_fu_681_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_879_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_427_ce : STD_LOGIC;
    signal grp_fu_487_ce : STD_LOGIC;
    signal grp_fu_544_ce : STD_LOGIC;
    signal grp_fu_549_ce : STD_LOGIC;
    signal grp_fu_851_ce : STD_LOGIC;
    signal grp_fu_861_ce : STD_LOGIC;
    signal grp_fu_869_ce : STD_LOGIC;
    signal grp_fu_879_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_16_fu_569_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_427_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_851_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_851_p30 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_861_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_869_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_mid1_fu_605_p00 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp2_fu_623_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1_fu_643_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mul_v2_sdiv_6ns_32ns_32_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_srem_6ns_32ns_32_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_sdiv_2ns_32ns_32_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_srem_2ns_32ns_2_6_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component mul_v2_mul_2ns_6s_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_v2_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_mul_3ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_mul_2s_6s_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_v2_mul_5s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_ama_addmuladd_6ns_3ns_6s_3ns_6_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_v2_mac_muladd_3ns_6s_3ns_6_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_v2_ama_addmuladd_6s_6ns_6s_6ns_6_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4_mul_v2_filter IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_v2_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_v2_filter_U : component mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4_mul_v2_filter
    generic map (
        DataWidth => 32,
        AddressRange => 36,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mul_v2_filter_address0,
        ce0 => mul_v2_filter_ce0,
        q0 => mul_v2_filter_q0);

    sdiv_6ns_32ns_32_10_1_U1 : component mul_v2_sdiv_6ns_32ns_32_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_427_p0,
        din1 => mul6,
        ce => grp_fu_427_ce,
        dout => grp_fu_427_p2);

    srem_6ns_32ns_32_10_1_U2 : component mul_v2_srem_6ns_32ns_32_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_487_p0,
        din1 => mul6,
        ce => grp_fu_487_ce,
        dout => grp_fu_487_p2);

    sdiv_2ns_32ns_32_6_1_U3 : component mul_v2_sdiv_2ns_32ns_32_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 2,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_544_p0,
        din1 => co,
        ce => grp_fu_544_ce,
        dout => grp_fu_544_p2);

    srem_2ns_32ns_2_6_1_U4 : component mul_v2_srem_2ns_32ns_2_6_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 2,
        din1_WIDTH => 32,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_549_p0,
        din1 => co,
        ce => grp_fu_549_ce,
        dout => grp_fu_549_p2);

    mul_2ns_6s_6_1_1_U5 : component mul_v2_mul_2ns_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => empty_16_fu_569_p0,
        din1 => trunc_ln40_2,
        dout => empty_16_fu_569_p2);

    mul_2ns_6s_6_1_1_U6 : component mul_v2_mul_2ns_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => p_mid1_fu_605_p0,
        din1 => trunc_ln40_2,
        dout => p_mid1_fu_605_p2);

    mul_32s_32s_32_1_1_U7 : component mul_v2_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_544_p2,
        din1 => ci,
        dout => mul_ln44_fu_610_p2);

    mul_3ns_32s_32_1_1_U8 : component mul_v2_mul_3ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp2_fu_623_p0,
        din1 => wk,
        dout => tmp2_fu_623_p2);

    mul_32s_32s_32_1_1_U9 : component mul_v2_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp2_fu_623_p2,
        din1 => s,
        dout => empty_fu_628_p2);

    mul_3ns_32s_32_1_1_U10 : component mul_v2_mul_3ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp2_mid1_fu_643_p0,
        din1 => wk,
        dout => tmp2_mid1_fu_643_p2);

    mul_32s_32s_32_1_1_U11 : component mul_v2_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp2_mid1_fu_643_p2,
        din1 => s,
        dout => p_mid115_fu_648_p2);

    mul_32s_32s_32_1_1_U12 : component mul_v2_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp5_fu_669_p0,
        din1 => hi,
        dout => tmp5_fu_669_p2);

    mul_2s_6s_6_1_1_U13 : component mul_v2_mul_2s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => trunc_ln44_1_fu_674_p1,
        din1 => ci_cast,
        dout => mul_ln44_1_fu_681_p2);

    mul_32s_32s_32_1_1_U14 : component mul_v2_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp6_fu_723_p0,
        din1 => wi,
        dout => tmp6_fu_723_p2);

    mul_5s_32s_32_1_1_U15 : component mul_v2_mul_5s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln44_2_fu_824_p0,
        din1 => gmem_addr_read_reg_1143,
        dout => mul_ln44_2_fu_824_p2);

    ama_addmuladd_6ns_3ns_6s_3ns_6_4_1_U16 : component mul_v2_ama_addmuladd_6ns_3ns_6s_3ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 3,
        din2_WIDTH => 6,
        din3_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_16_fu_569_p2,
        din1 => grp_fu_851_p1,
        din2 => trunc_ln40_1,
        din3 => grp_fu_851_p3,
        ce => grp_fu_851_ce,
        dout => grp_fu_851_p4);

    mac_muladd_3ns_6s_3ns_6_4_1_U17 : component mul_v2_mac_muladd_3ns_6s_3ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 3,
        din1_WIDTH => 6,
        din2_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_861_p0,
        din1 => trunc_ln40_1,
        din2 => grp_fu_861_p2,
        ce => grp_fu_861_ce,
        dout => grp_fu_861_p3);

    ama_addmuladd_6ns_3ns_6s_3ns_6_4_1_U18 : component mul_v2_ama_addmuladd_6ns_3ns_6s_3ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 3,
        din2_WIDTH => 6,
        din3_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_mid1_fu_605_p2,
        din1 => grp_fu_869_p1,
        din2 => trunc_ln40_1,
        din3 => grp_fu_869_p3,
        ce => grp_fu_869_ce,
        dout => grp_fu_869_p4);

    ama_addmuladd_6s_6ns_6s_6ns_6_4_1_U19 : component mul_v2_ama_addmuladd_6s_6ns_6s_6ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_ln44_1_fu_681_p2,
        din1 => grp_fu_879_p1,
        din2 => trunc_ln,
        din3 => empty_23_reg_1122,
        ce => grp_fu_879_ce,
        dout => grp_fu_879_p4);

    flow_control_loop_pipe_sequential_init_U : component mul_v2_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter11_stage0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten35_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    indvar_flatten35_fu_148 <= select_ln41_4_fu_459_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten35_fu_148 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten79_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    indvar_flatten79_fu_156 <= add_ln40_fu_328_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten79_fu_156 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_140 <= select_ln42_1_fu_445_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_140 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0))) then 
                    j_fu_132 <= j_1_fu_433_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_132 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_addr_reg_fu_124 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_124 <= p_cast11_mid2_cast_fu_802_p1;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    reuse_reg_fu_128 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter19 = ap_const_logic_1)) then 
                    reuse_reg_fu_128 <= add_ln44_4_fu_839_p2;
                end if;
            end if; 
        end if;
    end process;

    tx_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tx_fu_152 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln40_reg_1017_pp0_iter9_reg = ap_const_lv1_0))) then 
                    tx_fu_152 <= select_ln40_1_fu_699_p3;
                end if;
            end if; 
        end if;
    end process;

    ty_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ty_fu_144 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln40_reg_1017_pp0_iter7_reg = ap_const_lv1_0))) then 
                    ty_fu_144 <= select_ln41_1_fu_591_p3;
                end if;
            end if; 
        end if;
    end process;

    tz_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tz_fu_136 <= ap_const_lv2_0;
                elsif (((icmp_ln40_reg_1017_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    tz_fu_136 <= select_ln42_fu_537_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1017_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_1_reg_1111 <= add_ln40_1_fu_693_p2;
                empty_23_reg_1122 <= empty_23_fu_714_p1;
                gmem_addr_reg_1127 <= sext_ln44_1_fu_766_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1017_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln41_reg_1076 <= add_ln41_fu_581_p2;
                mul_ln44_reg_1086 <= mul_ln44_fu_610_p2;
                srem_ln44_1_reg_1091 <= grp_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1017_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln42_reg_1060 <= add_ln42_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln42_reg_1060_pp0_iter4_reg <= add_ln42_reg_1060;
                add_ln42_reg_1060_pp0_iter5_reg <= add_ln42_reg_1060_pp0_iter4_reg;
                add_ln42_reg_1060_pp0_iter6_reg <= add_ln42_reg_1060_pp0_iter5_reg;
                add_ln42_reg_1060_pp0_iter7_reg <= add_ln42_reg_1060_pp0_iter6_reg;
                add_ln44_3_reg_1138_pp0_iter13_reg <= add_ln44_3_reg_1138;
                add_ln44_3_reg_1138_pp0_iter14_reg <= add_ln44_3_reg_1138_pp0_iter13_reg;
                add_ln44_3_reg_1138_pp0_iter15_reg <= add_ln44_3_reg_1138_pp0_iter14_reg;
                add_ln44_3_reg_1138_pp0_iter16_reg <= add_ln44_3_reg_1138_pp0_iter15_reg;
                add_ln44_3_reg_1138_pp0_iter17_reg <= add_ln44_3_reg_1138_pp0_iter16_reg;
                addr_cmp_reg_1159 <= addr_cmp_fu_813_p2;
                and_ln40_1_reg_1029_pp0_iter10_reg <= and_ln40_1_reg_1029_pp0_iter9_reg;
                and_ln40_1_reg_1029_pp0_iter2_reg <= and_ln40_1_reg_1029_pp0_iter1_reg;
                and_ln40_1_reg_1029_pp0_iter3_reg <= and_ln40_1_reg_1029_pp0_iter2_reg;
                and_ln40_1_reg_1029_pp0_iter4_reg <= and_ln40_1_reg_1029_pp0_iter3_reg;
                and_ln40_1_reg_1029_pp0_iter5_reg <= and_ln40_1_reg_1029_pp0_iter4_reg;
                and_ln40_1_reg_1029_pp0_iter6_reg <= and_ln40_1_reg_1029_pp0_iter5_reg;
                and_ln40_1_reg_1029_pp0_iter7_reg <= and_ln40_1_reg_1029_pp0_iter6_reg;
                and_ln40_1_reg_1029_pp0_iter8_reg <= and_ln40_1_reg_1029_pp0_iter7_reg;
                and_ln40_1_reg_1029_pp0_iter9_reg <= and_ln40_1_reg_1029_pp0_iter8_reg;
                and_ln41_reg_1042_pp0_iter10_reg <= and_ln41_reg_1042_pp0_iter9_reg;
                and_ln41_reg_1042_pp0_iter2_reg <= and_ln41_reg_1042_pp0_iter1_reg;
                and_ln41_reg_1042_pp0_iter3_reg <= and_ln41_reg_1042_pp0_iter2_reg;
                and_ln41_reg_1042_pp0_iter4_reg <= and_ln41_reg_1042_pp0_iter3_reg;
                and_ln41_reg_1042_pp0_iter5_reg <= and_ln41_reg_1042_pp0_iter4_reg;
                and_ln41_reg_1042_pp0_iter6_reg <= and_ln41_reg_1042_pp0_iter5_reg;
                and_ln41_reg_1042_pp0_iter7_reg <= and_ln41_reg_1042_pp0_iter6_reg;
                and_ln41_reg_1042_pp0_iter8_reg <= and_ln41_reg_1042_pp0_iter7_reg;
                and_ln41_reg_1042_pp0_iter9_reg <= and_ln41_reg_1042_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_read_reg_1143 <= m_axi_gmem_RDATA;
                icmp_ln40_reg_1017_pp0_iter10_reg <= icmp_ln40_reg_1017_pp0_iter9_reg;
                icmp_ln40_reg_1017_pp0_iter2_reg <= icmp_ln40_reg_1017_pp0_iter1_reg;
                icmp_ln40_reg_1017_pp0_iter3_reg <= icmp_ln40_reg_1017_pp0_iter2_reg;
                icmp_ln40_reg_1017_pp0_iter4_reg <= icmp_ln40_reg_1017_pp0_iter3_reg;
                icmp_ln40_reg_1017_pp0_iter5_reg <= icmp_ln40_reg_1017_pp0_iter4_reg;
                icmp_ln40_reg_1017_pp0_iter6_reg <= icmp_ln40_reg_1017_pp0_iter5_reg;
                icmp_ln40_reg_1017_pp0_iter7_reg <= icmp_ln40_reg_1017_pp0_iter6_reg;
                icmp_ln40_reg_1017_pp0_iter8_reg <= icmp_ln40_reg_1017_pp0_iter7_reg;
                icmp_ln40_reg_1017_pp0_iter9_reg <= icmp_ln40_reg_1017_pp0_iter8_reg;
                icmp_ln41_reg_1021_pp0_iter10_reg <= icmp_ln41_reg_1021_pp0_iter9_reg;
                icmp_ln41_reg_1021_pp0_iter2_reg <= icmp_ln41_reg_1021_pp0_iter1_reg;
                icmp_ln41_reg_1021_pp0_iter3_reg <= icmp_ln41_reg_1021_pp0_iter2_reg;
                icmp_ln41_reg_1021_pp0_iter4_reg <= icmp_ln41_reg_1021_pp0_iter3_reg;
                icmp_ln41_reg_1021_pp0_iter5_reg <= icmp_ln41_reg_1021_pp0_iter4_reg;
                icmp_ln41_reg_1021_pp0_iter6_reg <= icmp_ln41_reg_1021_pp0_iter5_reg;
                icmp_ln41_reg_1021_pp0_iter7_reg <= icmp_ln41_reg_1021_pp0_iter6_reg;
                icmp_ln41_reg_1021_pp0_iter8_reg <= icmp_ln41_reg_1021_pp0_iter7_reg;
                icmp_ln41_reg_1021_pp0_iter9_reg <= icmp_ln41_reg_1021_pp0_iter8_reg;
                or_ln41_reg_1036_pp0_iter2_reg <= or_ln41_reg_1036_pp0_iter1_reg;
                p_cast11_mid2_reg_1133_pp0_iter12_reg <= p_cast11_mid2_reg_1133;
                p_cast11_mid2_reg_1133_pp0_iter13_reg <= p_cast11_mid2_reg_1133_pp0_iter12_reg;
                p_cast11_mid2_reg_1133_pp0_iter14_reg <= p_cast11_mid2_reg_1133_pp0_iter13_reg;
                p_cast11_mid2_reg_1133_pp0_iter15_reg <= p_cast11_mid2_reg_1133_pp0_iter14_reg;
                p_cast11_mid2_reg_1133_pp0_iter16_reg <= p_cast11_mid2_reg_1133_pp0_iter15_reg;
                p_cast11_mid2_reg_1133_pp0_iter17_reg <= p_cast11_mid2_reg_1133_pp0_iter16_reg;
                ty_1_reg_1071 <= ty_fu_144;
                tz_1_reg_1055 <= tz_fu_136;
                tz_1_reg_1055_pp0_iter4_reg <= tz_1_reg_1055;
                tz_1_reg_1055_pp0_iter5_reg <= tz_1_reg_1055_pp0_iter4_reg;
                tz_1_reg_1055_pp0_iter6_reg <= tz_1_reg_1055_pp0_iter5_reg;
                tz_1_reg_1055_pp0_iter7_reg <= tz_1_reg_1055_pp0_iter6_reg;
                value_addr_reg_1153 <= p_cast11_mid2_cast_fu_802_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln44_3_reg_1138 <= grp_fu_879_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_322_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln40_1_reg_1029 <= and_ln40_1_fu_373_p2;
                and_ln41_reg_1042 <= and_ln41_fu_397_p2;
                icmp_ln41_reg_1021 <= icmp_ln41_fu_343_p2;
                    j_cast_reg_1049(4 downto 0) <= j_cast_fu_423_p1(4 downto 0);
                or_ln41_reg_1036 <= or_ln41_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln40_1_reg_1029_pp0_iter1_reg <= and_ln40_1_reg_1029;
                and_ln41_reg_1042_pp0_iter1_reg <= and_ln41_reg_1042;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln40_reg_1017 <= icmp_ln40_fu_322_p2;
                icmp_ln40_reg_1017_pp0_iter1_reg <= icmp_ln40_reg_1017;
                icmp_ln41_reg_1021_pp0_iter1_reg <= icmp_ln41_reg_1021;
                or_ln41_reg_1036_pp0_iter1_reg <= or_ln41_reg_1036;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_reg_1017_pp0_iter10_reg = ap_const_lv1_0))) then
                p_cast11_mid2_reg_1133 <= p_cast11_mid2_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_reg_1017_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln41_2_reg_1096 <= select_ln41_2_fu_653_p3;
                tmp5_reg_1101 <= tmp5_fu_669_p2;
            end if;
        end if;
    end process;
    j_cast_reg_1049(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln40_1_fu_693_p2 <= std_logic_vector(unsigned(tx_fu_152) + unsigned(ap_const_lv3_1));
    add_ln40_fu_328_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten79_load) + unsigned(ap_const_lv11_1));
    add_ln41_1_fu_453_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten35_load) + unsigned(ap_const_lv9_1));
    add_ln41_fu_581_p2 <= std_logic_vector(unsigned(select_ln40_fu_574_p3) + unsigned(ap_const_lv3_1));
    add_ln42_1_fu_439_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln42_fu_516_p2 <= std_logic_vector(unsigned(select_ln41_fu_498_p3) + unsigned(ap_const_lv2_1));
    add_ln44_1_fu_733_p2 <= std_logic_vector(unsigned(add_ln44_fu_728_p2) + unsigned(grp_fu_487_p2));
    add_ln44_2_fu_751_p2 <= std_logic_vector(signed(sext_ln44_fu_747_p1) + signed(I));
    add_ln44_4_fu_839_p2 <= std_logic_vector(unsigned(reuse_select_fu_832_p3) + unsigned(mul_ln44_2_fu_824_p2));
    add_ln44_fu_728_p2 <= std_logic_vector(unsigned(select_ln41_2_reg_1096) + unsigned(tmp6_fu_723_p2));
    addr_cmp_fu_813_p2 <= "1" when (reuse_addr_reg_fu_124 = p_cast11_mid2_cast_fu_802_p1) else "0";
    and_ln40_1_fu_373_p2 <= (xor_ln40_fu_349_p2 and icmp_ln42_fu_367_p2);
    and_ln40_fu_361_p2 <= (xor_ln40_fu_349_p2 and icmp_ln43_fu_355_p2);
    and_ln41_1_fu_510_p2 <= (xor_ln41_1_fu_505_p2 and empty_18_fu_494_p1);
    and_ln41_fu_397_p2 <= (or_ln41_1_fu_391_p2 and and_ln40_fu_361_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, m_axi_gmem_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter18, m_axi_gmem_RVALID, ap_block_state12_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state12_io)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln40_reg_1017_pp0_iter10_reg)
    begin
                ap_block_state12_io <= ((icmp_ln40_reg_1017_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter18_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state19_pp0_stage0_iter18 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln40_fu_322_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln40_fu_322_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter11_stage0_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln40_reg_1017_pp0_iter10_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln40_reg_1017_pp0_iter10_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter11_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten35_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten35_fu_148)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten35_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten35_load <= indvar_flatten35_fu_148;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten79_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten79_fu_156)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten79_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten79_load <= indvar_flatten79_fu_156;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_140)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_140;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_132)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_132;
        end if; 
    end process;

    empty_16_fu_569_p0 <= empty_16_fu_569_p00(2 - 1 downto 0);
    empty_16_fu_569_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tz_1_reg_1055_pp0_iter7_reg),6));
    empty_18_fu_494_p1 <= tz_fu_136(1 - 1 downto 0);
    empty_20_fu_403_p2 <= (and_ln41_fu_397_p2 or and_ln40_1_fu_373_p2);
    empty_21_fu_409_p2 <= (icmp_ln41_fu_343_p2 or empty_20_fu_403_p2);
    empty_22_fu_522_p1 <= add_ln42_fu_516_p2(1 - 1 downto 0);
    empty_23_fu_714_p1 <= grp_fu_487_p2(6 - 1 downto 0);

    gmem_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_ARREADY, icmp_ln40_reg_1017_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln40_reg_1017_pp0_iter10_reg = ap_const_lv1_0))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter18, m_axi_gmem_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_427_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_427_ce <= ap_const_logic_1;
        else 
            grp_fu_427_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_427_p0 <= grp_fu_427_p00(6 - 1 downto 0);
    grp_fu_427_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_415_p3),32));

    grp_fu_487_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_487_ce <= ap_const_logic_1;
        else 
            grp_fu_487_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_487_p0 <= j_cast_reg_1049(6 - 1 downto 0);

    grp_fu_544_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_544_ce <= ap_const_logic_1;
        else 
            grp_fu_544_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_544_p0 <= tz_cast8_cast_mid2_cast_fu_533_p1(2 - 1 downto 0);

    grp_fu_549_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_549_ce <= ap_const_logic_1;
        else 
            grp_fu_549_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_549_p0 <= tz_cast8_cast_mid2_cast_fu_533_p1(2 - 1 downto 0);

    grp_fu_851_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_851_ce <= ap_const_logic_1;
        else 
            grp_fu_851_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_851_p1 <= grp_fu_851_p10(3 - 1 downto 0);
    grp_fu_851_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_fu_144),6));
    grp_fu_851_p3 <= grp_fu_851_p30(3 - 1 downto 0);
    grp_fu_851_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_fu_152),6));

    grp_fu_861_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_861_ce <= ap_const_logic_1;
        else 
            grp_fu_861_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_861_p0 <= grp_fu_861_p00(3 - 1 downto 0);
    grp_fu_861_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_fu_581_p2),6));
    grp_fu_861_p2 <= zext_ln40_1_fu_706_p1(3 - 1 downto 0);

    grp_fu_869_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_869_ce <= ap_const_logic_1;
        else 
            grp_fu_869_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_869_p1 <= grp_fu_869_p10(3 - 1 downto 0);
    grp_fu_869_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln41_1_fu_591_p3),6));
    grp_fu_869_p3 <= zext_ln40_1_fu_706_p1(3 - 1 downto 0);

    grp_fu_879_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_879_ce <= ap_const_logic_1;
        else 
            grp_fu_879_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_879_p1 <= grp_fu_427_p2(6 - 1 downto 0);
    icmp_ln40_fu_322_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten79_load = ap_const_lv11_438) else "0";
    icmp_ln41_fu_343_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten35_load = ap_const_lv9_B4) else "0";
    icmp_ln42_fu_367_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_24) else "0";
    icmp_ln43_fu_355_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_12) else "0";
    j_1_fu_433_p2 <= std_logic_vector(unsigned(j_mid2_fu_415_p3) + unsigned(ap_const_lv5_1));
    j_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_415_p3),32));
    j_mid2_fu_415_p3 <= 
        ap_const_lv5_0 when (empty_21_fu_409_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    m_axi_gmem_ARADDR <= gmem_addr_reg_1127;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln40_reg_1017_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln40_reg_1017_pp0_iter10_reg = ap_const_lv1_0))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    mul_ln44_2_fu_824_p0 <= mul_v2_filter_q0(5 - 1 downto 0);
    mul_v2_filter_address0 <= zext_ln44_fu_806_p1(6 - 1 downto 0);

    mul_v2_filter_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mul_v2_filter_ce0 <= ap_const_logic_1;
        else 
            mul_v2_filter_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln41_1_fu_391_p2 <= (xor_ln41_fu_385_p2 or icmp_ln41_fu_343_p2);
    or_ln41_fu_379_p2 <= (icmp_ln41_fu_343_p2 or and_ln40_1_fu_373_p2);
    p_cast11_mid2_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast11_mid2_reg_1133_pp0_iter17_reg),64));
    p_cast11_mid2_fu_796_p1 <= grp_fu_869_p4;
    p_cast11_mid2_fu_796_p3 <= 
        p_cast11_mid2_fu_796_p1 when (and_ln41_reg_1042_pp0_iter10_reg(0) = '1') else 
        select_ln41_3_fu_790_p3;
    p_mid1_fu_605_p0 <= p_mid1_fu_605_p00(2 - 1 downto 0);
    p_mid1_fu_605_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_reg_1060_pp0_iter7_reg),6));
    reuse_select_fu_832_p3 <= 
        reuse_reg_fu_128 when (addr_cmp_reg_1159(0) = '1') else 
        value_r_q1;
    select_ln40_1_fu_699_p3 <= 
        add_ln40_1_fu_693_p2 when (icmp_ln41_reg_1021_pp0_iter9_reg(0) = '1') else 
        tx_fu_152;
    select_ln40_2_fu_633_p3 <= 
        ap_const_lv32_0 when (icmp_ln41_reg_1021_pp0_iter8_reg(0) = '1') else 
        empty_fu_628_p2;
    select_ln40_3_fu_784_p2 <= grp_fu_851_p4;
    select_ln40_3_fu_784_p3 <= 
        zext_ln40_3_fu_781_p1 when (icmp_ln41_reg_1021_pp0_iter10_reg(0) = '1') else 
        select_ln40_3_fu_784_p2;
    select_ln40_fu_574_p3 <= 
        ap_const_lv3_0 when (icmp_ln41_reg_1021_pp0_iter7_reg(0) = '1') else 
        ty_fu_144;
    select_ln41_1_fu_591_p3 <= 
        add_ln41_fu_581_p2 when (and_ln40_1_reg_1029_pp0_iter7_reg(0) = '1') else 
        select_ln40_fu_574_p3;
    select_ln41_2_fu_653_p3 <= 
        p_mid115_fu_648_p2 when (and_ln40_1_reg_1029_pp0_iter8_reg(0) = '1') else 
        select_ln40_2_fu_633_p3;
    select_ln41_3_fu_790_p1 <= grp_fu_861_p3;
    select_ln41_3_fu_790_p3 <= 
        select_ln41_3_fu_790_p1 when (and_ln40_1_reg_1029_pp0_iter10_reg(0) = '1') else 
        select_ln40_3_fu_784_p3;
    select_ln41_4_fu_459_p3 <= 
        ap_const_lv9_1 when (icmp_ln41_fu_343_p2(0) = '1') else 
        add_ln41_1_fu_453_p2;
    select_ln41_fu_498_p3 <= 
        ap_const_lv2_0 when (or_ln41_reg_1036_pp0_iter2_reg(0) = '1') else 
        tz_fu_136;
    select_ln42_1_fu_445_p3 <= 
        ap_const_lv7_1 when (or_ln41_fu_379_p2(0) = '1') else 
        add_ln42_1_fu_439_p2;
    select_ln42_fu_537_p3 <= 
        add_ln42_fu_516_p2 when (and_ln41_reg_1042_pp0_iter2_reg(0) = '1') else 
        select_ln41_fu_498_p3;
        sext_ln44_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_756_p4),64));

        sext_ln44_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_739_p3),64));

    shl_ln_fu_739_p3 <= (add_ln44_1_fu_733_p2 & ap_const_lv2_0);
    tmp2_fu_623_p0 <= tmp2_fu_623_p00(3 - 1 downto 0);
    tmp2_fu_623_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ty_1_reg_1071),32));
    tmp2_mid1_fu_643_p0 <= tmp2_mid1_fu_643_p00(3 - 1 downto 0);
    tmp2_mid1_fu_643_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1076),32));
    tmp5_fu_669_p0 <= std_logic_vector(unsigned(grp_fu_427_p2) + unsigned(mul_ln44_reg_1086));
    tmp6_fu_723_p0 <= std_logic_vector(unsigned(tmp5_reg_1101) + unsigned(zext_ln40_2_fu_710_p1));
    trunc_ln2_fu_756_p4 <= add_ln44_2_fu_751_p2(63 downto 2);
    trunc_ln44_1_fu_674_p1 <= srem_ln44_1_reg_1091(2 - 1 downto 0);
    tz_cast8_cast_mid2_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tz_cast8_cast_mid2_fu_526_p3),32));
    tz_cast8_cast_mid2_fu_526_p3 <= 
        empty_22_fu_522_p1 when (and_ln41_reg_1042_pp0_iter2_reg(0) = '1') else 
        and_ln41_1_fu_510_p2;
    value_r_address0 <= value_addr_reg_1153;
    value_r_address1 <= p_cast11_mid2_cast_fu_802_p1(6 - 1 downto 0);

    value_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_ce0 <= ap_const_logic_1;
        else 
            value_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    value_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_ce1 <= ap_const_logic_1;
        else 
            value_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    value_r_d0 <= std_logic_vector(unsigned(reuse_select_fu_832_p3) + unsigned(mul_ln44_2_fu_824_p2));

    value_r_we0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            value_r_we0 <= ap_const_logic_1;
        else 
            value_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln40_fu_349_p2 <= (icmp_ln41_fu_343_p2 xor ap_const_lv1_1);
    xor_ln41_1_fu_505_p2 <= (or_ln41_reg_1036_pp0_iter2_reg xor ap_const_lv1_1);
    xor_ln41_fu_385_p2 <= (icmp_ln42_fu_367_p2 xor ap_const_lv1_1);
    zext_ln40_1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_fu_699_p3),6));
    zext_ln40_2_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_fu_699_p3),32));
    zext_ln40_3_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_reg_1111),6));
    zext_ln44_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln44_3_reg_1138_pp0_iter17_reg),64));
end behav;
