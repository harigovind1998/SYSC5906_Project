// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        wk,
        s,
        trunc_ln40_2,
        trunc_ln40_1,
        co,
        ci,
        mul6,
        hi,
        wi,
        I,
        ci_cast,
        trunc_ln,
        value_r_address0,
        value_r_ce0,
        value_r_we0,
        value_r_d0,
        value_r_address1,
        value_r_ce1,
        value_r_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] wk;
input  [31:0] s;
input  [5:0] trunc_ln40_2;
input  [5:0] trunc_ln40_1;
input  [31:0] co;
input  [31:0] ci;
input  [31:0] mul6;
input  [31:0] hi;
input  [31:0] wi;
input  [63:0] I;
input  [5:0] ci_cast;
input  [5:0] trunc_ln;
output  [5:0] value_r_address0;
output   value_r_ce0;
output   value_r_we0;
output  [31:0] value_r_d0;
output  [5:0] value_r_address1;
output   value_r_ce1;
input  [31:0] value_r_q1;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg value_r_ce0;
reg value_r_we0;
reg value_r_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg   [0:0] icmp_ln40_reg_1017;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter10_reg;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln40_fu_322_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] mul_v2_filter_address0;
reg    mul_v2_filter_ce0;
wire   [31:0] mul_v2_filter_q0;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter1_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter2_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter3_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter4_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter5_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter6_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter7_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter8_reg;
reg   [0:0] icmp_ln40_reg_1017_pp0_iter9_reg;
wire   [0:0] icmp_ln41_fu_343_p2;
reg   [0:0] icmp_ln41_reg_1021;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter1_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter2_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter3_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter4_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter5_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter6_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter7_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter8_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter9_reg;
reg   [0:0] icmp_ln41_reg_1021_pp0_iter10_reg;
wire   [0:0] and_ln40_1_fu_373_p2;
reg   [0:0] and_ln40_1_reg_1029;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter1_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter2_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter3_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter4_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter5_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter6_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter7_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter8_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter9_reg;
reg   [0:0] and_ln40_1_reg_1029_pp0_iter10_reg;
wire   [0:0] or_ln41_fu_379_p2;
reg   [0:0] or_ln41_reg_1036;
reg   [0:0] or_ln41_reg_1036_pp0_iter1_reg;
reg   [0:0] or_ln41_reg_1036_pp0_iter2_reg;
wire   [0:0] and_ln41_fu_397_p2;
reg   [0:0] and_ln41_reg_1042;
reg   [0:0] and_ln41_reg_1042_pp0_iter1_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter2_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter3_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter4_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter5_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter6_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter7_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter8_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter9_reg;
reg   [0:0] and_ln41_reg_1042_pp0_iter10_reg;
wire   [31:0] j_cast_fu_423_p1;
reg   [31:0] j_cast_reg_1049;
reg   [1:0] tz_1_reg_1055;
reg   [1:0] tz_1_reg_1055_pp0_iter4_reg;
reg   [1:0] tz_1_reg_1055_pp0_iter5_reg;
reg   [1:0] tz_1_reg_1055_pp0_iter6_reg;
reg   [1:0] tz_1_reg_1055_pp0_iter7_reg;
wire   [1:0] add_ln42_fu_516_p2;
reg   [1:0] add_ln42_reg_1060;
reg   [1:0] add_ln42_reg_1060_pp0_iter4_reg;
reg   [1:0] add_ln42_reg_1060_pp0_iter5_reg;
reg   [1:0] add_ln42_reg_1060_pp0_iter6_reg;
reg   [1:0] add_ln42_reg_1060_pp0_iter7_reg;
wire   [31:0] tz_cast8_cast_mid2_cast_fu_533_p1;
reg   [2:0] ty_1_reg_1071;
wire   [2:0] add_ln41_fu_581_p2;
reg   [2:0] add_ln41_reg_1076;
wire   [31:0] mul_ln44_fu_610_p2;
reg   [31:0] mul_ln44_reg_1086;
wire   [1:0] grp_fu_549_p2;
reg   [1:0] srem_ln44_1_reg_1091;
wire   [31:0] select_ln41_2_fu_653_p3;
reg   [31:0] select_ln41_2_reg_1096;
wire   [31:0] tmp5_fu_669_p2;
reg   [31:0] tmp5_reg_1101;
wire   [2:0] add_ln40_1_fu_693_p2;
reg   [2:0] add_ln40_1_reg_1111;
wire   [5:0] zext_ln40_1_fu_706_p1;
wire   [5:0] empty_23_fu_714_p1;
reg   [5:0] empty_23_reg_1122;
reg   [63:0] gmem_addr_reg_1127;
wire   [5:0] p_cast11_mid2_fu_796_p3;
reg   [5:0] p_cast11_mid2_reg_1133;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter12_reg;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter13_reg;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter14_reg;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter15_reg;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter16_reg;
reg   [5:0] p_cast11_mid2_reg_1133_pp0_iter17_reg;
wire   [5:0] grp_fu_879_p4;
reg  signed [5:0] add_ln44_3_reg_1138;
reg  signed [5:0] add_ln44_3_reg_1138_pp0_iter13_reg;
reg  signed [5:0] add_ln44_3_reg_1138_pp0_iter14_reg;
reg  signed [5:0] add_ln44_3_reg_1138_pp0_iter15_reg;
reg  signed [5:0] add_ln44_3_reg_1138_pp0_iter16_reg;
reg  signed [5:0] add_ln44_3_reg_1138_pp0_iter17_reg;
reg  signed [31:0] gmem_addr_read_reg_1143;
reg   [5:0] value_addr_reg_1153;
wire   [0:0] addr_cmp_fu_813_p2;
reg   [0:0] addr_cmp_reg_1159;
reg    ap_condition_exit_pp0_iter11_stage0;
wire   [63:0] zext_ln44_fu_806_p1;
wire   [63:0] p_cast11_mid2_cast_fu_802_p1;
wire  signed [63:0] sext_ln44_1_fu_766_p1;
reg   [63:0] reuse_addr_reg_fu_124;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_128;
wire   [31:0] add_ln44_4_fu_839_p2;
reg   [4:0] j_fu_132;
reg   [4:0] ap_sig_allocacmp_j_load;
wire   [4:0] j_1_fu_433_p2;
reg   [1:0] tz_fu_136;
wire   [1:0] select_ln42_fu_537_p3;
reg   [6:0] indvar_flatten_fu_140;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [6:0] select_ln42_1_fu_445_p3;
reg   [2:0] ty_fu_144;
wire   [2:0] select_ln41_1_fu_591_p3;
reg   [8:0] indvar_flatten35_fu_148;
reg   [8:0] ap_sig_allocacmp_indvar_flatten35_load;
wire   [8:0] select_ln41_4_fu_459_p3;
reg   [2:0] tx_fu_152;
wire   [2:0] select_ln40_1_fu_699_p3;
reg   [10:0] indvar_flatten79_fu_156;
reg   [10:0] ap_sig_allocacmp_indvar_flatten79_load;
wire   [10:0] add_ln40_fu_328_p2;
wire   [0:0] icmp_ln43_fu_355_p2;
wire   [0:0] xor_ln40_fu_349_p2;
wire   [0:0] icmp_ln42_fu_367_p2;
wire   [0:0] xor_ln41_fu_385_p2;
wire   [0:0] and_ln40_fu_361_p2;
wire   [0:0] or_ln41_1_fu_391_p2;
wire   [0:0] empty_20_fu_403_p2;
wire   [0:0] empty_21_fu_409_p2;
wire   [4:0] j_mid2_fu_415_p3;
wire   [5:0] grp_fu_427_p0;
wire   [6:0] add_ln42_1_fu_439_p2;
wire   [8:0] add_ln41_1_fu_453_p2;
wire   [5:0] grp_fu_487_p0;
wire   [0:0] empty_18_fu_494_p1;
wire   [0:0] xor_ln41_1_fu_505_p2;
wire   [1:0] select_ln41_fu_498_p3;
wire   [0:0] empty_22_fu_522_p1;
wire   [0:0] and_ln41_1_fu_510_p2;
wire   [0:0] tz_cast8_cast_mid2_fu_526_p3;
wire   [1:0] grp_fu_544_p0;
wire   [1:0] grp_fu_549_p0;
wire   [1:0] empty_16_fu_569_p0;
wire   [2:0] select_ln40_fu_574_p3;
wire   [1:0] p_mid1_fu_605_p0;
wire  signed [31:0] grp_fu_544_p2;
wire   [2:0] tmp2_fu_623_p0;
wire  signed [31:0] tmp2_fu_623_p2;
wire   [31:0] empty_fu_628_p2;
wire   [2:0] tmp2_mid1_fu_643_p0;
wire  signed [31:0] tmp2_mid1_fu_643_p2;
wire   [31:0] p_mid115_fu_648_p2;
wire   [31:0] select_ln40_2_fu_633_p3;
wire   [31:0] grp_fu_427_p2;
wire  signed [31:0] tmp5_fu_669_p0;
wire  signed [1:0] trunc_ln44_1_fu_674_p1;
wire   [31:0] grp_fu_487_p2;
wire   [31:0] zext_ln40_2_fu_710_p1;
wire  signed [31:0] tmp6_fu_723_p0;
wire   [31:0] tmp6_fu_723_p2;
wire   [31:0] add_ln44_fu_728_p2;
wire   [31:0] add_ln44_1_fu_733_p2;
wire   [33:0] shl_ln_fu_739_p3;
wire  signed [63:0] sext_ln44_fu_747_p1;
wire   [63:0] add_ln44_2_fu_751_p2;
wire   [61:0] trunc_ln2_fu_756_p4;
wire   [5:0] zext_ln40_3_fu_781_p1;
wire  signed [5:0] select_ln40_3_fu_784_p2;
wire   [5:0] grp_fu_851_p4;
wire  signed [5:0] select_ln41_3_fu_790_p1;
wire   [5:0] grp_fu_861_p3;
wire   [5:0] select_ln40_3_fu_784_p3;
wire  signed [5:0] p_cast11_mid2_fu_796_p1;
wire   [5:0] grp_fu_869_p4;
wire   [5:0] select_ln41_3_fu_790_p3;
wire  signed [4:0] mul_ln44_2_fu_824_p0;
wire   [31:0] reuse_select_fu_832_p3;
wire   [31:0] mul_ln44_2_fu_824_p2;
wire   [5:0] empty_16_fu_569_p2;
wire   [2:0] grp_fu_851_p1;
wire   [2:0] grp_fu_851_p3;
wire   [2:0] grp_fu_861_p0;
wire   [2:0] grp_fu_861_p2;
wire   [5:0] p_mid1_fu_605_p2;
wire   [2:0] grp_fu_869_p1;
wire   [2:0] grp_fu_869_p3;
wire  signed [5:0] mul_ln44_1_fu_681_p2;
wire   [5:0] grp_fu_879_p1;
reg    grp_fu_427_ce;
reg    grp_fu_487_ce;
reg    grp_fu_544_ce;
reg    grp_fu_549_ce;
reg    grp_fu_851_ce;
reg    grp_fu_861_ce;
reg    grp_fu_869_ce;
reg    grp_fu_879_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [5:0] empty_16_fu_569_p00;
wire   [31:0] grp_fu_427_p00;
wire   [5:0] grp_fu_851_p10;
wire   [5:0] grp_fu_851_p30;
wire   [5:0] grp_fu_861_p00;
wire   [5:0] grp_fu_869_p10;
wire   [5:0] p_mid1_fu_605_p00;
wire   [31:0] tmp2_fu_623_p00;
wire   [31:0] tmp2_mid1_fu_643_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4_mul_v2_filter #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
mul_v2_filter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul_v2_filter_address0),
    .ce0(mul_v2_filter_ce0),
    .q0(mul_v2_filter_q0)
);

mul_v2_sdiv_6ns_32ns_32_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_6ns_32ns_32_10_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_427_p0),
    .din1(mul6),
    .ce(grp_fu_427_ce),
    .dout(grp_fu_427_p2)
);

mul_v2_srem_6ns_32ns_32_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
srem_6ns_32ns_32_10_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_487_p0),
    .din1(mul6),
    .ce(grp_fu_487_ce),
    .dout(grp_fu_487_p2)
);

mul_v2_sdiv_2ns_32ns_32_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sdiv_2ns_32ns_32_6_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_544_p0),
    .din1(co),
    .ce(grp_fu_544_ce),
    .dout(grp_fu_544_p2)
);

mul_v2_srem_2ns_32ns_2_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 2 ))
srem_2ns_32ns_2_6_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_549_p0),
    .din1(co),
    .ce(grp_fu_549_ce),
    .dout(grp_fu_549_p2)
);

mul_v2_mul_2ns_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_2ns_6s_6_1_1_U5(
    .din0(empty_16_fu_569_p0),
    .din1(trunc_ln40_2),
    .dout(empty_16_fu_569_p2)
);

mul_v2_mul_2ns_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_2ns_6s_6_1_1_U6(
    .din0(p_mid1_fu_605_p0),
    .din1(trunc_ln40_2),
    .dout(p_mid1_fu_605_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U7(
    .din0(grp_fu_544_p2),
    .din1(ci),
    .dout(mul_ln44_fu_610_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U8(
    .din0(tmp2_fu_623_p0),
    .din1(wk),
    .dout(tmp2_fu_623_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U9(
    .din0(tmp2_fu_623_p2),
    .din1(s),
    .dout(empty_fu_628_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U10(
    .din0(tmp2_mid1_fu_643_p0),
    .din1(wk),
    .dout(tmp2_mid1_fu_643_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(tmp2_mid1_fu_643_p2),
    .din1(s),
    .dout(p_mid115_fu_648_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U12(
    .din0(tmp5_fu_669_p0),
    .din1(hi),
    .dout(tmp5_fu_669_p2)
);

mul_v2_mul_2s_6s_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
mul_2s_6s_6_1_1_U13(
    .din0(trunc_ln44_1_fu_674_p1),
    .din1(ci_cast),
    .dout(mul_ln44_1_fu_681_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U14(
    .din0(tmp6_fu_723_p0),
    .din1(wi),
    .dout(tmp6_fu_723_p2)
);

mul_v2_mul_5s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_5s_32s_32_1_1_U15(
    .din0(mul_ln44_2_fu_824_p0),
    .din1(gmem_addr_read_reg_1143),
    .dout(mul_ln44_2_fu_824_p2)
);

mul_v2_ama_addmuladd_6ns_3ns_6s_3ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
ama_addmuladd_6ns_3ns_6s_3ns_6_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_16_fu_569_p2),
    .din1(grp_fu_851_p1),
    .din2(trunc_ln40_1),
    .din3(grp_fu_851_p3),
    .ce(grp_fu_851_ce),
    .dout(grp_fu_851_p4)
);

mul_v2_mac_muladd_3ns_6s_3ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mac_muladd_3ns_6s_3ns_6_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_861_p0),
    .din1(trunc_ln40_1),
    .din2(grp_fu_861_p2),
    .ce(grp_fu_861_ce),
    .dout(grp_fu_861_p3)
);

mul_v2_ama_addmuladd_6ns_3ns_6s_3ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
ama_addmuladd_6ns_3ns_6s_3ns_6_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_mid1_fu_605_p2),
    .din1(grp_fu_869_p1),
    .din2(trunc_ln40_1),
    .din3(grp_fu_869_p3),
    .ce(grp_fu_869_ce),
    .dout(grp_fu_869_p4)
);

mul_v2_ama_addmuladd_6s_6ns_6s_6ns_6_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .dout_WIDTH( 6 ))
ama_addmuladd_6s_6ns_6s_6ns_6_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_ln44_1_fu_681_p2),
    .din1(grp_fu_879_p1),
    .din2(trunc_ln),
    .din3(empty_23_reg_1122),
    .ce(grp_fu_879_ce),
    .dout(grp_fu_879_p4)
);

mul_v2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter18_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter11_stage0)) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln40_fu_322_p2 == 1'd0))) begin
            indvar_flatten35_fu_148 <= select_ln41_4_fu_459_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten35_fu_148 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln40_fu_322_p2 == 1'd0))) begin
            indvar_flatten79_fu_156 <= add_ln40_fu_328_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten79_fu_156 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln40_fu_322_p2 == 1'd0))) begin
            indvar_flatten_fu_140 <= select_ln42_1_fu_445_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_140 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln40_fu_322_p2 == 1'd0))) begin
            j_fu_132 <= j_1_fu_433_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_132 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_addr_reg_fu_124 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
            reuse_addr_reg_fu_124 <= p_cast11_mid2_cast_fu_802_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_128 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter19 == 1'b1)) begin
            reuse_reg_fu_128 <= add_ln44_4_fu_839_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tx_fu_152 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln40_reg_1017_pp0_iter9_reg == 1'd0))) begin
            tx_fu_152 <= select_ln40_1_fu_699_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ty_fu_144 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln40_reg_1017_pp0_iter7_reg == 1'd0))) begin
            ty_fu_144 <= select_ln41_1_fu_591_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tz_fu_136 <= 2'd0;
        end else if (((icmp_ln40_reg_1017_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            tz_fu_136 <= select_ln42_fu_537_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_1_reg_1111 <= add_ln40_1_fu_693_p2;
        empty_23_reg_1122 <= empty_23_fu_714_p1;
        gmem_addr_reg_1127 <= sext_ln44_1_fu_766_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln41_reg_1076 <= add_ln41_fu_581_p2;
        mul_ln44_reg_1086 <= mul_ln44_fu_610_p2;
        srem_ln44_1_reg_1091 <= grp_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln42_reg_1060 <= add_ln42_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln42_reg_1060_pp0_iter4_reg <= add_ln42_reg_1060;
        add_ln42_reg_1060_pp0_iter5_reg <= add_ln42_reg_1060_pp0_iter4_reg;
        add_ln42_reg_1060_pp0_iter6_reg <= add_ln42_reg_1060_pp0_iter5_reg;
        add_ln42_reg_1060_pp0_iter7_reg <= add_ln42_reg_1060_pp0_iter6_reg;
        add_ln44_3_reg_1138_pp0_iter13_reg <= add_ln44_3_reg_1138;
        add_ln44_3_reg_1138_pp0_iter14_reg <= add_ln44_3_reg_1138_pp0_iter13_reg;
        add_ln44_3_reg_1138_pp0_iter15_reg <= add_ln44_3_reg_1138_pp0_iter14_reg;
        add_ln44_3_reg_1138_pp0_iter16_reg <= add_ln44_3_reg_1138_pp0_iter15_reg;
        add_ln44_3_reg_1138_pp0_iter17_reg <= add_ln44_3_reg_1138_pp0_iter16_reg;
        addr_cmp_reg_1159 <= addr_cmp_fu_813_p2;
        and_ln40_1_reg_1029_pp0_iter10_reg <= and_ln40_1_reg_1029_pp0_iter9_reg;
        and_ln40_1_reg_1029_pp0_iter2_reg <= and_ln40_1_reg_1029_pp0_iter1_reg;
        and_ln40_1_reg_1029_pp0_iter3_reg <= and_ln40_1_reg_1029_pp0_iter2_reg;
        and_ln40_1_reg_1029_pp0_iter4_reg <= and_ln40_1_reg_1029_pp0_iter3_reg;
        and_ln40_1_reg_1029_pp0_iter5_reg <= and_ln40_1_reg_1029_pp0_iter4_reg;
        and_ln40_1_reg_1029_pp0_iter6_reg <= and_ln40_1_reg_1029_pp0_iter5_reg;
        and_ln40_1_reg_1029_pp0_iter7_reg <= and_ln40_1_reg_1029_pp0_iter6_reg;
        and_ln40_1_reg_1029_pp0_iter8_reg <= and_ln40_1_reg_1029_pp0_iter7_reg;
        and_ln40_1_reg_1029_pp0_iter9_reg <= and_ln40_1_reg_1029_pp0_iter8_reg;
        and_ln41_reg_1042_pp0_iter10_reg <= and_ln41_reg_1042_pp0_iter9_reg;
        and_ln41_reg_1042_pp0_iter2_reg <= and_ln41_reg_1042_pp0_iter1_reg;
        and_ln41_reg_1042_pp0_iter3_reg <= and_ln41_reg_1042_pp0_iter2_reg;
        and_ln41_reg_1042_pp0_iter4_reg <= and_ln41_reg_1042_pp0_iter3_reg;
        and_ln41_reg_1042_pp0_iter5_reg <= and_ln41_reg_1042_pp0_iter4_reg;
        and_ln41_reg_1042_pp0_iter6_reg <= and_ln41_reg_1042_pp0_iter5_reg;
        and_ln41_reg_1042_pp0_iter7_reg <= and_ln41_reg_1042_pp0_iter6_reg;
        and_ln41_reg_1042_pp0_iter8_reg <= and_ln41_reg_1042_pp0_iter7_reg;
        and_ln41_reg_1042_pp0_iter9_reg <= and_ln41_reg_1042_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_addr_read_reg_1143 <= m_axi_gmem_RDATA;
        icmp_ln40_reg_1017_pp0_iter10_reg <= icmp_ln40_reg_1017_pp0_iter9_reg;
        icmp_ln40_reg_1017_pp0_iter2_reg <= icmp_ln40_reg_1017_pp0_iter1_reg;
        icmp_ln40_reg_1017_pp0_iter3_reg <= icmp_ln40_reg_1017_pp0_iter2_reg;
        icmp_ln40_reg_1017_pp0_iter4_reg <= icmp_ln40_reg_1017_pp0_iter3_reg;
        icmp_ln40_reg_1017_pp0_iter5_reg <= icmp_ln40_reg_1017_pp0_iter4_reg;
        icmp_ln40_reg_1017_pp0_iter6_reg <= icmp_ln40_reg_1017_pp0_iter5_reg;
        icmp_ln40_reg_1017_pp0_iter7_reg <= icmp_ln40_reg_1017_pp0_iter6_reg;
        icmp_ln40_reg_1017_pp0_iter8_reg <= icmp_ln40_reg_1017_pp0_iter7_reg;
        icmp_ln40_reg_1017_pp0_iter9_reg <= icmp_ln40_reg_1017_pp0_iter8_reg;
        icmp_ln41_reg_1021_pp0_iter10_reg <= icmp_ln41_reg_1021_pp0_iter9_reg;
        icmp_ln41_reg_1021_pp0_iter2_reg <= icmp_ln41_reg_1021_pp0_iter1_reg;
        icmp_ln41_reg_1021_pp0_iter3_reg <= icmp_ln41_reg_1021_pp0_iter2_reg;
        icmp_ln41_reg_1021_pp0_iter4_reg <= icmp_ln41_reg_1021_pp0_iter3_reg;
        icmp_ln41_reg_1021_pp0_iter5_reg <= icmp_ln41_reg_1021_pp0_iter4_reg;
        icmp_ln41_reg_1021_pp0_iter6_reg <= icmp_ln41_reg_1021_pp0_iter5_reg;
        icmp_ln41_reg_1021_pp0_iter7_reg <= icmp_ln41_reg_1021_pp0_iter6_reg;
        icmp_ln41_reg_1021_pp0_iter8_reg <= icmp_ln41_reg_1021_pp0_iter7_reg;
        icmp_ln41_reg_1021_pp0_iter9_reg <= icmp_ln41_reg_1021_pp0_iter8_reg;
        or_ln41_reg_1036_pp0_iter2_reg <= or_ln41_reg_1036_pp0_iter1_reg;
        p_cast11_mid2_reg_1133_pp0_iter12_reg <= p_cast11_mid2_reg_1133;
        p_cast11_mid2_reg_1133_pp0_iter13_reg <= p_cast11_mid2_reg_1133_pp0_iter12_reg;
        p_cast11_mid2_reg_1133_pp0_iter14_reg <= p_cast11_mid2_reg_1133_pp0_iter13_reg;
        p_cast11_mid2_reg_1133_pp0_iter15_reg <= p_cast11_mid2_reg_1133_pp0_iter14_reg;
        p_cast11_mid2_reg_1133_pp0_iter16_reg <= p_cast11_mid2_reg_1133_pp0_iter15_reg;
        p_cast11_mid2_reg_1133_pp0_iter17_reg <= p_cast11_mid2_reg_1133_pp0_iter16_reg;
        ty_1_reg_1071 <= ty_fu_144;
        tz_1_reg_1055 <= tz_fu_136;
        tz_1_reg_1055_pp0_iter4_reg <= tz_1_reg_1055;
        tz_1_reg_1055_pp0_iter5_reg <= tz_1_reg_1055_pp0_iter4_reg;
        tz_1_reg_1055_pp0_iter6_reg <= tz_1_reg_1055_pp0_iter5_reg;
        tz_1_reg_1055_pp0_iter7_reg <= tz_1_reg_1055_pp0_iter6_reg;
        value_addr_reg_1153 <= p_cast11_mid2_cast_fu_802_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln44_3_reg_1138 <= grp_fu_879_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln40_fu_322_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln40_1_reg_1029 <= and_ln40_1_fu_373_p2;
        and_ln41_reg_1042 <= and_ln41_fu_397_p2;
        icmp_ln41_reg_1021 <= icmp_ln41_fu_343_p2;
        j_cast_reg_1049[4 : 0] <= j_cast_fu_423_p1[4 : 0];
        or_ln41_reg_1036 <= or_ln41_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln40_1_reg_1029_pp0_iter1_reg <= and_ln40_1_reg_1029;
        and_ln41_reg_1042_pp0_iter1_reg <= and_ln41_reg_1042;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln40_reg_1017 <= icmp_ln40_fu_322_p2;
        icmp_ln40_reg_1017_pp0_iter1_reg <= icmp_ln40_reg_1017;
        icmp_ln41_reg_1021_pp0_iter1_reg <= icmp_ln41_reg_1021;
        or_ln41_reg_1036_pp0_iter1_reg <= or_ln41_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_reg_1017_pp0_iter10_reg == 1'd0))) begin
        p_cast11_mid2_reg_1133 <= p_cast11_mid2_fu_796_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_reg_1017_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln41_2_reg_1096 <= select_ln41_2_fu_653_p3;
        tmp5_reg_1101 <= tmp5_fu_669_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln40_fu_322_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln40_reg_1017_pp0_iter10_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter11_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter11_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter18_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten35_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten35_load = indvar_flatten35_fu_148;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten79_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten79_load = indvar_flatten79_fu_156;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_140;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_132;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln40_reg_1017_pp0_iter10_reg == 1'd0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_427_ce = 1'b1;
    end else begin
        grp_fu_427_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_487_ce = 1'b1;
    end else begin
        grp_fu_487_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_544_ce = 1'b1;
    end else begin
        grp_fu_544_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_549_ce = 1'b1;
    end else begin
        grp_fu_549_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_851_ce = 1'b1;
    end else begin
        grp_fu_851_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_861_ce = 1'b1;
    end else begin
        grp_fu_861_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_869_ce = 1'b1;
    end else begin
        grp_fu_869_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_879_ce = 1'b1;
    end else begin
        grp_fu_879_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln40_reg_1017_pp0_iter10_reg == 1'd0))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_v2_filter_ce0 = 1'b1;
    end else begin
        mul_v2_filter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_ce0 = 1'b1;
    end else begin
        value_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_ce1 = 1'b1;
    end else begin
        value_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_we0 = 1'b1;
    end else begin
        value_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln40_1_fu_693_p2 = (tx_fu_152 + 3'd1);

assign add_ln40_fu_328_p2 = (ap_sig_allocacmp_indvar_flatten79_load + 11'd1);

assign add_ln41_1_fu_453_p2 = (ap_sig_allocacmp_indvar_flatten35_load + 9'd1);

assign add_ln41_fu_581_p2 = (select_ln40_fu_574_p3 + 3'd1);

assign add_ln42_1_fu_439_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln42_fu_516_p2 = (select_ln41_fu_498_p3 + 2'd1);

assign add_ln44_1_fu_733_p2 = (add_ln44_fu_728_p2 + grp_fu_487_p2);

assign add_ln44_2_fu_751_p2 = ($signed(sext_ln44_fu_747_p1) + $signed(I));

assign add_ln44_4_fu_839_p2 = (reuse_select_fu_832_p3 + mul_ln44_2_fu_824_p2);

assign add_ln44_fu_728_p2 = (select_ln41_2_reg_1096 + tmp6_fu_723_p2);

assign addr_cmp_fu_813_p2 = ((reuse_addr_reg_fu_124 == p_cast11_mid2_cast_fu_802_p1) ? 1'b1 : 1'b0);

assign and_ln40_1_fu_373_p2 = (xor_ln40_fu_349_p2 & icmp_ln42_fu_367_p2);

assign and_ln40_fu_361_p2 = (xor_ln40_fu_349_p2 & icmp_ln43_fu_355_p2);

assign and_ln41_1_fu_510_p2 = (xor_ln41_1_fu_505_p2 & empty_18_fu_494_p1);

assign and_ln41_fu_397_p2 = (or_ln41_1_fu_391_p2 & and_ln40_fu_361_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((icmp_ln40_reg_1017_pp0_iter10_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter18 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_16_fu_569_p0 = empty_16_fu_569_p00;

assign empty_16_fu_569_p00 = tz_1_reg_1055_pp0_iter7_reg;

assign empty_18_fu_494_p1 = tz_fu_136[0:0];

assign empty_20_fu_403_p2 = (and_ln41_fu_397_p2 | and_ln40_1_fu_373_p2);

assign empty_21_fu_409_p2 = (icmp_ln41_fu_343_p2 | empty_20_fu_403_p2);

assign empty_22_fu_522_p1 = add_ln42_fu_516_p2[0:0];

assign empty_23_fu_714_p1 = grp_fu_487_p2[5:0];

assign grp_fu_427_p0 = grp_fu_427_p00;

assign grp_fu_427_p00 = j_mid2_fu_415_p3;

assign grp_fu_487_p0 = j_cast_reg_1049;

assign grp_fu_544_p0 = tz_cast8_cast_mid2_cast_fu_533_p1;

assign grp_fu_549_p0 = tz_cast8_cast_mid2_cast_fu_533_p1;

assign grp_fu_851_p1 = grp_fu_851_p10;

assign grp_fu_851_p10 = ty_fu_144;

assign grp_fu_851_p3 = grp_fu_851_p30;

assign grp_fu_851_p30 = tx_fu_152;

assign grp_fu_861_p0 = grp_fu_861_p00;

assign grp_fu_861_p00 = add_ln41_fu_581_p2;

assign grp_fu_861_p2 = zext_ln40_1_fu_706_p1;

assign grp_fu_869_p1 = grp_fu_869_p10;

assign grp_fu_869_p10 = select_ln41_1_fu_591_p3;

assign grp_fu_869_p3 = zext_ln40_1_fu_706_p1;

assign grp_fu_879_p1 = grp_fu_427_p2[5:0];

assign icmp_ln40_fu_322_p2 = ((ap_sig_allocacmp_indvar_flatten79_load == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_343_p2 = ((ap_sig_allocacmp_indvar_flatten35_load == 9'd180) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_367_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd36) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_355_p2 = ((ap_sig_allocacmp_j_load == 5'd18) ? 1'b1 : 1'b0);

assign j_1_fu_433_p2 = (j_mid2_fu_415_p3 + 5'd1);

assign j_cast_fu_423_p1 = j_mid2_fu_415_p3;

assign j_mid2_fu_415_p3 = ((empty_21_fu_409_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign m_axi_gmem_ARADDR = gmem_addr_reg_1127;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln44_2_fu_824_p0 = mul_v2_filter_q0;

assign mul_v2_filter_address0 = zext_ln44_fu_806_p1;

assign or_ln41_1_fu_391_p2 = (xor_ln41_fu_385_p2 | icmp_ln41_fu_343_p2);

assign or_ln41_fu_379_p2 = (icmp_ln41_fu_343_p2 | and_ln40_1_fu_373_p2);

assign p_cast11_mid2_cast_fu_802_p1 = p_cast11_mid2_reg_1133_pp0_iter17_reg;

assign p_cast11_mid2_fu_796_p1 = grp_fu_869_p4;

assign p_cast11_mid2_fu_796_p3 = ((and_ln41_reg_1042_pp0_iter10_reg[0:0] == 1'b1) ? p_cast11_mid2_fu_796_p1 : select_ln41_3_fu_790_p3);

assign p_mid1_fu_605_p0 = p_mid1_fu_605_p00;

assign p_mid1_fu_605_p00 = add_ln42_reg_1060_pp0_iter7_reg;

assign reuse_select_fu_832_p3 = ((addr_cmp_reg_1159[0:0] == 1'b1) ? reuse_reg_fu_128 : value_r_q1);

assign select_ln40_1_fu_699_p3 = ((icmp_ln41_reg_1021_pp0_iter9_reg[0:0] == 1'b1) ? add_ln40_1_fu_693_p2 : tx_fu_152);

assign select_ln40_2_fu_633_p3 = ((icmp_ln41_reg_1021_pp0_iter8_reg[0:0] == 1'b1) ? 32'd0 : empty_fu_628_p2);

assign select_ln40_3_fu_784_p2 = grp_fu_851_p4;

assign select_ln40_3_fu_784_p3 = ((icmp_ln41_reg_1021_pp0_iter10_reg[0:0] == 1'b1) ? zext_ln40_3_fu_781_p1 : select_ln40_3_fu_784_p2);

assign select_ln40_fu_574_p3 = ((icmp_ln41_reg_1021_pp0_iter7_reg[0:0] == 1'b1) ? 3'd0 : ty_fu_144);

assign select_ln41_1_fu_591_p3 = ((and_ln40_1_reg_1029_pp0_iter7_reg[0:0] == 1'b1) ? add_ln41_fu_581_p2 : select_ln40_fu_574_p3);

assign select_ln41_2_fu_653_p3 = ((and_ln40_1_reg_1029_pp0_iter8_reg[0:0] == 1'b1) ? p_mid115_fu_648_p2 : select_ln40_2_fu_633_p3);

assign select_ln41_3_fu_790_p1 = grp_fu_861_p3;

assign select_ln41_3_fu_790_p3 = ((and_ln40_1_reg_1029_pp0_iter10_reg[0:0] == 1'b1) ? select_ln41_3_fu_790_p1 : select_ln40_3_fu_784_p3);

assign select_ln41_4_fu_459_p3 = ((icmp_ln41_fu_343_p2[0:0] == 1'b1) ? 9'd1 : add_ln41_1_fu_453_p2);

assign select_ln41_fu_498_p3 = ((or_ln41_reg_1036_pp0_iter2_reg[0:0] == 1'b1) ? 2'd0 : tz_fu_136);

assign select_ln42_1_fu_445_p3 = ((or_ln41_fu_379_p2[0:0] == 1'b1) ? 7'd1 : add_ln42_1_fu_439_p2);

assign select_ln42_fu_537_p3 = ((and_ln41_reg_1042_pp0_iter2_reg[0:0] == 1'b1) ? add_ln42_fu_516_p2 : select_ln41_fu_498_p3);

assign sext_ln44_1_fu_766_p1 = $signed(trunc_ln2_fu_756_p4);

assign sext_ln44_fu_747_p1 = $signed(shl_ln_fu_739_p3);

assign shl_ln_fu_739_p3 = {{add_ln44_1_fu_733_p2}, {2'd0}};

assign tmp2_fu_623_p0 = tmp2_fu_623_p00;

assign tmp2_fu_623_p00 = ty_1_reg_1071;

assign tmp2_mid1_fu_643_p0 = tmp2_mid1_fu_643_p00;

assign tmp2_mid1_fu_643_p00 = add_ln41_reg_1076;

assign tmp5_fu_669_p0 = (grp_fu_427_p2 + mul_ln44_reg_1086);

assign tmp6_fu_723_p0 = (tmp5_reg_1101 + zext_ln40_2_fu_710_p1);

assign trunc_ln2_fu_756_p4 = {{add_ln44_2_fu_751_p2[63:2]}};

assign trunc_ln44_1_fu_674_p1 = srem_ln44_1_reg_1091[1:0];

assign tz_cast8_cast_mid2_cast_fu_533_p1 = tz_cast8_cast_mid2_fu_526_p3;

assign tz_cast8_cast_mid2_fu_526_p3 = ((and_ln41_reg_1042_pp0_iter2_reg[0:0] == 1'b1) ? empty_22_fu_522_p1 : and_ln41_1_fu_510_p2);

assign value_r_address0 = value_addr_reg_1153;

assign value_r_address1 = p_cast11_mid2_cast_fu_802_p1;

assign value_r_d0 = (reuse_select_fu_832_p3 + mul_ln44_2_fu_824_p2);

assign xor_ln40_fu_349_p2 = (icmp_ln41_fu_343_p2 ^ 1'd1);

assign xor_ln41_1_fu_505_p2 = (or_ln41_reg_1036_pp0_iter2_reg ^ 1'd1);

assign xor_ln41_fu_385_p2 = (icmp_ln42_fu_367_p2 ^ 1'd1);

assign zext_ln40_1_fu_706_p1 = select_ln40_1_fu_699_p3;

assign zext_ln40_2_fu_710_p1 = select_ln40_1_fu_699_p3;

assign zext_ln40_3_fu_781_p1 = add_ln40_1_reg_1111;

assign zext_ln44_fu_806_p1 = $unsigned(add_ln44_3_reg_1138_pp0_iter17_reg);

always @ (posedge ap_clk) begin
    j_cast_reg_1049[31:5] <= 27'b000000000000000000000000000;
end

endmodule //mul_v2_mul_v2_Pipeline_VITIS_LOOP_40_1_VITIS_LOOP_42_3_VITIS_LOOP_43_4
