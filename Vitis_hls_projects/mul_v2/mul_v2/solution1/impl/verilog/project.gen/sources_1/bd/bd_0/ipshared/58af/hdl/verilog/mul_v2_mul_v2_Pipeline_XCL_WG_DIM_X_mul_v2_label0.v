// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        bound,
        mul_ln32_4,
        mul,
        mul8_mid2,
        hi,
        global_id_base_x,
        wi,
        mul16,
        I,
        mul_ln32_6_mid2,
        shiftreg_out,
        shiftreg_out_ap_vld,
        value_out,
        value_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [34:0] bound;
input  [31:0] mul_ln32_4;
input  [31:0] mul;
input  [31:0] mul8_mid2;
input  [31:0] hi;
input  [31:0] global_id_base_x;
input  [31:0] wi;
input  [31:0] mul16;
input  [63:0] I;
input  [5:0] mul_ln32_6_mid2;
output  [191:0] shiftreg_out;
output   shiftreg_out_ap_vld;
output  [31:0] value_out;
output   value_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg shiftreg_out_ap_vld;
reg value_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
reg   [0:0] icmp_ln72_reg_561;
reg   [0:0] icmp_ln72_reg_561_pp0_iter37_reg;
reg    ap_block_state39_io;
wire    ap_block_state40_pp0_stage0_iter39;
wire    ap_block_state41_pp0_stage0_iter40;
wire    ap_block_state42_pp0_stage0_iter41;
wire    ap_block_state43_pp0_stage0_iter42;
wire    ap_block_state44_pp0_stage0_iter43;
wire    ap_block_state45_pp0_stage0_iter44;
reg   [0:0] icmp_ln72_reg_561_pp0_iter44_reg;
reg    ap_block_state46_pp0_stage0_iter45;
wire    ap_block_state47_pp0_stage0_iter46;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln72_fu_247_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] mul_v2_filter_address0;
reg    mul_v2_filter_ce0;
wire   [31:0] mul_v2_filter_q0;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln72_reg_561_pp0_iter2_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter3_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter4_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter5_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter6_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter7_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter8_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter9_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter10_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter11_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter12_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter13_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter14_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter15_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter16_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter17_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter18_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter19_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter20_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter21_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter22_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter23_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter24_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter25_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter26_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter27_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter28_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter29_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter30_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter31_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter32_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter33_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter34_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter35_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter36_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter38_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter39_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter40_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter41_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter42_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter43_reg;
reg   [0:0] icmp_ln72_reg_561_pp0_iter45_reg;
wire   [0:0] icmp_ln64_fu_261_p2;
reg   [0:0] icmp_ln64_reg_565;
reg   [0:0] icmp_ln64_reg_565_pp0_iter2_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter3_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter4_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter5_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter6_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter7_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter8_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter9_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter10_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter11_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter12_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter13_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter14_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter15_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter16_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter17_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter18_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter19_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter20_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter21_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter22_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter23_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter24_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter25_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter26_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter27_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter28_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter29_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter30_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter31_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter32_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter33_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter34_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter35_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter36_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter37_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter38_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter39_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter40_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter41_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter42_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter43_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter44_reg;
reg   [0:0] icmp_ln64_reg_565_pp0_iter45_reg;
wire   [31:0] select_ln72_fu_266_p3;
wire   [5:0] add_ln68_fu_288_p2;
reg   [5:0] add_ln68_reg_578;
reg   [5:0] add_ln68_reg_578_pp0_iter2_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter3_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter4_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter5_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter6_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter7_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter8_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter9_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter10_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter11_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter12_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter13_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter14_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter15_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter16_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter17_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter18_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter19_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter20_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter21_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter22_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter23_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter24_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter25_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter26_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter27_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter28_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter29_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter30_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter31_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter32_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter33_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter34_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter35_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter36_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter37_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter38_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter39_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter40_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter41_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter42_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter43_reg;
reg   [5:0] add_ln68_reg_578_pp0_iter44_reg;
wire   [31:0] grp_fu_279_p2;
reg   [31:0] urem_ln67_reg_583;
wire  signed [31:0] tmp2_fu_344_p2;
reg  signed [31:0] tmp2_reg_588;
reg   [63:0] gmem_addr_reg_593;
reg  signed [31:0] i_reg_599;
wire   [63:0] zext_ln68_fu_406_p1;
wire  signed [63:0] sext_ln67_fu_396_p1;
reg   [31:0] value_fu_100;
wire   [31:0] value_1_fu_454_p2;
wire    ap_loop_init;
reg   [31:0] j_fu_104;
wire   [31:0] j_1_fu_293_p2;
reg   [191:0] shiftreg_fu_108;
wire   [191:0] select_ln72_3_fu_442_p3;
reg   [2:0] phi_ln32_fu_112;
wire   [2:0] select_ln72_2_fu_318_p3;
reg   [34:0] indvar_flatten_fu_116;
wire   [34:0] add_ln72_fu_252_p2;
reg    ap_block_pp0_stage0_01001;
wire   [5:0] empty_33_fu_284_p1;
wire   [2:0] add_ln72_1_fu_312_p2;
wire   [31:0] grp_fu_274_p2;
wire  signed [31:0] tmp4_fu_334_p0;
wire   [31:0] tmp4_fu_334_p2;
wire   [31:0] tmp9_fu_339_p2;
wire   [31:0] zext_ln72_fu_325_p1;
wire   [31:0] tmp5_fu_355_p2;
wire   [31:0] add_ln67_fu_359_p2;
wire   [31:0] add_ln67_1_fu_364_p2;
wire   [33:0] shl_ln_fu_369_p3;
wire   [63:0] zext_ln67_fu_377_p1;
wire   [63:0] add_ln67_2_fu_381_p2;
wire   [61:0] trunc_ln1_fu_386_p4;
wire   [159:0] lshr_ln71_dup_fu_414_p4;
wire   [191:0] or_ln71_dup_fu_434_p3;
wire  signed [4:0] mul_ln69_fu_449_p0;
wire   [31:0] mul_ln69_fu_449_p2;
wire   [31:0] select_ln72_1_fu_427_p3;
reg    grp_fu_274_ce;
reg    grp_fu_279_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg    ap_loop_exit_ready_pp0_iter39_reg;
reg    ap_loop_exit_ready_pp0_iter40_reg;
reg    ap_loop_exit_ready_pp0_iter41_reg;
reg    ap_loop_exit_ready_pp0_iter42_reg;
reg    ap_loop_exit_ready_pp0_iter43_reg;
reg    ap_loop_exit_ready_pp0_iter44_reg;
reg    ap_loop_exit_ready_pp0_iter45_reg;
reg    ap_loop_exit_ready_pp0_iter46_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label0_mul_v2_filter #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
mul_v2_filter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul_v2_filter_address0),
    .ce0(mul_v2_filter_ce0),
    .q0(mul_v2_filter_q0)
);

mul_v2_udiv_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32ns_32_36_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln72_fu_266_p3),
    .din1(mul),
    .ce(grp_fu_274_ce),
    .dout(grp_fu_274_p2)
);

mul_v2_urem_32ns_32ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
urem_32ns_32ns_32_36_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln72_fu_266_p3),
    .din1(mul),
    .ce(grp_fu_279_ce),
    .dout(grp_fu_279_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3(
    .din0(tmp4_fu_334_p0),
    .din1(hi),
    .dout(tmp4_fu_334_p2)
);

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U4(
    .din0(tmp2_reg_588),
    .din1(wi),
    .dout(tmp5_fu_355_p2)
);

mul_v2_mul_5s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_5s_32s_32_1_1_U5(
    .din0(mul_ln69_fu_449_p0),
    .din1(i_reg_599),
    .dout(mul_ln69_fu_449_p2)
);

mul_v2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter46_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter45_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter46_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_116 <= 35'd0;
        end else if (((icmp_ln72_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_116 <= add_ln72_fu_252_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_104 <= 32'd0;
        end else if (((icmp_ln72_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_104 <= j_1_fu_293_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_ln32_fu_112 <= 3'd0;
        end else if (((icmp_ln72_reg_561_pp0_iter35_reg == 1'd0) & (ap_enable_reg_pp0_iter36 == 1'b1))) begin
            phi_ln32_fu_112 <= select_ln72_2_fu_318_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg_fu_108 <= 192'd0;
        end else if (((icmp_ln72_reg_561_pp0_iter45_reg == 1'd0) & (ap_enable_reg_pp0_iter46 == 1'b1))) begin
            shiftreg_fu_108 <= select_ln72_3_fu_442_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            value_fu_100 <= 32'd0;
        end else if (((icmp_ln72_reg_561_pp0_iter45_reg == 1'd0) & (ap_enable_reg_pp0_iter46 == 1'b1))) begin
            value_fu_100 <= value_1_fu_454_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_fu_247_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln68_reg_578 <= add_ln68_fu_288_p2;
        icmp_ln64_reg_565 <= icmp_ln64_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln68_reg_578_pp0_iter10_reg <= add_ln68_reg_578_pp0_iter9_reg;
        add_ln68_reg_578_pp0_iter11_reg <= add_ln68_reg_578_pp0_iter10_reg;
        add_ln68_reg_578_pp0_iter12_reg <= add_ln68_reg_578_pp0_iter11_reg;
        add_ln68_reg_578_pp0_iter13_reg <= add_ln68_reg_578_pp0_iter12_reg;
        add_ln68_reg_578_pp0_iter14_reg <= add_ln68_reg_578_pp0_iter13_reg;
        add_ln68_reg_578_pp0_iter15_reg <= add_ln68_reg_578_pp0_iter14_reg;
        add_ln68_reg_578_pp0_iter16_reg <= add_ln68_reg_578_pp0_iter15_reg;
        add_ln68_reg_578_pp0_iter17_reg <= add_ln68_reg_578_pp0_iter16_reg;
        add_ln68_reg_578_pp0_iter18_reg <= add_ln68_reg_578_pp0_iter17_reg;
        add_ln68_reg_578_pp0_iter19_reg <= add_ln68_reg_578_pp0_iter18_reg;
        add_ln68_reg_578_pp0_iter20_reg <= add_ln68_reg_578_pp0_iter19_reg;
        add_ln68_reg_578_pp0_iter21_reg <= add_ln68_reg_578_pp0_iter20_reg;
        add_ln68_reg_578_pp0_iter22_reg <= add_ln68_reg_578_pp0_iter21_reg;
        add_ln68_reg_578_pp0_iter23_reg <= add_ln68_reg_578_pp0_iter22_reg;
        add_ln68_reg_578_pp0_iter24_reg <= add_ln68_reg_578_pp0_iter23_reg;
        add_ln68_reg_578_pp0_iter25_reg <= add_ln68_reg_578_pp0_iter24_reg;
        add_ln68_reg_578_pp0_iter26_reg <= add_ln68_reg_578_pp0_iter25_reg;
        add_ln68_reg_578_pp0_iter27_reg <= add_ln68_reg_578_pp0_iter26_reg;
        add_ln68_reg_578_pp0_iter28_reg <= add_ln68_reg_578_pp0_iter27_reg;
        add_ln68_reg_578_pp0_iter29_reg <= add_ln68_reg_578_pp0_iter28_reg;
        add_ln68_reg_578_pp0_iter2_reg <= add_ln68_reg_578;
        add_ln68_reg_578_pp0_iter30_reg <= add_ln68_reg_578_pp0_iter29_reg;
        add_ln68_reg_578_pp0_iter31_reg <= add_ln68_reg_578_pp0_iter30_reg;
        add_ln68_reg_578_pp0_iter32_reg <= add_ln68_reg_578_pp0_iter31_reg;
        add_ln68_reg_578_pp0_iter33_reg <= add_ln68_reg_578_pp0_iter32_reg;
        add_ln68_reg_578_pp0_iter34_reg <= add_ln68_reg_578_pp0_iter33_reg;
        add_ln68_reg_578_pp0_iter35_reg <= add_ln68_reg_578_pp0_iter34_reg;
        add_ln68_reg_578_pp0_iter36_reg <= add_ln68_reg_578_pp0_iter35_reg;
        add_ln68_reg_578_pp0_iter37_reg <= add_ln68_reg_578_pp0_iter36_reg;
        add_ln68_reg_578_pp0_iter38_reg <= add_ln68_reg_578_pp0_iter37_reg;
        add_ln68_reg_578_pp0_iter39_reg <= add_ln68_reg_578_pp0_iter38_reg;
        add_ln68_reg_578_pp0_iter3_reg <= add_ln68_reg_578_pp0_iter2_reg;
        add_ln68_reg_578_pp0_iter40_reg <= add_ln68_reg_578_pp0_iter39_reg;
        add_ln68_reg_578_pp0_iter41_reg <= add_ln68_reg_578_pp0_iter40_reg;
        add_ln68_reg_578_pp0_iter42_reg <= add_ln68_reg_578_pp0_iter41_reg;
        add_ln68_reg_578_pp0_iter43_reg <= add_ln68_reg_578_pp0_iter42_reg;
        add_ln68_reg_578_pp0_iter44_reg <= add_ln68_reg_578_pp0_iter43_reg;
        add_ln68_reg_578_pp0_iter4_reg <= add_ln68_reg_578_pp0_iter3_reg;
        add_ln68_reg_578_pp0_iter5_reg <= add_ln68_reg_578_pp0_iter4_reg;
        add_ln68_reg_578_pp0_iter6_reg <= add_ln68_reg_578_pp0_iter5_reg;
        add_ln68_reg_578_pp0_iter7_reg <= add_ln68_reg_578_pp0_iter6_reg;
        add_ln68_reg_578_pp0_iter8_reg <= add_ln68_reg_578_pp0_iter7_reg;
        add_ln68_reg_578_pp0_iter9_reg <= add_ln68_reg_578_pp0_iter8_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
        ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
        ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
        ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
        ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
        ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln64_reg_565_pp0_iter10_reg <= icmp_ln64_reg_565_pp0_iter9_reg;
        icmp_ln64_reg_565_pp0_iter11_reg <= icmp_ln64_reg_565_pp0_iter10_reg;
        icmp_ln64_reg_565_pp0_iter12_reg <= icmp_ln64_reg_565_pp0_iter11_reg;
        icmp_ln64_reg_565_pp0_iter13_reg <= icmp_ln64_reg_565_pp0_iter12_reg;
        icmp_ln64_reg_565_pp0_iter14_reg <= icmp_ln64_reg_565_pp0_iter13_reg;
        icmp_ln64_reg_565_pp0_iter15_reg <= icmp_ln64_reg_565_pp0_iter14_reg;
        icmp_ln64_reg_565_pp0_iter16_reg <= icmp_ln64_reg_565_pp0_iter15_reg;
        icmp_ln64_reg_565_pp0_iter17_reg <= icmp_ln64_reg_565_pp0_iter16_reg;
        icmp_ln64_reg_565_pp0_iter18_reg <= icmp_ln64_reg_565_pp0_iter17_reg;
        icmp_ln64_reg_565_pp0_iter19_reg <= icmp_ln64_reg_565_pp0_iter18_reg;
        icmp_ln64_reg_565_pp0_iter20_reg <= icmp_ln64_reg_565_pp0_iter19_reg;
        icmp_ln64_reg_565_pp0_iter21_reg <= icmp_ln64_reg_565_pp0_iter20_reg;
        icmp_ln64_reg_565_pp0_iter22_reg <= icmp_ln64_reg_565_pp0_iter21_reg;
        icmp_ln64_reg_565_pp0_iter23_reg <= icmp_ln64_reg_565_pp0_iter22_reg;
        icmp_ln64_reg_565_pp0_iter24_reg <= icmp_ln64_reg_565_pp0_iter23_reg;
        icmp_ln64_reg_565_pp0_iter25_reg <= icmp_ln64_reg_565_pp0_iter24_reg;
        icmp_ln64_reg_565_pp0_iter26_reg <= icmp_ln64_reg_565_pp0_iter25_reg;
        icmp_ln64_reg_565_pp0_iter27_reg <= icmp_ln64_reg_565_pp0_iter26_reg;
        icmp_ln64_reg_565_pp0_iter28_reg <= icmp_ln64_reg_565_pp0_iter27_reg;
        icmp_ln64_reg_565_pp0_iter29_reg <= icmp_ln64_reg_565_pp0_iter28_reg;
        icmp_ln64_reg_565_pp0_iter2_reg <= icmp_ln64_reg_565;
        icmp_ln64_reg_565_pp0_iter30_reg <= icmp_ln64_reg_565_pp0_iter29_reg;
        icmp_ln64_reg_565_pp0_iter31_reg <= icmp_ln64_reg_565_pp0_iter30_reg;
        icmp_ln64_reg_565_pp0_iter32_reg <= icmp_ln64_reg_565_pp0_iter31_reg;
        icmp_ln64_reg_565_pp0_iter33_reg <= icmp_ln64_reg_565_pp0_iter32_reg;
        icmp_ln64_reg_565_pp0_iter34_reg <= icmp_ln64_reg_565_pp0_iter33_reg;
        icmp_ln64_reg_565_pp0_iter35_reg <= icmp_ln64_reg_565_pp0_iter34_reg;
        icmp_ln64_reg_565_pp0_iter36_reg <= icmp_ln64_reg_565_pp0_iter35_reg;
        icmp_ln64_reg_565_pp0_iter37_reg <= icmp_ln64_reg_565_pp0_iter36_reg;
        icmp_ln64_reg_565_pp0_iter38_reg <= icmp_ln64_reg_565_pp0_iter37_reg;
        icmp_ln64_reg_565_pp0_iter39_reg <= icmp_ln64_reg_565_pp0_iter38_reg;
        icmp_ln64_reg_565_pp0_iter3_reg <= icmp_ln64_reg_565_pp0_iter2_reg;
        icmp_ln64_reg_565_pp0_iter40_reg <= icmp_ln64_reg_565_pp0_iter39_reg;
        icmp_ln64_reg_565_pp0_iter41_reg <= icmp_ln64_reg_565_pp0_iter40_reg;
        icmp_ln64_reg_565_pp0_iter42_reg <= icmp_ln64_reg_565_pp0_iter41_reg;
        icmp_ln64_reg_565_pp0_iter43_reg <= icmp_ln64_reg_565_pp0_iter42_reg;
        icmp_ln64_reg_565_pp0_iter44_reg <= icmp_ln64_reg_565_pp0_iter43_reg;
        icmp_ln64_reg_565_pp0_iter45_reg <= icmp_ln64_reg_565_pp0_iter44_reg;
        icmp_ln64_reg_565_pp0_iter4_reg <= icmp_ln64_reg_565_pp0_iter3_reg;
        icmp_ln64_reg_565_pp0_iter5_reg <= icmp_ln64_reg_565_pp0_iter4_reg;
        icmp_ln64_reg_565_pp0_iter6_reg <= icmp_ln64_reg_565_pp0_iter5_reg;
        icmp_ln64_reg_565_pp0_iter7_reg <= icmp_ln64_reg_565_pp0_iter6_reg;
        icmp_ln64_reg_565_pp0_iter8_reg <= icmp_ln64_reg_565_pp0_iter7_reg;
        icmp_ln64_reg_565_pp0_iter9_reg <= icmp_ln64_reg_565_pp0_iter8_reg;
        icmp_ln72_reg_561_pp0_iter10_reg <= icmp_ln72_reg_561_pp0_iter9_reg;
        icmp_ln72_reg_561_pp0_iter11_reg <= icmp_ln72_reg_561_pp0_iter10_reg;
        icmp_ln72_reg_561_pp0_iter12_reg <= icmp_ln72_reg_561_pp0_iter11_reg;
        icmp_ln72_reg_561_pp0_iter13_reg <= icmp_ln72_reg_561_pp0_iter12_reg;
        icmp_ln72_reg_561_pp0_iter14_reg <= icmp_ln72_reg_561_pp0_iter13_reg;
        icmp_ln72_reg_561_pp0_iter15_reg <= icmp_ln72_reg_561_pp0_iter14_reg;
        icmp_ln72_reg_561_pp0_iter16_reg <= icmp_ln72_reg_561_pp0_iter15_reg;
        icmp_ln72_reg_561_pp0_iter17_reg <= icmp_ln72_reg_561_pp0_iter16_reg;
        icmp_ln72_reg_561_pp0_iter18_reg <= icmp_ln72_reg_561_pp0_iter17_reg;
        icmp_ln72_reg_561_pp0_iter19_reg <= icmp_ln72_reg_561_pp0_iter18_reg;
        icmp_ln72_reg_561_pp0_iter20_reg <= icmp_ln72_reg_561_pp0_iter19_reg;
        icmp_ln72_reg_561_pp0_iter21_reg <= icmp_ln72_reg_561_pp0_iter20_reg;
        icmp_ln72_reg_561_pp0_iter22_reg <= icmp_ln72_reg_561_pp0_iter21_reg;
        icmp_ln72_reg_561_pp0_iter23_reg <= icmp_ln72_reg_561_pp0_iter22_reg;
        icmp_ln72_reg_561_pp0_iter24_reg <= icmp_ln72_reg_561_pp0_iter23_reg;
        icmp_ln72_reg_561_pp0_iter25_reg <= icmp_ln72_reg_561_pp0_iter24_reg;
        icmp_ln72_reg_561_pp0_iter26_reg <= icmp_ln72_reg_561_pp0_iter25_reg;
        icmp_ln72_reg_561_pp0_iter27_reg <= icmp_ln72_reg_561_pp0_iter26_reg;
        icmp_ln72_reg_561_pp0_iter28_reg <= icmp_ln72_reg_561_pp0_iter27_reg;
        icmp_ln72_reg_561_pp0_iter29_reg <= icmp_ln72_reg_561_pp0_iter28_reg;
        icmp_ln72_reg_561_pp0_iter2_reg <= icmp_ln72_reg_561;
        icmp_ln72_reg_561_pp0_iter30_reg <= icmp_ln72_reg_561_pp0_iter29_reg;
        icmp_ln72_reg_561_pp0_iter31_reg <= icmp_ln72_reg_561_pp0_iter30_reg;
        icmp_ln72_reg_561_pp0_iter32_reg <= icmp_ln72_reg_561_pp0_iter31_reg;
        icmp_ln72_reg_561_pp0_iter33_reg <= icmp_ln72_reg_561_pp0_iter32_reg;
        icmp_ln72_reg_561_pp0_iter34_reg <= icmp_ln72_reg_561_pp0_iter33_reg;
        icmp_ln72_reg_561_pp0_iter35_reg <= icmp_ln72_reg_561_pp0_iter34_reg;
        icmp_ln72_reg_561_pp0_iter36_reg <= icmp_ln72_reg_561_pp0_iter35_reg;
        icmp_ln72_reg_561_pp0_iter37_reg <= icmp_ln72_reg_561_pp0_iter36_reg;
        icmp_ln72_reg_561_pp0_iter38_reg <= icmp_ln72_reg_561_pp0_iter37_reg;
        icmp_ln72_reg_561_pp0_iter39_reg <= icmp_ln72_reg_561_pp0_iter38_reg;
        icmp_ln72_reg_561_pp0_iter3_reg <= icmp_ln72_reg_561_pp0_iter2_reg;
        icmp_ln72_reg_561_pp0_iter40_reg <= icmp_ln72_reg_561_pp0_iter39_reg;
        icmp_ln72_reg_561_pp0_iter41_reg <= icmp_ln72_reg_561_pp0_iter40_reg;
        icmp_ln72_reg_561_pp0_iter42_reg <= icmp_ln72_reg_561_pp0_iter41_reg;
        icmp_ln72_reg_561_pp0_iter43_reg <= icmp_ln72_reg_561_pp0_iter42_reg;
        icmp_ln72_reg_561_pp0_iter44_reg <= icmp_ln72_reg_561_pp0_iter43_reg;
        icmp_ln72_reg_561_pp0_iter45_reg <= icmp_ln72_reg_561_pp0_iter44_reg;
        icmp_ln72_reg_561_pp0_iter4_reg <= icmp_ln72_reg_561_pp0_iter3_reg;
        icmp_ln72_reg_561_pp0_iter5_reg <= icmp_ln72_reg_561_pp0_iter4_reg;
        icmp_ln72_reg_561_pp0_iter6_reg <= icmp_ln72_reg_561_pp0_iter5_reg;
        icmp_ln72_reg_561_pp0_iter7_reg <= icmp_ln72_reg_561_pp0_iter6_reg;
        icmp_ln72_reg_561_pp0_iter8_reg <= icmp_ln72_reg_561_pp0_iter7_reg;
        icmp_ln72_reg_561_pp0_iter9_reg <= icmp_ln72_reg_561_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln72_reg_561 <= icmp_ln72_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_561_pp0_iter36_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_593 <= sext_ln67_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_561_pp0_iter44_reg == 1'd0))) begin
        i_reg_599 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln72_reg_561_pp0_iter35_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp2_reg_588 <= tmp2_fu_344_p2;
        urem_ln67_reg_583 <= grp_fu_279_p2;
    end
end

always @ (*) begin
    if (((icmp_ln72_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter46_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln72_reg_561_pp0_iter37_reg == 1'd0) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (ap_enable_reg_pp0_iter45 == 1'b1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_274_ce = 1'b1;
    end else begin
        grp_fu_274_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_279_ce = 1'b1;
    end else begin
        grp_fu_279_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_561_pp0_iter37_reg == 1'd0) & (ap_enable_reg_pp0_iter38 == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (ap_enable_reg_pp0_iter45 == 1'b1))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter45 == 1'b1))) begin
        mul_v2_filter_ce0 = 1'b1;
    end else begin
        mul_v2_filter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_561_pp0_iter45_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_out_ap_vld = 1'b1;
    end else begin
        shiftreg_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln72_reg_561_pp0_iter45_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_out_ap_vld = 1'b1;
    end else begin
        value_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_1_fu_364_p2 = (add_ln67_fu_359_p2 + urem_ln67_reg_583);

assign add_ln67_2_fu_381_p2 = (zext_ln67_fu_377_p1 + I);

assign add_ln67_fu_359_p2 = (tmp5_fu_355_p2 + mul16);

assign add_ln68_fu_288_p2 = (empty_33_fu_284_p1 + mul_ln32_6_mid2);

assign add_ln72_1_fu_312_p2 = (phi_ln32_fu_112 + 3'd1);

assign add_ln72_fu_252_p2 = (indvar_flatten_fu_116 + 35'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter38 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b1)) | ((1'b1 == ap_block_state39_io) & (ap_enable_reg_pp0_iter38 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_io = ((icmp_ln72_reg_561_pp0_iter37_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46_pp0_stage0_iter45 = ((icmp_ln72_reg_561_pp0_iter44_reg == 1'd0) & (m_axi_gmem_RVALID == 1'b0));
end

assign ap_block_state47_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_33_fu_284_p1 = select_ln72_fu_266_p3[5:0];

assign icmp_ln64_fu_261_p2 = ((j_fu_104 == mul_ln32_4) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_247_p2 = ((indvar_flatten_fu_116 == bound) ? 1'b1 : 1'b0);

assign j_1_fu_293_p2 = (select_ln72_fu_266_p3 + 32'd1);

assign lshr_ln71_dup_fu_414_p4 = {{shiftreg_fu_108[191:32]}};

assign m_axi_gmem_ARADDR = gmem_addr_reg_593;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln69_fu_449_p0 = mul_v2_filter_q0;

assign mul_v2_filter_address0 = zext_ln68_fu_406_p1;

assign or_ln71_dup_fu_434_p3 = {{value_fu_100}, {lshr_ln71_dup_fu_414_p4}};

assign select_ln72_1_fu_427_p3 = ((icmp_ln64_reg_565_pp0_iter45_reg[0:0] == 1'b1) ? 32'd0 : value_fu_100);

assign select_ln72_2_fu_318_p3 = ((icmp_ln64_reg_565_pp0_iter35_reg[0:0] == 1'b1) ? add_ln72_1_fu_312_p2 : phi_ln32_fu_112);

assign select_ln72_3_fu_442_p3 = ((icmp_ln64_reg_565_pp0_iter45_reg[0:0] == 1'b1) ? or_ln71_dup_fu_434_p3 : shiftreg_fu_108);

assign select_ln72_fu_266_p3 = ((icmp_ln64_fu_261_p2[0:0] == 1'b1) ? 32'd0 : j_fu_104);

assign sext_ln67_fu_396_p1 = $signed(trunc_ln1_fu_386_p4);

assign shiftreg_out = shiftreg_fu_108;

assign shl_ln_fu_369_p3 = {{add_ln67_1_fu_364_p2}, {2'd0}};

assign tmp2_fu_344_p2 = (tmp9_fu_339_p2 + zext_ln72_fu_325_p1);

assign tmp4_fu_334_p0 = (grp_fu_274_p2 + mul8_mid2);

assign tmp9_fu_339_p2 = (tmp4_fu_334_p2 + global_id_base_x);

assign trunc_ln1_fu_386_p4 = {{add_ln67_2_fu_381_p2[63:2]}};

assign value_1_fu_454_p2 = (mul_ln69_fu_449_p2 + select_ln72_1_fu_427_p3);

assign value_out = value_fu_100;

assign zext_ln67_fu_377_p1 = shl_ln_fu_369_p3;

assign zext_ln68_fu_406_p1 = add_ln68_reg_578_pp0_iter44_reg;

assign zext_ln72_fu_325_p1 = select_ln72_2_fu_318_p3;

endmodule //mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label0
