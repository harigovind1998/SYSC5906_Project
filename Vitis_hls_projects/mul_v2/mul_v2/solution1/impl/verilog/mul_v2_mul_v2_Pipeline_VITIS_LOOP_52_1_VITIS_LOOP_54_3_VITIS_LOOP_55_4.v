// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        I,
        value_r_address0,
        value_r_ce0,
        value_r_we0,
        value_r_d0,
        value_r_address1,
        value_r_ce1,
        value_r_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] I;
output  [5:0] value_r_address0;
output   value_r_ce0;
output   value_r_we0;
output  [31:0] value_r_d0;
output  [5:0] value_r_address1;
output   value_r_ce1;
input  [31:0] value_r_q1;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg value_r_ce0;
reg value_r_we0;
reg value_r_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_262_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] mul_v2_filter_address0;
reg    mul_v2_filter_ce0;
wire   [31:0] mul_v2_filter_q0;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln52_reg_1100;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter1_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter3_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter4_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter5_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter6_reg;
reg   [0:0] icmp_ln52_reg_1100_pp0_iter7_reg;
wire   [0:0] icmp_ln53_fu_283_p2;
reg   [0:0] icmp_ln53_reg_1104;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter1_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter2_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter3_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter4_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter5_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter6_reg;
reg   [0:0] icmp_ln53_reg_1104_pp0_iter7_reg;
wire   [0:0] and_ln52_1_fu_313_p2;
reg   [0:0] and_ln52_1_reg_1114;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter1_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter2_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter3_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter4_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter5_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter6_reg;
reg   [0:0] and_ln52_1_reg_1114_pp0_iter7_reg;
wire   [0:0] or_ln53_fu_319_p2;
reg   [0:0] or_ln53_reg_1122;
reg   [0:0] or_ln53_reg_1122_pp0_iter1_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter2_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter3_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter4_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter5_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter6_reg;
reg   [0:0] or_ln53_reg_1122_pp0_iter7_reg;
wire   [0:0] and_ln53_fu_337_p2;
reg   [0:0] and_ln53_reg_1129;
reg   [0:0] and_ln53_reg_1129_pp0_iter1_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter2_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter3_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter4_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter5_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter6_reg;
reg   [0:0] and_ln53_reg_1129_pp0_iter7_reg;
wire   [4:0] select_ln54_fu_355_p3;
reg   [0:0] tmp_1_reg_1142;
reg   [0:0] tmp_1_reg_1142_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter3_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter4_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter5_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter6_reg;
reg   [0:0] tmp_1_reg_1142_pp0_iter7_reg;
wire   [5:0] select_ln54_1_fu_805_p3;
reg   [5:0] select_ln54_1_reg_1150;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter9_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter10_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter11_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter12_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter13_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter14_reg;
reg   [5:0] select_ln54_1_reg_1150_pp0_iter15_reg;
reg   [63:0] gmem_addr_reg_1155;
wire   [5:0] add_ln56_5_fu_962_p2;
reg   [5:0] add_ln56_5_reg_1161;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter9_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter10_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter11_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter12_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter13_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter14_reg;
reg   [5:0] add_ln56_5_reg_1161_pp0_iter15_reg;
reg  signed [31:0] gmem_addr_read_reg_1166;
reg   [5:0] value_addr_reg_1176;
wire   [0:0] addr_cmp_fu_994_p2;
reg   [0:0] addr_cmp_reg_1182;
reg    ap_condition_exit_pp0_iter8_stage0;
wire   [63:0] zext_ln56_1_fu_987_p1;
wire   [63:0] select_ln54_1_cast_fu_983_p1;
wire  signed [63:0] sext_ln56_fu_924_p1;
reg   [63:0] reuse_addr_reg_fu_130;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_134;
wire   [31:0] add_ln56_6_fu_1020_p2;
reg   [4:0] j_fu_138;
reg   [4:0] ap_sig_allocacmp_j_load;
wire   [4:0] j_1_fu_387_p2;
reg   [1:0] tz_fu_142;
wire   [1:0] select_ln54_4_fu_838_p3;
reg   [6:0] indvar_flatten_fu_146;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [6:0] select_ln54_5_fu_399_p3;
reg   [2:0] ty_fu_150;
wire   [2:0] select_ln53_6_fu_752_p3;
reg   [8:0] indvar_flatten50_fu_154;
reg   [8:0] ap_sig_allocacmp_indvar_flatten50_load;
wire   [8:0] select_ln53_7_fu_413_p3;
reg   [2:0] tx_fu_158;
wire   [2:0] select_ln52_1_fu_583_p3;
reg   [10:0] indvar_flatten129_fu_162;
reg   [10:0] ap_sig_allocacmp_indvar_flatten129_load;
wire   [10:0] add_ln52_fu_268_p2;
wire   [0:0] icmp_ln55_fu_295_p2;
wire   [0:0] xor_ln52_fu_289_p2;
wire   [0:0] icmp_ln54_fu_307_p2;
wire   [0:0] xor_ln53_fu_325_p2;
wire   [0:0] and_ln52_fu_301_p2;
wire   [0:0] or_ln53_1_fu_331_p2;
wire   [0:0] or_ln54_fu_343_p2;
wire   [0:0] or_ln54_1_fu_349_p2;
wire   [4:0] mul_fu_367_p0;
wire   [6:0] mul_fu_367_p1;
wire   [10:0] mul_fu_367_p2;
wire   [6:0] add_ln54_1_fu_393_p2;
wire   [8:0] add_ln53_1_fu_407_p2;
wire   [2:0] empty_fu_458_p0;
wire   [5:0] empty_fu_458_p1;
wire   [3:0] p_shl2_fu_476_p3;
wire   [5:0] p_shl1_fu_468_p3;
wire   [5:0] p_shl2_cast_fu_484_p1;
wire   [4:0] p_shl_fu_494_p3;
wire   [5:0] p_shl_cast_fu_502_p1;
wire   [5:0] zext_ln53_fu_464_p1;
wire   [5:0] empty_17_fu_506_p2;
wire  signed [7:0] sext_ln54_fu_512_p1;
wire   [7:0] empty_fu_458_p2;
wire   [0:0] empty_18_fu_522_p1;
wire   [1:0] empty_19_fu_534_p2;
wire   [5:0] p_shl5_fu_526_p3;
wire   [5:0] p_shl6_cast_fu_540_p1;
wire   [5:0] zext_ln52_fu_450_p1;
wire   [5:0] empty_20_fu_544_p2;
wire   [5:0] tmp_fu_550_p2;
wire   [5:0] empty_16_fu_488_p2;
wire   [2:0] add_ln52_1_fu_577_p2;
wire   [2:0] p_mid163_fu_598_p0;
wire   [5:0] p_mid163_fu_598_p1;
wire   [7:0] p_mid163_fu_598_p2;
wire   [7:0] add_ln56_fu_516_p2;
wire   [5:0] zext_ln52_1_fu_625_p1;
wire   [5:0] empty_21_fu_556_p2;
wire   [2:0] select_ln52_fu_570_p3;
wire   [2:0] add_ln53_fu_636_p2;
wire   [3:0] p_shl2_mid1_fu_661_p3;
wire   [5:0] p_shl1_mid1_fu_653_p3;
wire   [5:0] p_shl2_cast_mid1_fu_669_p1;
wire   [5:0] p_mid116_fu_673_p2;
wire   [5:0] select_ln52_3_fu_611_p3;
wire   [4:0] p_shl_mid1_fu_686_p3;
wire   [5:0] p_shl_cast_mid1_fu_694_p1;
wire   [5:0] zext_ln53_1_fu_649_p1;
wire   [5:0] p_mid118_fu_698_p2;
wire  signed [7:0] sext_ln54_1_fu_704_p1;
wire   [7:0] select_ln52_2_fu_604_p3;
wire   [7:0] add_ln56_7_fu_708_p2;
wire   [7:0] select_ln52_4_fu_618_p3;
wire   [7:0] select_ln53_2_fu_714_p3;
wire   [5:0] select_ln52_2_cast_fu_590_p1;
wire   [5:0] p_mid138_fu_725_p2;
wire   [5:0] select_ln52_5_fu_629_p3;
wire   [4:0] p_shl3_fu_562_p3;
wire   [1:0] select_ln53_fu_642_p3;
wire   [1:0] add_ln54_fu_759_p2;
wire   [0:0] empty_23_fu_765_p1;
wire   [1:0] empty_24_fu_777_p2;
wire   [5:0] p_shl5_mid1_fu_769_p3;
wire   [5:0] p_shl6_cast_mid1_fu_783_p1;
wire   [5:0] p_mid1_fu_787_p2;
wire   [5:0] tmp_mid1_fu_793_p2;
wire   [5:0] select_ln53_1_fu_679_p3;
wire   [5:0] p_mid15_fu_799_p2;
wire   [5:0] select_ln53_3_fu_731_p3;
wire   [4:0] p_shl3_mid1_fu_812_p3;
wire   [4:0] select_ln53_4_fu_738_p3;
wire   [1:0] select_ln53_5_fu_745_p3;
wire   [1:0] select_ln54_3_fu_827_p3;
wire   [7:0] shl_ln_fu_845_p3;
wire   [1:0] shl_ln56_1_fu_856_p3;
wire   [8:0] zext_ln56_fu_852_p1;
wire   [8:0] zext_ln56_2_fu_863_p1;
wire   [4:0] grp_fu_381_p2;
wire   [8:0] sub_ln56_fu_867_p2;
wire   [8:0] zext_ln56_3_fu_873_p1;
wire   [8:0] add_ln56_1_fu_877_p2;
wire  signed [9:0] sext_ln56_1_fu_883_p1;
wire  signed [9:0] sext_ln53_fu_721_p1;
wire   [9:0] add_ln56_2_fu_887_p2;
wire   [11:0] tmp_s_fu_893_p3;
wire  signed [33:0] sext_ln56_2_fu_901_p1;
wire   [63:0] zext_ln56_4_fu_905_p1;
wire   [63:0] add_ln56_3_fu_909_p2;
wire   [61:0] trunc_ln1_fu_914_p4;
wire   [3:0] tmp3_fu_934_p4;
wire   [4:0] select_ln54_2_fu_820_p3;
wire   [4:0] or_ln56_fu_946_p2;
wire   [5:0] zext_ln56_6_fu_952_p1;
wire   [5:0] select_ln54_3_cast_fu_834_p1;
wire   [5:0] add_ln56_4_fu_956_p2;
wire   [5:0] zext_ln56_5_fu_942_p1;
wire  signed [4:0] mul_ln56_fu_1005_p0;
wire   [31:0] reuse_select_fu_1013_p3;
wire   [31:0] mul_ln56_fu_1005_p2;
reg    grp_fu_381_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] empty_fu_458_p00;
wire   [10:0] mul_fu_367_p00;
wire   [7:0] p_mid163_fu_598_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4_mul_v2_filter #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
mul_v2_filter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul_v2_filter_address0),
    .ce0(mul_v2_filter_ce0),
    .q0(mul_v2_filter_q0)
);

mul_v2_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U1(
    .din0(mul_fu_367_p0),
    .din1(mul_fu_367_p1),
    .dout(mul_fu_367_p2)
);

mul_v2_urem_5ns_5ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 5 ))
urem_5ns_5ns_5_9_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln54_fu_355_p3),
    .din1(5'd9),
    .ce(grp_fu_381_ce),
    .dout(grp_fu_381_p2)
);

mul_v2_mul_3ns_6ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_3ns_6ns_8_1_1_U3(
    .din0(empty_fu_458_p0),
    .din1(empty_fu_458_p1),
    .dout(empty_fu_458_p2)
);

mul_v2_mul_3ns_6ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 8 ))
mul_3ns_6ns_8_1_1_U4(
    .din0(p_mid163_fu_598_p0),
    .din1(p_mid163_fu_598_p1),
    .dout(p_mid163_fu_598_p2)
);

mul_v2_mul_5s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_5s_32s_32_1_1_U5(
    .din0(mul_ln56_fu_1005_p0),
    .din1(gmem_addr_read_reg_1166),
    .dout(mul_ln56_fu_1005_p2)
);

mul_v2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter8_stage0)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_262_p2 == 1'd0))) begin
            indvar_flatten129_fu_162 <= add_ln52_fu_268_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten129_fu_162 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_262_p2 == 1'd0))) begin
            indvar_flatten50_fu_154 <= select_ln53_7_fu_413_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten50_fu_154 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_262_p2 == 1'd0))) begin
            indvar_flatten_fu_146 <= select_ln54_5_fu_399_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_146 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_262_p2 == 1'd0))) begin
            j_fu_138 <= j_1_fu_387_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_138 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_addr_reg_fu_130 <= 64'd18446744073709551615;
        end else if ((ap_enable_reg_pp0_iter16 == 1'b1)) begin
            reuse_addr_reg_fu_130 <= select_ln54_1_cast_fu_983_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            reuse_reg_fu_134 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter17 == 1'b1)) begin
            reuse_reg_fu_134 <= add_ln56_6_fu_1020_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tx_fu_158 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln52_reg_1100_pp0_iter7_reg == 1'd0))) begin
            tx_fu_158 <= select_ln52_1_fu_583_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ty_fu_150 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln52_reg_1100_pp0_iter7_reg == 1'd0))) begin
            ty_fu_150 <= select_ln53_6_fu_752_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            tz_fu_142 <= 2'd0;
        end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln52_reg_1100_pp0_iter7_reg == 1'd0))) begin
            tz_fu_142 <= select_ln54_4_fu_838_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_reg_1100_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln56_5_reg_1161 <= add_ln56_5_fu_962_p2;
        gmem_addr_reg_1155 <= sext_ln56_fu_924_p1;
        select_ln54_1_reg_1150 <= select_ln54_1_fu_805_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln56_5_reg_1161_pp0_iter10_reg <= add_ln56_5_reg_1161_pp0_iter9_reg;
        add_ln56_5_reg_1161_pp0_iter11_reg <= add_ln56_5_reg_1161_pp0_iter10_reg;
        add_ln56_5_reg_1161_pp0_iter12_reg <= add_ln56_5_reg_1161_pp0_iter11_reg;
        add_ln56_5_reg_1161_pp0_iter13_reg <= add_ln56_5_reg_1161_pp0_iter12_reg;
        add_ln56_5_reg_1161_pp0_iter14_reg <= add_ln56_5_reg_1161_pp0_iter13_reg;
        add_ln56_5_reg_1161_pp0_iter15_reg <= add_ln56_5_reg_1161_pp0_iter14_reg;
        add_ln56_5_reg_1161_pp0_iter9_reg <= add_ln56_5_reg_1161;
        addr_cmp_reg_1182 <= addr_cmp_fu_994_p2;
        and_ln52_1_reg_1114_pp0_iter2_reg <= and_ln52_1_reg_1114_pp0_iter1_reg;
        and_ln52_1_reg_1114_pp0_iter3_reg <= and_ln52_1_reg_1114_pp0_iter2_reg;
        and_ln52_1_reg_1114_pp0_iter4_reg <= and_ln52_1_reg_1114_pp0_iter3_reg;
        and_ln52_1_reg_1114_pp0_iter5_reg <= and_ln52_1_reg_1114_pp0_iter4_reg;
        and_ln52_1_reg_1114_pp0_iter6_reg <= and_ln52_1_reg_1114_pp0_iter5_reg;
        and_ln52_1_reg_1114_pp0_iter7_reg <= and_ln52_1_reg_1114_pp0_iter6_reg;
        and_ln53_reg_1129_pp0_iter2_reg <= and_ln53_reg_1129_pp0_iter1_reg;
        and_ln53_reg_1129_pp0_iter3_reg <= and_ln53_reg_1129_pp0_iter2_reg;
        and_ln53_reg_1129_pp0_iter4_reg <= and_ln53_reg_1129_pp0_iter3_reg;
        and_ln53_reg_1129_pp0_iter5_reg <= and_ln53_reg_1129_pp0_iter4_reg;
        and_ln53_reg_1129_pp0_iter6_reg <= and_ln53_reg_1129_pp0_iter5_reg;
        and_ln53_reg_1129_pp0_iter7_reg <= and_ln53_reg_1129_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        gmem_addr_read_reg_1166 <= m_axi_gmem_RDATA;
        icmp_ln52_reg_1100_pp0_iter2_reg <= icmp_ln52_reg_1100_pp0_iter1_reg;
        icmp_ln52_reg_1100_pp0_iter3_reg <= icmp_ln52_reg_1100_pp0_iter2_reg;
        icmp_ln52_reg_1100_pp0_iter4_reg <= icmp_ln52_reg_1100_pp0_iter3_reg;
        icmp_ln52_reg_1100_pp0_iter5_reg <= icmp_ln52_reg_1100_pp0_iter4_reg;
        icmp_ln52_reg_1100_pp0_iter6_reg <= icmp_ln52_reg_1100_pp0_iter5_reg;
        icmp_ln52_reg_1100_pp0_iter7_reg <= icmp_ln52_reg_1100_pp0_iter6_reg;
        icmp_ln53_reg_1104_pp0_iter2_reg <= icmp_ln53_reg_1104_pp0_iter1_reg;
        icmp_ln53_reg_1104_pp0_iter3_reg <= icmp_ln53_reg_1104_pp0_iter2_reg;
        icmp_ln53_reg_1104_pp0_iter4_reg <= icmp_ln53_reg_1104_pp0_iter3_reg;
        icmp_ln53_reg_1104_pp0_iter5_reg <= icmp_ln53_reg_1104_pp0_iter4_reg;
        icmp_ln53_reg_1104_pp0_iter6_reg <= icmp_ln53_reg_1104_pp0_iter5_reg;
        icmp_ln53_reg_1104_pp0_iter7_reg <= icmp_ln53_reg_1104_pp0_iter6_reg;
        or_ln53_reg_1122_pp0_iter2_reg <= or_ln53_reg_1122_pp0_iter1_reg;
        or_ln53_reg_1122_pp0_iter3_reg <= or_ln53_reg_1122_pp0_iter2_reg;
        or_ln53_reg_1122_pp0_iter4_reg <= or_ln53_reg_1122_pp0_iter3_reg;
        or_ln53_reg_1122_pp0_iter5_reg <= or_ln53_reg_1122_pp0_iter4_reg;
        or_ln53_reg_1122_pp0_iter6_reg <= or_ln53_reg_1122_pp0_iter5_reg;
        or_ln53_reg_1122_pp0_iter7_reg <= or_ln53_reg_1122_pp0_iter6_reg;
        select_ln54_1_reg_1150_pp0_iter10_reg <= select_ln54_1_reg_1150_pp0_iter9_reg;
        select_ln54_1_reg_1150_pp0_iter11_reg <= select_ln54_1_reg_1150_pp0_iter10_reg;
        select_ln54_1_reg_1150_pp0_iter12_reg <= select_ln54_1_reg_1150_pp0_iter11_reg;
        select_ln54_1_reg_1150_pp0_iter13_reg <= select_ln54_1_reg_1150_pp0_iter12_reg;
        select_ln54_1_reg_1150_pp0_iter14_reg <= select_ln54_1_reg_1150_pp0_iter13_reg;
        select_ln54_1_reg_1150_pp0_iter15_reg <= select_ln54_1_reg_1150_pp0_iter14_reg;
        select_ln54_1_reg_1150_pp0_iter9_reg <= select_ln54_1_reg_1150;
        tmp_1_reg_1142_pp0_iter2_reg <= tmp_1_reg_1142_pp0_iter1_reg;
        tmp_1_reg_1142_pp0_iter3_reg <= tmp_1_reg_1142_pp0_iter2_reg;
        tmp_1_reg_1142_pp0_iter4_reg <= tmp_1_reg_1142_pp0_iter3_reg;
        tmp_1_reg_1142_pp0_iter5_reg <= tmp_1_reg_1142_pp0_iter4_reg;
        tmp_1_reg_1142_pp0_iter6_reg <= tmp_1_reg_1142_pp0_iter5_reg;
        tmp_1_reg_1142_pp0_iter7_reg <= tmp_1_reg_1142_pp0_iter6_reg;
        value_addr_reg_1176 <= select_ln54_1_cast_fu_983_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_fu_262_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln52_1_reg_1114 <= and_ln52_1_fu_313_p2;
        and_ln53_reg_1129 <= and_ln53_fu_337_p2;
        icmp_ln53_reg_1104 <= icmp_ln53_fu_283_p2;
        or_ln53_reg_1122 <= or_ln53_fu_319_p2;
        tmp_1_reg_1142 <= mul_fu_367_p2[32'd9];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln52_1_reg_1114_pp0_iter1_reg <= and_ln52_1_reg_1114;
        and_ln53_reg_1129_pp0_iter1_reg <= and_ln53_reg_1129;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln52_reg_1100 <= icmp_ln52_fu_262_p2;
        icmp_ln52_reg_1100_pp0_iter1_reg <= icmp_ln52_reg_1100;
        icmp_ln53_reg_1104_pp0_iter1_reg <= icmp_ln53_reg_1104;
        or_ln53_reg_1122_pp0_iter1_reg <= or_ln53_reg_1122;
        tmp_1_reg_1142_pp0_iter1_reg <= tmp_1_reg_1142;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_fu_262_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln52_reg_1100_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter16_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten129_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten129_load = indvar_flatten129_fu_162;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten50_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten50_load = indvar_flatten50_fu_154;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_146;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_138;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_381_ce = 1'b1;
    end else begin
        grp_fu_381_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_v2_filter_ce0 = 1'b1;
    end else begin
        mul_v2_filter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_ce0 = 1'b1;
    end else begin
        value_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_ce1 = 1'b1;
    end else begin
        value_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_r_we0 = 1'b1;
    end else begin
        value_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_577_p2 = (tx_fu_158 + 3'd1);

assign add_ln52_fu_268_p2 = (ap_sig_allocacmp_indvar_flatten129_load + 11'd1);

assign add_ln53_1_fu_407_p2 = (ap_sig_allocacmp_indvar_flatten50_load + 9'd1);

assign add_ln53_fu_636_p2 = (select_ln52_fu_570_p3 + 3'd1);

assign add_ln54_1_fu_393_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln54_fu_759_p2 = (select_ln53_fu_642_p3 + 2'd1);

assign add_ln56_1_fu_877_p2 = (sub_ln56_fu_867_p2 + zext_ln56_3_fu_873_p1);

assign add_ln56_2_fu_887_p2 = ($signed(sext_ln56_1_fu_883_p1) + $signed(sext_ln53_fu_721_p1));

assign add_ln56_3_fu_909_p2 = (zext_ln56_4_fu_905_p1 + I);

assign add_ln56_4_fu_956_p2 = (zext_ln56_6_fu_952_p1 + select_ln54_3_cast_fu_834_p1);

assign add_ln56_5_fu_962_p2 = (add_ln56_4_fu_956_p2 + zext_ln56_5_fu_942_p1);

assign add_ln56_6_fu_1020_p2 = (reuse_select_fu_1013_p3 + mul_ln56_fu_1005_p2);

assign add_ln56_7_fu_708_p2 = ($signed(sext_ln54_1_fu_704_p1) + $signed(select_ln52_2_fu_604_p3));

assign add_ln56_fu_516_p2 = ($signed(sext_ln54_fu_512_p1) + $signed(empty_fu_458_p2));

assign addr_cmp_fu_994_p2 = ((reuse_addr_reg_fu_130 == select_ln54_1_cast_fu_983_p1) ? 1'b1 : 1'b0);

assign and_ln52_1_fu_313_p2 = (xor_ln52_fu_289_p2 & icmp_ln54_fu_307_p2);

assign and_ln52_fu_301_p2 = (xor_ln52_fu_289_p2 & icmp_ln55_fu_295_p2);

assign and_ln53_fu_337_p2 = (or_ln53_1_fu_331_p2 & and_ln52_fu_301_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter16 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_16_fu_488_p2 = (p_shl1_fu_468_p3 - p_shl2_cast_fu_484_p1);

assign empty_17_fu_506_p2 = (p_shl_cast_fu_502_p1 - zext_ln53_fu_464_p1);

assign empty_18_fu_522_p1 = tz_fu_142[0:0];

assign empty_19_fu_534_p2 = tz_fu_142 << 2'd1;

assign empty_20_fu_544_p2 = (p_shl5_fu_526_p3 - p_shl6_cast_fu_540_p1);

assign empty_21_fu_556_p2 = (tmp_fu_550_p2 + empty_16_fu_488_p2);

assign empty_23_fu_765_p1 = add_ln54_fu_759_p2[0:0];

assign empty_24_fu_777_p2 = add_ln54_fu_759_p2 << 2'd1;

assign empty_fu_458_p0 = empty_fu_458_p00;

assign empty_fu_458_p00 = tx_fu_158;

assign empty_fu_458_p1 = 8'd21;

assign icmp_ln52_fu_262_p2 = ((ap_sig_allocacmp_indvar_flatten129_load == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_283_p2 = ((ap_sig_allocacmp_indvar_flatten50_load == 9'd180) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_307_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd36) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_295_p2 = ((ap_sig_allocacmp_j_load == 5'd18) ? 1'b1 : 1'b0);

assign j_1_fu_387_p2 = (select_ln54_fu_355_p3 + 5'd1);

assign m_axi_gmem_ARADDR = gmem_addr_reg_1155;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_fu_367_p0 = mul_fu_367_p00;

assign mul_fu_367_p00 = select_ln54_fu_355_p3;

assign mul_fu_367_p1 = 11'd57;

assign mul_ln56_fu_1005_p0 = mul_v2_filter_q0;

assign mul_v2_filter_address0 = zext_ln56_1_fu_987_p1;

assign or_ln53_1_fu_331_p2 = (xor_ln53_fu_325_p2 | icmp_ln53_fu_283_p2);

assign or_ln53_fu_319_p2 = (icmp_ln53_fu_283_p2 | and_ln52_1_fu_313_p2);

assign or_ln54_1_fu_349_p2 = (or_ln54_fu_343_p2 | icmp_ln53_fu_283_p2);

assign or_ln54_fu_343_p2 = (and_ln53_fu_337_p2 | and_ln52_1_fu_313_p2);

assign or_ln56_fu_946_p2 = (select_ln54_2_fu_820_p3 | grp_fu_381_p2);

assign p_mid116_fu_673_p2 = (p_shl1_mid1_fu_653_p3 - p_shl2_cast_mid1_fu_669_p1);

assign p_mid118_fu_698_p2 = (p_shl_cast_mid1_fu_694_p1 - zext_ln53_1_fu_649_p1);

assign p_mid138_fu_725_p2 = (select_ln52_2_cast_fu_590_p1 + p_mid116_fu_673_p2);

assign p_mid15_fu_799_p2 = (tmp_mid1_fu_793_p2 + select_ln53_1_fu_679_p3);

assign p_mid163_fu_598_p0 = p_mid163_fu_598_p00;

assign p_mid163_fu_598_p00 = add_ln52_1_fu_577_p2;

assign p_mid163_fu_598_p1 = 8'd21;

assign p_mid1_fu_787_p2 = (p_shl5_mid1_fu_769_p3 - p_shl6_cast_mid1_fu_783_p1);

assign p_shl1_fu_468_p3 = {{ty_fu_150}, {3'd0}};

assign p_shl1_mid1_fu_653_p3 = {{add_ln53_fu_636_p2}, {3'd0}};

assign p_shl2_cast_fu_484_p1 = p_shl2_fu_476_p3;

assign p_shl2_cast_mid1_fu_669_p1 = p_shl2_mid1_fu_661_p3;

assign p_shl2_fu_476_p3 = {{ty_fu_150}, {1'd0}};

assign p_shl2_mid1_fu_661_p3 = {{add_ln53_fu_636_p2}, {1'd0}};

assign p_shl3_fu_562_p3 = {{empty_18_fu_522_p1}, {4'd0}};

assign p_shl3_mid1_fu_812_p3 = {{empty_23_fu_765_p1}, {4'd0}};

assign p_shl5_fu_526_p3 = {{empty_18_fu_522_p1}, {5'd0}};

assign p_shl5_mid1_fu_769_p3 = {{empty_23_fu_765_p1}, {5'd0}};

assign p_shl6_cast_fu_540_p1 = empty_19_fu_534_p2;

assign p_shl6_cast_mid1_fu_783_p1 = empty_24_fu_777_p2;

assign p_shl_cast_fu_502_p1 = p_shl_fu_494_p3;

assign p_shl_cast_mid1_fu_694_p1 = p_shl_mid1_fu_686_p3;

assign p_shl_fu_494_p3 = {{ty_fu_150}, {2'd0}};

assign p_shl_mid1_fu_686_p3 = {{add_ln53_fu_636_p2}, {2'd0}};

assign reuse_select_fu_1013_p3 = ((addr_cmp_reg_1182[0:0] == 1'b1) ? reuse_reg_fu_134 : value_r_q1);

assign select_ln52_1_fu_583_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? add_ln52_1_fu_577_p2 : tx_fu_158);

assign select_ln52_2_cast_fu_590_p1 = select_ln52_1_fu_583_p3;

assign select_ln52_2_fu_604_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? p_mid163_fu_598_p2 : empty_fu_458_p2);

assign select_ln52_3_fu_611_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? 6'd0 : empty_16_fu_488_p2);

assign select_ln52_4_fu_618_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? p_mid163_fu_598_p2 : add_ln56_fu_516_p2);

assign select_ln52_5_fu_629_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? zext_ln52_1_fu_625_p1 : empty_21_fu_556_p2);

assign select_ln52_fu_570_p3 = ((icmp_ln53_reg_1104_pp0_iter7_reg[0:0] == 1'b1) ? 3'd0 : ty_fu_150);

assign select_ln53_1_fu_679_p3 = ((and_ln52_1_reg_1114_pp0_iter7_reg[0:0] == 1'b1) ? p_mid116_fu_673_p2 : select_ln52_3_fu_611_p3);

assign select_ln53_2_fu_714_p3 = ((and_ln52_1_reg_1114_pp0_iter7_reg[0:0] == 1'b1) ? add_ln56_7_fu_708_p2 : select_ln52_4_fu_618_p3);

assign select_ln53_3_fu_731_p3 = ((and_ln52_1_reg_1114_pp0_iter7_reg[0:0] == 1'b1) ? p_mid138_fu_725_p2 : select_ln52_5_fu_629_p3);

assign select_ln53_4_fu_738_p3 = ((or_ln53_reg_1122_pp0_iter7_reg[0:0] == 1'b1) ? 5'd0 : p_shl3_fu_562_p3);

assign select_ln53_5_fu_745_p3 = ((or_ln53_reg_1122_pp0_iter7_reg[0:0] == 1'b1) ? 2'd0 : empty_19_fu_534_p2);

assign select_ln53_6_fu_752_p3 = ((and_ln52_1_reg_1114_pp0_iter7_reg[0:0] == 1'b1) ? add_ln53_fu_636_p2 : select_ln52_fu_570_p3);

assign select_ln53_7_fu_413_p3 = ((icmp_ln53_fu_283_p2[0:0] == 1'b1) ? 9'd1 : add_ln53_1_fu_407_p2);

assign select_ln53_fu_642_p3 = ((or_ln53_reg_1122_pp0_iter7_reg[0:0] == 1'b1) ? 2'd0 : tz_fu_142);

assign select_ln54_1_cast_fu_983_p1 = select_ln54_1_reg_1150_pp0_iter15_reg;

assign select_ln54_1_fu_805_p3 = ((and_ln53_reg_1129_pp0_iter7_reg[0:0] == 1'b1) ? p_mid15_fu_799_p2 : select_ln53_3_fu_731_p3);

assign select_ln54_2_fu_820_p3 = ((and_ln53_reg_1129_pp0_iter7_reg[0:0] == 1'b1) ? p_shl3_mid1_fu_812_p3 : select_ln53_4_fu_738_p3);

assign select_ln54_3_cast_fu_834_p1 = select_ln54_3_fu_827_p3;

assign select_ln54_3_fu_827_p3 = ((and_ln53_reg_1129_pp0_iter7_reg[0:0] == 1'b1) ? empty_24_fu_777_p2 : select_ln53_5_fu_745_p3);

assign select_ln54_4_fu_838_p3 = ((and_ln53_reg_1129_pp0_iter7_reg[0:0] == 1'b1) ? add_ln54_fu_759_p2 : select_ln53_fu_642_p3);

assign select_ln54_5_fu_399_p3 = ((or_ln53_fu_319_p2[0:0] == 1'b1) ? 7'd1 : add_ln54_1_fu_393_p2);

assign select_ln54_fu_355_p3 = ((or_ln54_1_fu_349_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sext_ln53_fu_721_p1 = $signed(select_ln53_2_fu_714_p3);

assign sext_ln54_1_fu_704_p1 = $signed(p_mid118_fu_698_p2);

assign sext_ln54_fu_512_p1 = $signed(empty_17_fu_506_p2);

assign sext_ln56_1_fu_883_p1 = $signed(add_ln56_1_fu_877_p2);

assign sext_ln56_2_fu_901_p1 = $signed(tmp_s_fu_893_p3);

assign sext_ln56_fu_924_p1 = $signed(trunc_ln1_fu_914_p4);

assign shl_ln56_1_fu_856_p3 = {{tmp_1_reg_1142_pp0_iter7_reg}, {1'd0}};

assign shl_ln_fu_845_p3 = {{tmp_1_reg_1142_pp0_iter7_reg}, {7'd0}};

assign sub_ln56_fu_867_p2 = (zext_ln56_fu_852_p1 - zext_ln56_2_fu_863_p1);

assign tmp3_fu_934_p4 = {{{tmp_1_reg_1142_pp0_iter7_reg}, {2'd0}}, {tmp_1_reg_1142_pp0_iter7_reg}};

assign tmp_fu_550_p2 = (zext_ln52_fu_450_p1 + empty_20_fu_544_p2);

assign tmp_mid1_fu_793_p2 = (select_ln52_2_cast_fu_590_p1 + p_mid1_fu_787_p2);

assign tmp_s_fu_893_p3 = {{add_ln56_2_fu_887_p2}, {2'd0}};

assign trunc_ln1_fu_914_p4 = {{add_ln56_3_fu_909_p2[63:2]}};

assign value_r_address0 = value_addr_reg_1176;

assign value_r_address1 = select_ln54_1_cast_fu_983_p1;

assign value_r_d0 = (reuse_select_fu_1013_p3 + mul_ln56_fu_1005_p2);

assign xor_ln52_fu_289_p2 = (icmp_ln53_fu_283_p2 ^ 1'd1);

assign xor_ln53_fu_325_p2 = (icmp_ln54_fu_307_p2 ^ 1'd1);

assign zext_ln52_1_fu_625_p1 = add_ln52_1_fu_577_p2;

assign zext_ln52_fu_450_p1 = tx_fu_158;

assign zext_ln53_1_fu_649_p1 = add_ln53_fu_636_p2;

assign zext_ln53_fu_464_p1 = ty_fu_150;

assign zext_ln56_1_fu_987_p1 = add_ln56_5_reg_1161_pp0_iter15_reg;

assign zext_ln56_2_fu_863_p1 = shl_ln56_1_fu_856_p3;

assign zext_ln56_3_fu_873_p1 = grp_fu_381_p2;

assign zext_ln56_4_fu_905_p1 = $unsigned(sext_ln56_2_fu_901_p1);

assign zext_ln56_5_fu_942_p1 = tmp3_fu_934_p4;

assign zext_ln56_6_fu_952_p1 = or_ln56_fu_946_p2;

assign zext_ln56_fu_852_p1 = shl_ln_fu_845_p3;

endmodule //mul_v2_mul_v2_Pipeline_VITIS_LOOP_52_1_VITIS_LOOP_54_3_VITIS_LOOP_55_4
