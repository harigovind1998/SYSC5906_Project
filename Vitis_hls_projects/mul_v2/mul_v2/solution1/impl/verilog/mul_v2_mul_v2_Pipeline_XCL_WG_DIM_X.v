// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        global_id_base_x,
        wi,
        mul6_mid2,
        mul14,
        I,
        mul_v2_filter_load,
        add_ln78,
        mul_v2_filter_load_1,
        add_ln79,
        mul_v2_filter_load_2,
        add_ln80,
        mul_v2_filter_load_3,
        add_ln81,
        mul_v2_filter_load_4,
        add_ln82,
        mul_v2_filter_load_5,
        add_ln83,
        mul_v2_filter_load_6,
        add_ln84,
        mul_v2_filter_load_7,
        add_ln85,
        mul_v2_filter_load_8,
        add_ln86,
        mul_v2_filter_load_9,
        add_ln87,
        mul_v2_filter_load_10,
        add_ln88,
        mul_v2_filter_load_11,
        add_ln89,
        mul_v2_filter_load_12,
        add_ln90,
        mul_v2_filter_load_13,
        add_ln91,
        mul_v2_filter_load_14,
        add_ln92,
        mul_v2_filter_load_15,
        add_ln93,
        mul_v2_filter_load_16,
        add_ln94,
        mul_v2_filter_load_17,
        shiftreg_out,
        shiftreg_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 18'd1;
parameter    ap_ST_fsm_pp0_stage1 = 18'd2;
parameter    ap_ST_fsm_pp0_stage2 = 18'd4;
parameter    ap_ST_fsm_pp0_stage3 = 18'd8;
parameter    ap_ST_fsm_pp0_stage4 = 18'd16;
parameter    ap_ST_fsm_pp0_stage5 = 18'd32;
parameter    ap_ST_fsm_pp0_stage6 = 18'd64;
parameter    ap_ST_fsm_pp0_stage7 = 18'd128;
parameter    ap_ST_fsm_pp0_stage8 = 18'd256;
parameter    ap_ST_fsm_pp0_stage9 = 18'd512;
parameter    ap_ST_fsm_pp0_stage10 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 18'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [31:0] global_id_base_x;
input  [31:0] wi;
input  [31:0] mul6_mid2;
input  [31:0] mul14;
input  [63:0] I;
input  [2:0] mul_v2_filter_load;
input  [31:0] add_ln78;
input  [2:0] mul_v2_filter_load_1;
input  [31:0] add_ln79;
input  [2:0] mul_v2_filter_load_2;
input  [31:0] add_ln80;
input  [2:0] mul_v2_filter_load_3;
input  [31:0] add_ln81;
input  [2:0] mul_v2_filter_load_4;
input  [31:0] add_ln82;
input  [2:0] mul_v2_filter_load_5;
input  [31:0] add_ln83;
input  [2:0] mul_v2_filter_load_6;
input  [31:0] add_ln84;
input  [2:0] mul_v2_filter_load_7;
input  [31:0] add_ln85;
input  [2:0] mul_v2_filter_load_8;
input  [31:0] add_ln86;
input  [2:0] mul_v2_filter_load_9;
input  [31:0] add_ln87;
input  [2:0] mul_v2_filter_load_10;
input  [31:0] add_ln88;
input  [2:0] mul_v2_filter_load_11;
input  [31:0] add_ln89;
input  [2:0] mul_v2_filter_load_12;
input  [31:0] add_ln90;
input  [2:0] mul_v2_filter_load_13;
input  [31:0] add_ln91;
input  [2:0] mul_v2_filter_load_14;
input  [31:0] add_ln92;
input  [2:0] mul_v2_filter_load_15;
input  [31:0] add_ln93;
input  [2:0] mul_v2_filter_load_16;
input  [31:0] add_ln94;
input  [2:0] mul_v2_filter_load_17;
output  [191:0] shiftreg_out;
output   shiftreg_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg shiftreg_out_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage8;
reg   [0:0] icmp_ln100_reg_1898;
reg    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_state9_io;
wire    ap_block_state27_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_subdone;
reg    ap_condition_exit_pp0_iter0_stage8;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage17;
reg    ap_block_state18_pp0_stage17_iter0;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage17_subdone;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage17;
wire    ap_block_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state19_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] mul_v2_filter_load_17_cast_fu_623_p1;
reg   [31:0] mul_v2_filter_load_17_cast_reg_1808;
wire   [31:0] mul_v2_filter_load_16_cast_fu_627_p1;
reg   [31:0] mul_v2_filter_load_16_cast_reg_1813;
wire   [31:0] mul_v2_filter_load_15_cast_fu_631_p1;
reg   [31:0] mul_v2_filter_load_15_cast_reg_1818;
wire   [31:0] mul_v2_filter_load_14_cast_fu_635_p1;
reg   [31:0] mul_v2_filter_load_14_cast_reg_1823;
wire   [31:0] mul_v2_filter_load_13_cast_fu_639_p1;
reg   [31:0] mul_v2_filter_load_13_cast_reg_1828;
wire   [31:0] mul_v2_filter_load_12_cast_fu_643_p1;
reg   [31:0] mul_v2_filter_load_12_cast_reg_1833;
wire   [31:0] mul_v2_filter_load_11_cast_fu_647_p1;
reg   [31:0] mul_v2_filter_load_11_cast_reg_1838;
wire   [31:0] mul_v2_filter_load_10_cast_fu_651_p1;
reg   [31:0] mul_v2_filter_load_10_cast_reg_1843;
wire   [31:0] mul_v2_filter_load_9_cast_fu_655_p1;
reg   [31:0] mul_v2_filter_load_9_cast_reg_1848;
wire   [31:0] mul_v2_filter_load_8_cast_fu_659_p1;
reg   [31:0] mul_v2_filter_load_8_cast_reg_1853;
wire   [31:0] mul_v2_filter_load_7_cast_fu_663_p1;
reg   [31:0] mul_v2_filter_load_7_cast_reg_1858;
wire   [31:0] mul_v2_filter_load_6_cast_fu_667_p1;
reg   [31:0] mul_v2_filter_load_6_cast_reg_1863;
wire   [31:0] mul_v2_filter_load_5_cast_fu_671_p1;
reg   [31:0] mul_v2_filter_load_5_cast_reg_1868;
wire   [31:0] mul_v2_filter_load_4_cast_fu_675_p1;
reg   [31:0] mul_v2_filter_load_4_cast_reg_1873;
wire   [31:0] mul_v2_filter_load_3_cast_fu_679_p1;
reg   [31:0] mul_v2_filter_load_3_cast_reg_1878;
wire   [31:0] mul_v2_filter_load_2_cast_fu_683_p1;
reg   [31:0] mul_v2_filter_load_2_cast_reg_1883;
wire   [31:0] mul_v2_filter_load_1_cast_fu_687_p1;
reg   [31:0] mul_v2_filter_load_1_cast_reg_1888;
wire   [31:0] mul_v2_filter_load_cast_fu_691_p1;
reg   [31:0] mul_v2_filter_load_cast_reg_1893;
wire   [0:0] icmp_ln100_fu_708_p2;
reg   [63:0] gmem_addr_reg_1902;
wire   [31:0] add_ln78_4_fu_792_p2;
reg   [31:0] add_ln78_4_reg_1908;
reg   [63:0] gmem_addr_1_reg_1929;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
reg    ap_block_state20_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] gmem_addr_2_reg_1935;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_state21_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] gmem_addr_3_reg_1941;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
reg    ap_block_state22_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] gmem_addr_4_reg_1947;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
reg    ap_block_state23_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg   [63:0] gmem_addr_5_reg_1953;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
reg    ap_block_state24_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg   [63:0] gmem_addr_6_reg_1959;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_state7_io;
reg    ap_block_state25_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg   [63:0] gmem_addr_7_reg_1965;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_state8_io;
reg    ap_block_state26_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg  signed [31:0] gmem_addr_read_reg_1971;
reg    ap_block_pp0_stage8_11001;
reg   [63:0] gmem_addr_8_reg_1976;
wire   [31:0] mul_ln77_1_fu_1131_p2;
reg   [31:0] mul_ln77_1_reg_1982;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage9_11001;
reg  signed [31:0] gmem_addr_1_read_reg_1987;
reg   [63:0] gmem_addr_9_reg_1992;
reg  signed [31:0] gmem_addr_2_read_reg_1998;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage10_11001;
reg   [63:0] gmem_addr_10_reg_2003;
wire   [31:0] add_ln93_3_fu_1221_p2;
reg   [31:0] add_ln93_3_reg_2009;
wire   [31:0] mul_ln79_fu_1226_p2;
reg   [31:0] mul_ln79_reg_2014;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
reg  signed [31:0] gmem_addr_3_read_reg_2019;
reg   [63:0] gmem_addr_11_reg_2024;
reg   [63:0] gmem_addr_12_reg_2030;
reg   [63:0] gmem_addr_13_reg_2036;
reg   [63:0] gmem_addr_14_reg_2042;
reg   [63:0] gmem_addr_15_reg_2048;
reg   [63:0] gmem_addr_16_reg_2054;
reg   [63:0] gmem_addr_17_reg_2060;
reg  signed [31:0] gmem_addr_4_read_reg_2066;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire   [31:0] add_ln93_5_fu_1521_p2;
reg   [31:0] add_ln93_5_reg_2071;
wire   [31:0] mul_ln81_fu_1526_p2;
reg   [31:0] mul_ln81_reg_2076;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
reg  signed [31:0] gmem_addr_5_read_reg_2081;
wire   [31:0] mul_ln82_fu_1530_p2;
reg   [31:0] mul_ln82_reg_2086;
reg    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
reg  signed [31:0] gmem_addr_6_read_reg_2091;
wire   [31:0] mul_ln83_fu_1534_p2;
reg   [31:0] mul_ln83_reg_2096;
reg    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage15_11001;
reg  signed [31:0] gmem_addr_7_read_reg_2101;
reg  signed [31:0] gmem_addr_8_read_reg_2106;
reg    ap_block_state17_pp0_stage16_iter0;
reg    ap_block_state17_io;
reg    ap_block_pp0_stage16_11001;
wire   [31:0] add_ln93_9_fu_1547_p2;
reg   [31:0] add_ln93_9_reg_2111;
reg  signed [31:0] gmem_addr_9_read_reg_2116;
reg    ap_block_pp0_stage17_11001;
wire   [31:0] add_ln93_11_fu_1570_p2;
reg   [31:0] add_ln93_11_reg_2121;
wire   [31:0] mul_ln86_fu_1576_p2;
reg   [31:0] mul_ln86_reg_2126;
reg  signed [31:0] gmem_addr_10_read_reg_2131;
wire   [31:0] mul_ln87_fu_1580_p2;
reg   [31:0] mul_ln87_reg_2136;
reg  signed [31:0] gmem_addr_11_read_reg_2141;
wire   [31:0] mul_ln88_fu_1584_p2;
reg   [31:0] mul_ln88_reg_2146;
reg  signed [31:0] gmem_addr_12_read_reg_2151;
reg  signed [31:0] gmem_addr_13_read_reg_2156;
wire   [31:0] add_ln93_14_fu_1601_p2;
reg   [31:0] add_ln93_14_reg_2161;
wire   [31:0] mul_ln90_fu_1607_p2;
reg   [31:0] mul_ln90_reg_2166;
reg  signed [31:0] gmem_addr_14_read_reg_2171;
wire   [31:0] mul_ln91_fu_1611_p2;
reg   [31:0] mul_ln91_reg_2176;
reg  signed [31:0] gmem_addr_15_read_reg_2181;
wire   [31:0] mul_ln92_fu_1615_p2;
reg   [31:0] mul_ln92_reg_2186;
reg  signed [31:0] gmem_addr_16_read_reg_2191;
reg  signed [31:0] gmem_addr_17_read_reg_2196;
wire   [31:0] add_ln93_17_fu_1628_p2;
reg   [31:0] add_ln93_17_reg_2201;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] sext_ln77_fu_776_p1;
wire  signed [63:0] sext_ln78_fu_834_p1;
wire  signed [63:0] sext_ln79_fu_875_p1;
wire  signed [63:0] sext_ln80_fu_916_p1;
wire  signed [63:0] sext_ln81_fu_957_p1;
wire  signed [63:0] sext_ln82_fu_998_p1;
wire  signed [63:0] sext_ln83_fu_1039_p1;
wire  signed [63:0] sext_ln84_fu_1080_p1;
wire  signed [63:0] sext_ln85_fu_1121_p1;
wire  signed [63:0] sext_ln86_fu_1166_p1;
wire  signed [63:0] sext_ln87_fu_1211_p1;
wire  signed [63:0] sext_ln88_fu_1261_p1;
wire  signed [63:0] sext_ln89_fu_1302_p1;
wire  signed [63:0] sext_ln90_fu_1343_p1;
wire  signed [63:0] sext_ln91_fu_1384_p1;
wire  signed [63:0] sext_ln92_fu_1425_p1;
wire  signed [63:0] sext_ln93_fu_1466_p1;
wire  signed [63:0] sext_ln94_fu_1507_p1;
reg   [191:0] shiftreg_fu_152;
wire   [191:0] or_ln_fu_1670_p3;
wire    ap_loop_init;
reg   [2:0] phi_ln32_fu_156;
reg   [2:0] ap_sig_allocacmp_phi_ln32_load;
wire   [2:0] add_ln100_fu_714_p2;
reg    ap_block_pp0_stage8_01001;
wire   [31:0] zext_ln32_fu_720_p1;
wire  signed [31:0] mul_ln77_fu_730_p0;
wire   [31:0] mul_ln77_fu_730_p2;
wire   [31:0] add_ln77_fu_736_p2;
wire   [31:0] add_ln77_1_fu_742_p2;
wire   [33:0] shl_ln77_1_fu_748_p3;
wire   [63:0] zext_ln77_fu_756_p1;
wire   [63:0] add_ln77_2_fu_760_p2;
wire   [61:0] trunc_ln2_fu_766_p4;
wire   [31:0] add_ln78_1_fu_786_p2;
wire   [31:0] add_ln78_2_fu_803_p2;
wire   [33:0] shl_ln_fu_807_p3;
wire   [63:0] zext_ln78_fu_815_p1;
wire   [63:0] add_ln78_3_fu_819_p2;
wire   [61:0] trunc_ln3_fu_824_p4;
wire   [31:0] add_ln79_1_fu_844_p2;
wire   [33:0] shl_ln1_fu_848_p3;
wire   [63:0] zext_ln79_fu_856_p1;
wire   [63:0] add_ln79_2_fu_860_p2;
wire   [61:0] trunc_ln4_fu_865_p4;
wire   [31:0] add_ln80_1_fu_885_p2;
wire   [33:0] shl_ln2_fu_889_p3;
wire   [63:0] zext_ln80_fu_897_p1;
wire   [63:0] add_ln80_2_fu_901_p2;
wire   [61:0] trunc_ln5_fu_906_p4;
wire   [31:0] add_ln81_1_fu_926_p2;
wire   [33:0] shl_ln3_fu_930_p3;
wire   [63:0] zext_ln81_fu_938_p1;
wire   [63:0] add_ln81_2_fu_942_p2;
wire   [61:0] trunc_ln6_fu_947_p4;
wire   [31:0] add_ln82_1_fu_967_p2;
wire   [33:0] shl_ln4_fu_971_p3;
wire   [63:0] zext_ln82_fu_979_p1;
wire   [63:0] add_ln82_2_fu_983_p2;
wire   [61:0] trunc_ln7_fu_988_p4;
wire   [31:0] add_ln83_1_fu_1008_p2;
wire   [33:0] shl_ln5_fu_1012_p3;
wire   [63:0] zext_ln83_fu_1020_p1;
wire   [63:0] add_ln83_2_fu_1024_p2;
wire   [61:0] trunc_ln8_fu_1029_p4;
wire   [31:0] add_ln84_1_fu_1049_p2;
wire   [33:0] shl_ln6_fu_1053_p3;
wire   [63:0] zext_ln84_fu_1061_p1;
wire   [63:0] add_ln84_2_fu_1065_p2;
wire   [61:0] trunc_ln9_fu_1070_p4;
wire   [31:0] add_ln85_1_fu_1090_p2;
wire   [33:0] shl_ln7_fu_1094_p3;
wire   [63:0] zext_ln85_fu_1102_p1;
wire   [63:0] add_ln85_2_fu_1106_p2;
wire   [61:0] trunc_ln_fu_1111_p4;
wire   [2:0] mul_ln77_1_fu_1131_p0;
wire   [31:0] add_ln86_1_fu_1135_p2;
wire   [33:0] shl_ln8_fu_1139_p3;
wire   [63:0] zext_ln86_fu_1147_p1;
wire   [63:0] add_ln86_2_fu_1151_p2;
wire   [61:0] trunc_ln1_fu_1156_p4;
wire   [2:0] mul_ln78_fu_1176_p0;
wire   [31:0] add_ln87_1_fu_1180_p2;
wire   [33:0] shl_ln9_fu_1184_p3;
wire   [63:0] zext_ln87_fu_1192_p1;
wire   [63:0] add_ln87_2_fu_1196_p2;
wire   [61:0] trunc_ln10_fu_1201_p4;
wire   [31:0] mul_ln78_fu_1176_p2;
wire   [2:0] mul_ln79_fu_1226_p0;
wire   [31:0] add_ln88_1_fu_1230_p2;
wire   [33:0] shl_ln10_fu_1234_p3;
wire   [63:0] zext_ln88_fu_1242_p1;
wire   [63:0] add_ln88_2_fu_1246_p2;
wire   [61:0] trunc_ln11_fu_1251_p4;
wire   [31:0] add_ln89_1_fu_1271_p2;
wire   [33:0] shl_ln11_fu_1275_p3;
wire   [63:0] zext_ln89_fu_1283_p1;
wire   [63:0] add_ln89_2_fu_1287_p2;
wire   [61:0] trunc_ln12_fu_1292_p4;
wire   [31:0] add_ln90_1_fu_1312_p2;
wire   [33:0] shl_ln12_fu_1316_p3;
wire   [63:0] zext_ln90_fu_1324_p1;
wire   [63:0] add_ln90_2_fu_1328_p2;
wire   [61:0] trunc_ln13_fu_1333_p4;
wire   [31:0] add_ln91_1_fu_1353_p2;
wire   [33:0] shl_ln13_fu_1357_p3;
wire   [63:0] zext_ln91_fu_1365_p1;
wire   [63:0] add_ln91_2_fu_1369_p2;
wire   [61:0] trunc_ln14_fu_1374_p4;
wire   [31:0] add_ln92_1_fu_1394_p2;
wire   [33:0] shl_ln14_fu_1398_p3;
wire   [63:0] zext_ln92_fu_1406_p1;
wire   [63:0] add_ln92_2_fu_1410_p2;
wire   [61:0] trunc_ln15_fu_1415_p4;
wire   [31:0] add_ln93_1_fu_1435_p2;
wire   [33:0] shl_ln15_fu_1439_p3;
wire   [63:0] zext_ln93_fu_1447_p1;
wire   [63:0] add_ln93_2_fu_1451_p2;
wire   [61:0] trunc_ln16_fu_1456_p4;
wire   [31:0] add_ln94_1_fu_1476_p2;
wire   [33:0] shl_ln16_fu_1480_p3;
wire   [63:0] zext_ln94_fu_1488_p1;
wire   [63:0] add_ln94_2_fu_1492_p2;
wire   [61:0] trunc_ln17_fu_1497_p4;
wire   [2:0] mul_ln80_fu_1517_p0;
wire   [31:0] mul_ln80_fu_1517_p2;
wire   [2:0] mul_ln81_fu_1526_p0;
wire   [2:0] mul_ln82_fu_1530_p0;
wire   [2:0] mul_ln83_fu_1534_p0;
wire   [2:0] mul_ln84_fu_1538_p0;
wire   [31:0] mul_ln84_fu_1538_p2;
wire   [31:0] add_ln93_7_fu_1542_p2;
wire   [2:0] mul_ln85_fu_1552_p0;
wire   [31:0] mul_ln85_fu_1552_p2;
wire   [31:0] add_ln93_8_fu_1560_p2;
wire   [31:0] add_ln93_10_fu_1565_p2;
wire   [31:0] add_ln93_6_fu_1556_p2;
wire   [2:0] mul_ln86_fu_1576_p0;
wire   [2:0] mul_ln87_fu_1580_p0;
wire   [2:0] mul_ln88_fu_1584_p0;
wire   [2:0] mul_ln89_fu_1588_p0;
wire   [31:0] mul_ln89_fu_1588_p2;
wire   [31:0] add_ln93_13_fu_1596_p2;
wire   [31:0] add_ln93_12_fu_1592_p2;
wire   [2:0] mul_ln90_fu_1607_p0;
wire   [2:0] mul_ln91_fu_1611_p0;
wire   [2:0] mul_ln92_fu_1615_p0;
wire   [2:0] mul_ln93_fu_1619_p0;
wire   [31:0] mul_ln93_fu_1619_p2;
wire   [31:0] add_ln93_15_fu_1623_p2;
wire   [2:0] mul_ln94_fu_1636_p0;
wire   [31:0] mul_ln94_fu_1636_p2;
wire   [31:0] add_ln93_16_fu_1640_p2;
wire   [31:0] add_ln93_18_fu_1645_p2;
wire   [31:0] add_ln93_19_fu_1650_p2;
wire   [31:0] add_ln93_4_fu_1655_p2;
wire   [159:0] lshr_ln_fu_1660_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [17:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
reg    ap_block_pp0_stage15_subdone;
reg    ap_block_pp0_stage16_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mul_v2_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(mul_ln77_fu_730_p0),
    .din1(wi),
    .dout(mul_ln77_fu_730_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U2(
    .din0(mul_ln77_1_fu_1131_p0),
    .din1(gmem_addr_read_reg_1971),
    .dout(mul_ln77_1_fu_1131_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U3(
    .din0(mul_ln78_fu_1176_p0),
    .din1(gmem_addr_1_read_reg_1987),
    .dout(mul_ln78_fu_1176_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U4(
    .din0(mul_ln79_fu_1226_p0),
    .din1(gmem_addr_2_read_reg_1998),
    .dout(mul_ln79_fu_1226_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U5(
    .din0(mul_ln80_fu_1517_p0),
    .din1(gmem_addr_3_read_reg_2019),
    .dout(mul_ln80_fu_1517_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U6(
    .din0(mul_ln81_fu_1526_p0),
    .din1(gmem_addr_4_read_reg_2066),
    .dout(mul_ln81_fu_1526_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U7(
    .din0(mul_ln82_fu_1530_p0),
    .din1(gmem_addr_5_read_reg_2081),
    .dout(mul_ln82_fu_1530_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U8(
    .din0(mul_ln83_fu_1534_p0),
    .din1(gmem_addr_6_read_reg_2091),
    .dout(mul_ln83_fu_1534_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U9(
    .din0(mul_ln84_fu_1538_p0),
    .din1(gmem_addr_7_read_reg_2101),
    .dout(mul_ln84_fu_1538_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U10(
    .din0(mul_ln85_fu_1552_p0),
    .din1(gmem_addr_8_read_reg_2106),
    .dout(mul_ln85_fu_1552_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U11(
    .din0(mul_ln86_fu_1576_p0),
    .din1(gmem_addr_9_read_reg_2116),
    .dout(mul_ln86_fu_1576_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U12(
    .din0(mul_ln87_fu_1580_p0),
    .din1(gmem_addr_10_read_reg_2131),
    .dout(mul_ln87_fu_1580_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U13(
    .din0(mul_ln88_fu_1584_p0),
    .din1(gmem_addr_11_read_reg_2141),
    .dout(mul_ln88_fu_1584_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U14(
    .din0(mul_ln89_fu_1588_p0),
    .din1(gmem_addr_12_read_reg_2151),
    .dout(mul_ln89_fu_1588_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U15(
    .din0(mul_ln90_fu_1607_p0),
    .din1(gmem_addr_13_read_reg_2156),
    .dout(mul_ln90_fu_1607_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U16(
    .din0(mul_ln91_fu_1611_p0),
    .din1(gmem_addr_14_read_reg_2171),
    .dout(mul_ln91_fu_1611_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U17(
    .din0(mul_ln92_fu_1615_p0),
    .din1(gmem_addr_15_read_reg_2181),
    .dout(mul_ln92_fu_1615_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U18(
    .din0(mul_ln93_fu_1619_p0),
    .din1(gmem_addr_16_read_reg_2191),
    .dout(mul_ln93_fu_1619_p2)
);

mul_v2_mul_3ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_3ns_32s_32_1_1_U19(
    .din0(mul_ln94_fu_1636_p0),
    .din1(gmem_addr_17_read_reg_2196),
    .dout(mul_ln94_fu_1636_p2)
);

mul_v2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage8),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage8)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln100_fu_708_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            phi_ln32_fu_156 <= add_ln100_fu_714_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_ln32_fu_156 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_fu_152 <= 192'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        shiftreg_fu_152 <= or_ln_fu_1670_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_708_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln78_4_reg_1908 <= add_ln78_4_fu_792_p2;
        gmem_addr_reg_1902 <= sext_ln77_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        add_ln93_11_reg_2121 <= add_ln93_11_fu_1570_p2;
        gmem_addr_9_read_reg_2116 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln93_14_reg_2161 <= add_ln93_14_fu_1601_p2;
        gmem_addr_13_read_reg_2156 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        add_ln93_17_reg_2201 <= add_ln93_17_fu_1628_p2;
        gmem_addr_17_read_reg_2196 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        add_ln93_3_reg_2009 <= add_ln93_3_fu_1221_p2;
        gmem_addr_10_reg_2003 <= sext_ln87_fu_1211_p1;
        gmem_addr_2_read_reg_1998 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        add_ln93_5_reg_2071 <= add_ln93_5_fu_1521_p2;
        gmem_addr_4_read_reg_2066 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        add_ln93_9_reg_2111 <= add_ln93_9_fu_1547_p2;
        gmem_addr_8_read_reg_2106 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_10_read_reg_2131 <= m_axi_gmem_RDATA;
        icmp_ln100_reg_1898 <= icmp_ln100_fu_708_p2;
        mul_ln86_reg_2126 <= mul_ln86_fu_1576_p2;
        mul_v2_filter_load_10_cast_reg_1843[2 : 0] <= mul_v2_filter_load_10_cast_fu_651_p1[2 : 0];
        mul_v2_filter_load_11_cast_reg_1838[2 : 0] <= mul_v2_filter_load_11_cast_fu_647_p1[2 : 0];
        mul_v2_filter_load_12_cast_reg_1833[2 : 0] <= mul_v2_filter_load_12_cast_fu_643_p1[2 : 0];
        mul_v2_filter_load_13_cast_reg_1828[2 : 0] <= mul_v2_filter_load_13_cast_fu_639_p1[2 : 0];
        mul_v2_filter_load_14_cast_reg_1823[2 : 0] <= mul_v2_filter_load_14_cast_fu_635_p1[2 : 0];
        mul_v2_filter_load_15_cast_reg_1818[2 : 0] <= mul_v2_filter_load_15_cast_fu_631_p1[2 : 0];
        mul_v2_filter_load_16_cast_reg_1813[2 : 0] <= mul_v2_filter_load_16_cast_fu_627_p1[2 : 0];
        mul_v2_filter_load_17_cast_reg_1808[2 : 0] <= mul_v2_filter_load_17_cast_fu_623_p1[2 : 0];
        mul_v2_filter_load_1_cast_reg_1888[2 : 0] <= mul_v2_filter_load_1_cast_fu_687_p1[2 : 0];
        mul_v2_filter_load_2_cast_reg_1883[2 : 0] <= mul_v2_filter_load_2_cast_fu_683_p1[2 : 0];
        mul_v2_filter_load_3_cast_reg_1878[2 : 0] <= mul_v2_filter_load_3_cast_fu_679_p1[2 : 0];
        mul_v2_filter_load_4_cast_reg_1873[2 : 0] <= mul_v2_filter_load_4_cast_fu_675_p1[2 : 0];
        mul_v2_filter_load_5_cast_reg_1868[2 : 0] <= mul_v2_filter_load_5_cast_fu_671_p1[2 : 0];
        mul_v2_filter_load_6_cast_reg_1863[2 : 0] <= mul_v2_filter_load_6_cast_fu_667_p1[2 : 0];
        mul_v2_filter_load_7_cast_reg_1858[2 : 0] <= mul_v2_filter_load_7_cast_fu_663_p1[2 : 0];
        mul_v2_filter_load_8_cast_reg_1853[2 : 0] <= mul_v2_filter_load_8_cast_fu_659_p1[2 : 0];
        mul_v2_filter_load_9_cast_reg_1848[2 : 0] <= mul_v2_filter_load_9_cast_fu_655_p1[2 : 0];
        mul_v2_filter_load_cast_reg_1893[2 : 0] <= mul_v2_filter_load_cast_fu_691_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_11_read_reg_2141 <= m_axi_gmem_RDATA;
        mul_ln87_reg_2136 <= mul_ln87_fu_1580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_11_reg_2024 <= sext_ln88_fu_1261_p1;
        gmem_addr_12_reg_2030 <= sext_ln89_fu_1302_p1;
        gmem_addr_13_reg_2036 <= sext_ln90_fu_1343_p1;
        gmem_addr_14_reg_2042 <= sext_ln91_fu_1384_p1;
        gmem_addr_15_reg_2048 <= sext_ln92_fu_1425_p1;
        gmem_addr_16_reg_2054 <= sext_ln93_fu_1466_p1;
        gmem_addr_17_reg_2060 <= sext_ln94_fu_1507_p1;
        gmem_addr_3_read_reg_2019 <= m_axi_gmem_RDATA;
        mul_ln79_reg_2014 <= mul_ln79_fu_1226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_addr_12_read_reg_2151 <= m_axi_gmem_RDATA;
        mul_ln88_reg_2146 <= mul_ln88_fu_1584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        gmem_addr_14_read_reg_2171 <= m_axi_gmem_RDATA;
        mul_ln90_reg_2166 <= mul_ln90_fu_1607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        gmem_addr_15_read_reg_2181 <= m_axi_gmem_RDATA;
        mul_ln91_reg_2176 <= mul_ln91_fu_1611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        gmem_addr_16_read_reg_2191 <= m_axi_gmem_RDATA;
        mul_ln92_reg_2186 <= mul_ln92_fu_1615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_1_read_reg_1987 <= m_axi_gmem_RDATA;
        gmem_addr_9_reg_1992 <= sext_ln86_fu_1166_p1;
        mul_ln77_1_reg_1982 <= mul_ln77_1_fu_1131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_1_reg_1929 <= sext_ln78_fu_834_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_2_reg_1935 <= sext_ln79_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_3_reg_1941 <= sext_ln80_fu_916_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_4_reg_1947 <= sext_ln81_fu_957_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_5_read_reg_2081 <= m_axi_gmem_RDATA;
        mul_ln81_reg_2076 <= mul_ln81_fu_1526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_5_reg_1953 <= sext_ln82_fu_998_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_6_read_reg_2091 <= m_axi_gmem_RDATA;
        mul_ln82_reg_2086 <= mul_ln82_fu_1530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_6_reg_1959 <= sext_ln83_fu_1039_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_7_read_reg_2101 <= m_axi_gmem_RDATA;
        mul_ln83_reg_2096 <= mul_ln83_fu_1534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_7_reg_1965 <= sext_ln84_fu_1080_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        gmem_addr_8_reg_1976 <= sext_ln85_fu_1121_p1;
        gmem_addr_read_reg_1971 <= m_axi_gmem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_subdone) & (icmp_ln100_reg_1898 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_phi_ln32_load = 3'd0;
    end else begin
        ap_sig_allocacmp_phi_ln32_load = phi_ln32_fu_156;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17) & (icmp_ln100_reg_1898 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17) & (icmp_ln100_reg_1898 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_17_reg_2060;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_16_reg_2054;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_15_reg_2048;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_14_reg_2042;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_13_reg_2036;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_12_reg_2030;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_11_reg_2024;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_10_reg_2003;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_9_reg_1992;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_8_reg_1976;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_7_reg_1965;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_6_reg_1959;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_5_reg_1953;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_4_reg_1947;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_3_reg_1941;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_2_reg_1935;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_1929;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln100_reg_1898 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1902;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (icmp_ln100_reg_1898 == 1'd0)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln100_reg_1898 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001) & (icmp_ln100_reg_1898 == 1'd0)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln100_reg_1898 == 1'd1))) begin
        shiftreg_out_ap_vld = 1'b1;
    end else begin
        shiftreg_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage8)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_714_p2 = (ap_sig_allocacmp_phi_ln32_load + 3'd1);

assign add_ln77_1_fu_742_p2 = (add_ln77_fu_736_p2 + mul14);

assign add_ln77_2_fu_760_p2 = (zext_ln77_fu_756_p1 + I);

assign add_ln77_fu_736_p2 = (mul6_mid2 + mul_ln77_fu_730_p2);

assign add_ln78_1_fu_786_p2 = (mul6_mid2 + mul14);

assign add_ln78_2_fu_803_p2 = (add_ln78_4_reg_1908 + add_ln78);

assign add_ln78_3_fu_819_p2 = (zext_ln78_fu_815_p1 + I);

assign add_ln78_4_fu_792_p2 = (add_ln78_1_fu_786_p2 + mul_ln77_fu_730_p2);

assign add_ln79_1_fu_844_p2 = (add_ln78_4_reg_1908 + add_ln79);

assign add_ln79_2_fu_860_p2 = (zext_ln79_fu_856_p1 + I);

assign add_ln80_1_fu_885_p2 = (add_ln78_4_reg_1908 + add_ln80);

assign add_ln80_2_fu_901_p2 = (zext_ln80_fu_897_p1 + I);

assign add_ln81_1_fu_926_p2 = (add_ln78_4_reg_1908 + add_ln81);

assign add_ln81_2_fu_942_p2 = (zext_ln81_fu_938_p1 + I);

assign add_ln82_1_fu_967_p2 = (add_ln78_4_reg_1908 + add_ln82);

assign add_ln82_2_fu_983_p2 = (zext_ln82_fu_979_p1 + I);

assign add_ln83_1_fu_1008_p2 = (add_ln78_4_reg_1908 + add_ln83);

assign add_ln83_2_fu_1024_p2 = (zext_ln83_fu_1020_p1 + I);

assign add_ln84_1_fu_1049_p2 = (add_ln78_4_reg_1908 + add_ln84);

assign add_ln84_2_fu_1065_p2 = (zext_ln84_fu_1061_p1 + I);

assign add_ln85_1_fu_1090_p2 = (add_ln78_4_reg_1908 + add_ln85);

assign add_ln85_2_fu_1106_p2 = (zext_ln85_fu_1102_p1 + I);

assign add_ln86_1_fu_1135_p2 = (add_ln78_4_reg_1908 + add_ln86);

assign add_ln86_2_fu_1151_p2 = (zext_ln86_fu_1147_p1 + I);

assign add_ln87_1_fu_1180_p2 = (add_ln78_4_reg_1908 + add_ln87);

assign add_ln87_2_fu_1196_p2 = (zext_ln87_fu_1192_p1 + I);

assign add_ln88_1_fu_1230_p2 = (add_ln78_4_reg_1908 + add_ln88);

assign add_ln88_2_fu_1246_p2 = (zext_ln88_fu_1242_p1 + I);

assign add_ln89_1_fu_1271_p2 = (add_ln78_4_reg_1908 + add_ln89);

assign add_ln89_2_fu_1287_p2 = (zext_ln89_fu_1283_p1 + I);

assign add_ln90_1_fu_1312_p2 = (add_ln78_4_reg_1908 + add_ln90);

assign add_ln90_2_fu_1328_p2 = (zext_ln90_fu_1324_p1 + I);

assign add_ln91_1_fu_1353_p2 = (add_ln78_4_reg_1908 + add_ln91);

assign add_ln91_2_fu_1369_p2 = (zext_ln91_fu_1365_p1 + I);

assign add_ln92_1_fu_1394_p2 = (add_ln78_4_reg_1908 + add_ln92);

assign add_ln92_2_fu_1410_p2 = (zext_ln92_fu_1406_p1 + I);

assign add_ln93_10_fu_1565_p2 = (add_ln93_9_reg_2111 + add_ln93_8_fu_1560_p2);

assign add_ln93_11_fu_1570_p2 = (add_ln93_10_fu_1565_p2 + add_ln93_6_fu_1556_p2);

assign add_ln93_12_fu_1592_p2 = (mul_ln86_reg_2126 + mul_ln87_reg_2136);

assign add_ln93_13_fu_1596_p2 = (mul_ln88_reg_2146 + mul_ln89_fu_1588_p2);

assign add_ln93_14_fu_1601_p2 = (add_ln93_13_fu_1596_p2 + add_ln93_12_fu_1592_p2);

assign add_ln93_15_fu_1623_p2 = (mul_ln93_fu_1619_p2 + mul_ln91_reg_2176);

assign add_ln93_16_fu_1640_p2 = (mul_ln92_reg_2186 + mul_ln94_fu_1636_p2);

assign add_ln93_17_fu_1628_p2 = (add_ln93_15_fu_1623_p2 + mul_ln90_reg_2166);

assign add_ln93_18_fu_1645_p2 = (add_ln93_17_reg_2201 + add_ln93_16_fu_1640_p2);

assign add_ln93_19_fu_1650_p2 = (add_ln93_18_fu_1645_p2 + add_ln93_14_reg_2161);

assign add_ln93_1_fu_1435_p2 = (add_ln78_4_reg_1908 + add_ln93);

assign add_ln93_2_fu_1451_p2 = (zext_ln93_fu_1447_p1 + I);

assign add_ln93_3_fu_1221_p2 = (mul_ln78_fu_1176_p2 + mul_ln77_1_reg_1982);

assign add_ln93_4_fu_1655_p2 = (add_ln93_11_reg_2121 + add_ln93_19_fu_1650_p2);

assign add_ln93_5_fu_1521_p2 = (mul_ln79_reg_2014 + mul_ln80_fu_1517_p2);

assign add_ln93_6_fu_1556_p2 = (add_ln93_5_reg_2071 + add_ln93_3_reg_2009);

assign add_ln93_7_fu_1542_p2 = (mul_ln84_fu_1538_p2 + mul_ln82_reg_2086);

assign add_ln93_8_fu_1560_p2 = (mul_ln83_reg_2096 + mul_ln85_fu_1552_p2);

assign add_ln93_9_fu_1547_p2 = (add_ln93_7_fu_1542_p2 + mul_ln81_reg_2076);

assign add_ln94_1_fu_1476_p2 = (add_ln78_4_reg_1908 + add_ln94);

assign add_ln94_2_fu_1492_p2 = (zext_ln94_fu_1488_p1 + I);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((m_axi_gmem_RVALID == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((m_axi_gmem_RVALID == 1'b0) | (m_axi_gmem_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage16_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage16_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage17_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage17_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state18_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state9_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0))));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state14_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state15_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage14_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state16_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state17_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage16_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state18_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage17_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state19_pp0_stage0_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage1_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state21_pp0_stage2_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state22_pp0_stage3_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state23_pp0_stage4_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state24_pp0_stage5_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state25_pp0_stage6_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state26_pp0_stage7_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state27_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

always @ (*) begin
    ap_block_state9_pp0_stage8_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln100_reg_1898 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage8;

assign icmp_ln100_fu_708_p2 = ((ap_sig_allocacmp_phi_ln32_load == 3'd6) ? 1'b1 : 1'b0);

assign lshr_ln_fu_1660_p4 = {{shiftreg_fu_152[191:32]}};

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_ln77_1_fu_1131_p0 = mul_v2_filter_load_cast_reg_1893;

assign mul_ln77_fu_730_p0 = (zext_ln32_fu_720_p1 + global_id_base_x);

assign mul_ln78_fu_1176_p0 = mul_v2_filter_load_1_cast_reg_1888;

assign mul_ln79_fu_1226_p0 = mul_v2_filter_load_2_cast_reg_1883;

assign mul_ln80_fu_1517_p0 = mul_v2_filter_load_3_cast_reg_1878;

assign mul_ln81_fu_1526_p0 = mul_v2_filter_load_4_cast_reg_1873;

assign mul_ln82_fu_1530_p0 = mul_v2_filter_load_5_cast_reg_1868;

assign mul_ln83_fu_1534_p0 = mul_v2_filter_load_6_cast_reg_1863;

assign mul_ln84_fu_1538_p0 = mul_v2_filter_load_7_cast_reg_1858;

assign mul_ln85_fu_1552_p0 = mul_v2_filter_load_8_cast_reg_1853;

assign mul_ln86_fu_1576_p0 = mul_v2_filter_load_9_cast_reg_1848;

assign mul_ln87_fu_1580_p0 = mul_v2_filter_load_10_cast_reg_1843;

assign mul_ln88_fu_1584_p0 = mul_v2_filter_load_11_cast_reg_1838;

assign mul_ln89_fu_1588_p0 = mul_v2_filter_load_12_cast_reg_1833;

assign mul_ln90_fu_1607_p0 = mul_v2_filter_load_13_cast_reg_1828;

assign mul_ln91_fu_1611_p0 = mul_v2_filter_load_14_cast_reg_1823;

assign mul_ln92_fu_1615_p0 = mul_v2_filter_load_15_cast_reg_1818;

assign mul_ln93_fu_1619_p0 = mul_v2_filter_load_16_cast_reg_1813;

assign mul_ln94_fu_1636_p0 = mul_v2_filter_load_17_cast_reg_1808;

assign mul_v2_filter_load_10_cast_fu_651_p1 = mul_v2_filter_load_10;

assign mul_v2_filter_load_11_cast_fu_647_p1 = mul_v2_filter_load_11;

assign mul_v2_filter_load_12_cast_fu_643_p1 = mul_v2_filter_load_12;

assign mul_v2_filter_load_13_cast_fu_639_p1 = mul_v2_filter_load_13;

assign mul_v2_filter_load_14_cast_fu_635_p1 = mul_v2_filter_load_14;

assign mul_v2_filter_load_15_cast_fu_631_p1 = mul_v2_filter_load_15;

assign mul_v2_filter_load_16_cast_fu_627_p1 = mul_v2_filter_load_16;

assign mul_v2_filter_load_17_cast_fu_623_p1 = mul_v2_filter_load_17;

assign mul_v2_filter_load_1_cast_fu_687_p1 = mul_v2_filter_load_1;

assign mul_v2_filter_load_2_cast_fu_683_p1 = mul_v2_filter_load_2;

assign mul_v2_filter_load_3_cast_fu_679_p1 = mul_v2_filter_load_3;

assign mul_v2_filter_load_4_cast_fu_675_p1 = mul_v2_filter_load_4;

assign mul_v2_filter_load_5_cast_fu_671_p1 = mul_v2_filter_load_5;

assign mul_v2_filter_load_6_cast_fu_667_p1 = mul_v2_filter_load_6;

assign mul_v2_filter_load_7_cast_fu_663_p1 = mul_v2_filter_load_7;

assign mul_v2_filter_load_8_cast_fu_659_p1 = mul_v2_filter_load_8;

assign mul_v2_filter_load_9_cast_fu_655_p1 = mul_v2_filter_load_9;

assign mul_v2_filter_load_cast_fu_691_p1 = mul_v2_filter_load;

assign or_ln_fu_1670_p3 = {{add_ln93_4_fu_1655_p2}, {lshr_ln_fu_1660_p4}};

assign sext_ln77_fu_776_p1 = $signed(trunc_ln2_fu_766_p4);

assign sext_ln78_fu_834_p1 = $signed(trunc_ln3_fu_824_p4);

assign sext_ln79_fu_875_p1 = $signed(trunc_ln4_fu_865_p4);

assign sext_ln80_fu_916_p1 = $signed(trunc_ln5_fu_906_p4);

assign sext_ln81_fu_957_p1 = $signed(trunc_ln6_fu_947_p4);

assign sext_ln82_fu_998_p1 = $signed(trunc_ln7_fu_988_p4);

assign sext_ln83_fu_1039_p1 = $signed(trunc_ln8_fu_1029_p4);

assign sext_ln84_fu_1080_p1 = $signed(trunc_ln9_fu_1070_p4);

assign sext_ln85_fu_1121_p1 = $signed(trunc_ln_fu_1111_p4);

assign sext_ln86_fu_1166_p1 = $signed(trunc_ln1_fu_1156_p4);

assign sext_ln87_fu_1211_p1 = $signed(trunc_ln10_fu_1201_p4);

assign sext_ln88_fu_1261_p1 = $signed(trunc_ln11_fu_1251_p4);

assign sext_ln89_fu_1302_p1 = $signed(trunc_ln12_fu_1292_p4);

assign sext_ln90_fu_1343_p1 = $signed(trunc_ln13_fu_1333_p4);

assign sext_ln91_fu_1384_p1 = $signed(trunc_ln14_fu_1374_p4);

assign sext_ln92_fu_1425_p1 = $signed(trunc_ln15_fu_1415_p4);

assign sext_ln93_fu_1466_p1 = $signed(trunc_ln16_fu_1456_p4);

assign sext_ln94_fu_1507_p1 = $signed(trunc_ln17_fu_1497_p4);

assign shiftreg_out = shiftreg_fu_152;

assign shl_ln10_fu_1234_p3 = {{add_ln88_1_fu_1230_p2}, {2'd0}};

assign shl_ln11_fu_1275_p3 = {{add_ln89_1_fu_1271_p2}, {2'd0}};

assign shl_ln12_fu_1316_p3 = {{add_ln90_1_fu_1312_p2}, {2'd0}};

assign shl_ln13_fu_1357_p3 = {{add_ln91_1_fu_1353_p2}, {2'd0}};

assign shl_ln14_fu_1398_p3 = {{add_ln92_1_fu_1394_p2}, {2'd0}};

assign shl_ln15_fu_1439_p3 = {{add_ln93_1_fu_1435_p2}, {2'd0}};

assign shl_ln16_fu_1480_p3 = {{add_ln94_1_fu_1476_p2}, {2'd0}};

assign shl_ln1_fu_848_p3 = {{add_ln79_1_fu_844_p2}, {2'd0}};

assign shl_ln2_fu_889_p3 = {{add_ln80_1_fu_885_p2}, {2'd0}};

assign shl_ln3_fu_930_p3 = {{add_ln81_1_fu_926_p2}, {2'd0}};

assign shl_ln4_fu_971_p3 = {{add_ln82_1_fu_967_p2}, {2'd0}};

assign shl_ln5_fu_1012_p3 = {{add_ln83_1_fu_1008_p2}, {2'd0}};

assign shl_ln6_fu_1053_p3 = {{add_ln84_1_fu_1049_p2}, {2'd0}};

assign shl_ln77_1_fu_748_p3 = {{add_ln77_1_fu_742_p2}, {2'd0}};

assign shl_ln7_fu_1094_p3 = {{add_ln85_1_fu_1090_p2}, {2'd0}};

assign shl_ln8_fu_1139_p3 = {{add_ln86_1_fu_1135_p2}, {2'd0}};

assign shl_ln9_fu_1184_p3 = {{add_ln87_1_fu_1180_p2}, {2'd0}};

assign shl_ln_fu_807_p3 = {{add_ln78_2_fu_803_p2}, {2'd0}};

assign trunc_ln10_fu_1201_p4 = {{add_ln87_2_fu_1196_p2[63:2]}};

assign trunc_ln11_fu_1251_p4 = {{add_ln88_2_fu_1246_p2[63:2]}};

assign trunc_ln12_fu_1292_p4 = {{add_ln89_2_fu_1287_p2[63:2]}};

assign trunc_ln13_fu_1333_p4 = {{add_ln90_2_fu_1328_p2[63:2]}};

assign trunc_ln14_fu_1374_p4 = {{add_ln91_2_fu_1369_p2[63:2]}};

assign trunc_ln15_fu_1415_p4 = {{add_ln92_2_fu_1410_p2[63:2]}};

assign trunc_ln16_fu_1456_p4 = {{add_ln93_2_fu_1451_p2[63:2]}};

assign trunc_ln17_fu_1497_p4 = {{add_ln94_2_fu_1492_p2[63:2]}};

assign trunc_ln1_fu_1156_p4 = {{add_ln86_2_fu_1151_p2[63:2]}};

assign trunc_ln2_fu_766_p4 = {{add_ln77_2_fu_760_p2[63:2]}};

assign trunc_ln3_fu_824_p4 = {{add_ln78_3_fu_819_p2[63:2]}};

assign trunc_ln4_fu_865_p4 = {{add_ln79_2_fu_860_p2[63:2]}};

assign trunc_ln5_fu_906_p4 = {{add_ln80_2_fu_901_p2[63:2]}};

assign trunc_ln6_fu_947_p4 = {{add_ln81_2_fu_942_p2[63:2]}};

assign trunc_ln7_fu_988_p4 = {{add_ln82_2_fu_983_p2[63:2]}};

assign trunc_ln8_fu_1029_p4 = {{add_ln83_2_fu_1024_p2[63:2]}};

assign trunc_ln9_fu_1070_p4 = {{add_ln84_2_fu_1065_p2[63:2]}};

assign trunc_ln_fu_1111_p4 = {{add_ln85_2_fu_1106_p2[63:2]}};

assign zext_ln32_fu_720_p1 = ap_sig_allocacmp_phi_ln32_load;

assign zext_ln77_fu_756_p1 = shl_ln77_1_fu_748_p3;

assign zext_ln78_fu_815_p1 = shl_ln_fu_807_p3;

assign zext_ln79_fu_856_p1 = shl_ln1_fu_848_p3;

assign zext_ln80_fu_897_p1 = shl_ln2_fu_889_p3;

assign zext_ln81_fu_938_p1 = shl_ln3_fu_930_p3;

assign zext_ln82_fu_979_p1 = shl_ln4_fu_971_p3;

assign zext_ln83_fu_1020_p1 = shl_ln5_fu_1012_p3;

assign zext_ln84_fu_1061_p1 = shl_ln6_fu_1053_p3;

assign zext_ln85_fu_1102_p1 = shl_ln7_fu_1094_p3;

assign zext_ln86_fu_1147_p1 = shl_ln8_fu_1139_p3;

assign zext_ln87_fu_1192_p1 = shl_ln9_fu_1184_p3;

assign zext_ln88_fu_1242_p1 = shl_ln10_fu_1234_p3;

assign zext_ln89_fu_1283_p1 = shl_ln11_fu_1275_p3;

assign zext_ln90_fu_1324_p1 = shl_ln12_fu_1316_p3;

assign zext_ln91_fu_1365_p1 = shl_ln13_fu_1357_p3;

assign zext_ln92_fu_1406_p1 = shl_ln14_fu_1398_p3;

assign zext_ln93_fu_1447_p1 = shl_ln15_fu_1439_p3;

assign zext_ln94_fu_1488_p1 = shl_ln16_fu_1480_p3;

always @ (posedge ap_clk) begin
    mul_v2_filter_load_17_cast_reg_1808[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_16_cast_reg_1813[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_15_cast_reg_1818[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_14_cast_reg_1823[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_13_cast_reg_1828[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_12_cast_reg_1833[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_11_cast_reg_1838[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_10_cast_reg_1843[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_9_cast_reg_1848[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_8_cast_reg_1853[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_7_cast_reg_1858[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_6_cast_reg_1863[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_5_cast_reg_1868[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_4_cast_reg_1873[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_3_cast_reg_1878[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_2_cast_reg_1883[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_1_cast_reg_1888[31:3] <= 29'b00000000000000000000000000000;
    mul_v2_filter_load_cast_reg_1893[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X
