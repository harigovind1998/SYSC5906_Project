// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
// Version: 2021.1.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul7,
        mul6_mid2,
        hi_cast,
        global_id_base_x_cast,
        wi_cast,
        mul14,
        mul21_mid2,
        shiftreg_out,
        shiftreg_out_ap_vld,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] mul7;
input  [7:0] mul6_mid2;
input  [7:0] hi_cast;
input  [7:0] global_id_base_x_cast;
input  [7:0] wi_cast;
input  [7:0] mul14;
input  [5:0] mul21_mid2;
output  [191:0] shiftreg_out;
output   shiftreg_out_ap_vld;
output  [31:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg shiftreg_out_ap_vld;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln87_fu_205_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] mul_v2_I_address0;
reg    mul_v2_I_ce0;
wire   [31:0] mul_v2_I_q0;
wire   [5:0] mul_v2_filter_address0;
reg    mul_v2_filter_ce0;
wire   [31:0] mul_v2_filter_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln87_reg_482;
reg   [0:0] icmp_ln87_reg_482_pp0_iter1_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter2_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter3_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter4_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter5_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter6_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter7_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter8_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter9_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter10_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter11_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter12_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter13_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter14_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter15_reg;
reg   [0:0] icmp_ln87_reg_482_pp0_iter16_reg;
wire   [0:0] icmp_ln80_fu_220_p2;
reg   [0:0] icmp_ln80_reg_486;
reg   [0:0] icmp_ln80_reg_486_pp0_iter1_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter4_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter5_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter6_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter7_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter8_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter9_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter10_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter11_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter12_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter13_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter14_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter15_reg;
reg   [0:0] icmp_ln80_reg_486_pp0_iter16_reg;
wire   [31:0] j_cast_fu_234_p1;
wire   [2:0] trunc_ln81_1_fu_281_p1;
reg   [2:0] trunc_ln81_1_reg_503;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter2_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter3_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter4_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter5_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter6_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter7_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter8_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter9_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter10_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter11_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter12_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter13_reg;
reg   [2:0] trunc_ln81_1_reg_503_pp0_iter14_reg;
wire   [4:0] grp_fu_244_p2;
reg   [4:0] urem_ln81_reg_508;
reg   [4:0] urem_ln81_reg_508_pp0_iter9_reg;
reg   [4:0] urem_ln81_reg_508_pp0_iter10_reg;
reg   [4:0] urem_ln81_reg_508_pp0_iter11_reg;
reg   [4:0] urem_ln81_reg_508_pp0_iter12_reg;
reg   [4:0] urem_ln81_reg_508_pp0_iter13_reg;
reg    ap_condition_exit_pp0_iter17_stage0;
wire   [63:0] zext_ln81_1_fu_260_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln81_fu_330_p1;
reg   [31:0] value_1_fu_80;
wire   [31:0] grp_fu_407_p3;
reg   [31:0] ap_sig_allocacmp_value_1_load_1;
reg   [4:0] j_fu_84;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
wire   [4:0] j_1_fu_265_p2;
reg   [191:0] shiftreg_fu_88;
wire   [191:0] select_ln87_2_fu_371_p3;
reg   [2:0] phi_ln44_fu_92;
wire   [2:0] select_ln87_1_fu_302_p3;
reg   [6:0] indvar_flatten_fu_96;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [6:0] add_ln87_fu_211_p2;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] select_ln87_fu_226_p3;
wire   [4:0] grp_fu_238_p0;
wire   [4:0] grp_fu_244_p0;
wire   [5:0] zext_ln81_3_fu_250_p1;
wire   [5:0] add_ln81_2_fu_254_p2;
wire   [4:0] grp_fu_238_p2;
wire   [4:0] trunc_ln81_fu_285_p1;
wire   [2:0] add_ln87_1_fu_296_p2;
wire   [4:0] empty_33_fu_318_p1;
wire  signed [7:0] add_ln81_1_fu_325_p0;
wire   [7:0] grp_fu_398_p4;
wire   [7:0] urem_ln81_cast_cast_fu_321_p1;
(* use_dsp48 = "no" *) wire   [7:0] add_ln81_1_fu_325_p2;
wire   [2:0] empty_34_fu_335_p1;
wire   [159:0] lshr_ln82_dup_fu_350_p4;
wire   [191:0] or_ln82_dup_fu_363_p3;
wire   [4:0] grp_fu_391_p0;
wire   [7:0] grp_fu_391_p4;
wire   [2:0] grp_fu_398_p1;
wire   [2:0] grp_fu_407_p0;
wire   [2:0] grp_fu_407_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] grp_fu_391_p00;
wire   [7:0] grp_fu_398_p10;
wire   [5:0] grp_fu_407_p00;
wire   [5:0] grp_fu_407_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_I #(
    .DataWidth( 32 ),
    .AddressRange( 152 ),
    .AddressWidth( 8 ))
mul_v2_I_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul_v2_I_address0),
    .ce0(mul_v2_I_ce0),
    .q0(mul_v2_I_q0)
);

mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3_mul_v2_filter #(
    .DataWidth( 32 ),
    .AddressRange( 36 ),
    .AddressWidth( 6 ))
mul_v2_filter_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mul_v2_filter_address0),
    .ce0(mul_v2_filter_ce0),
    .q0(mul_v2_filter_q0)
);

mul_v2_udiv_5ns_32ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 5 ))
udiv_5ns_32ns_5_9_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(mul7),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

mul_v2_urem_5ns_32ns_5_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 5 ))
urem_5ns_32ns_5_9_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_244_p0),
    .din1(mul7),
    .ce(1'b1),
    .dout(grp_fu_244_p2)
);

mul_v2_ama_addmuladd_5ns_8ns_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ama_addmuladd_5ns_8ns_8s_8ns_8_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_391_p0),
    .din1(mul6_mid2),
    .din2(hi_cast),
    .din3(global_id_base_x_cast),
    .ce(1'b1),
    .dout(grp_fu_391_p4)
);

mul_v2_ama_addmuladd_8ns_3ns_8s_8ns_8_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
ama_addmuladd_8ns_3ns_8s_8ns_8_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_391_p4),
    .din1(grp_fu_398_p1),
    .din2(wi_cast),
    .din3(mul14),
    .ce(1'b1),
    .dout(grp_fu_398_p4)
);

mul_v2_mac_muladd_3ns_3ns_32ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mac_muladd_3ns_3ns_32ns_32_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_407_p0),
    .din1(grp_fu_407_p1),
    .din2(ap_sig_allocacmp_value_1_load_1),
    .ce(1'b1),
    .dout(grp_fu_407_p3)
);

mul_v2_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter17_stage0)) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln87_fu_205_p2 == 1'd0))) begin
            indvar_flatten_fu_96 <= add_ln87_fu_211_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln87_fu_205_p2 == 1'd0))) begin
            j_fu_84 <= j_1_fu_265_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_ln44_fu_92 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter11 == 1'b1) & (icmp_ln87_reg_482_pp0_iter10_reg == 1'd0))) begin
            phi_ln44_fu_92 <= select_ln87_1_fu_302_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            shiftreg_fu_88 <= 192'd0;
        end else if (((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln87_reg_482_pp0_iter16_reg == 1'd0))) begin
            shiftreg_fu_88 <= select_ln87_2_fu_371_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln80_reg_486_pp0_iter10_reg <= icmp_ln80_reg_486_pp0_iter9_reg;
        icmp_ln80_reg_486_pp0_iter11_reg <= icmp_ln80_reg_486_pp0_iter10_reg;
        icmp_ln80_reg_486_pp0_iter12_reg <= icmp_ln80_reg_486_pp0_iter11_reg;
        icmp_ln80_reg_486_pp0_iter13_reg <= icmp_ln80_reg_486_pp0_iter12_reg;
        icmp_ln80_reg_486_pp0_iter14_reg <= icmp_ln80_reg_486_pp0_iter13_reg;
        icmp_ln80_reg_486_pp0_iter15_reg <= icmp_ln80_reg_486_pp0_iter14_reg;
        icmp_ln80_reg_486_pp0_iter16_reg <= icmp_ln80_reg_486_pp0_iter15_reg;
        icmp_ln80_reg_486_pp0_iter2_reg <= icmp_ln80_reg_486_pp0_iter1_reg;
        icmp_ln80_reg_486_pp0_iter3_reg <= icmp_ln80_reg_486_pp0_iter2_reg;
        icmp_ln80_reg_486_pp0_iter4_reg <= icmp_ln80_reg_486_pp0_iter3_reg;
        icmp_ln80_reg_486_pp0_iter5_reg <= icmp_ln80_reg_486_pp0_iter4_reg;
        icmp_ln80_reg_486_pp0_iter6_reg <= icmp_ln80_reg_486_pp0_iter5_reg;
        icmp_ln80_reg_486_pp0_iter7_reg <= icmp_ln80_reg_486_pp0_iter6_reg;
        icmp_ln80_reg_486_pp0_iter8_reg <= icmp_ln80_reg_486_pp0_iter7_reg;
        icmp_ln80_reg_486_pp0_iter9_reg <= icmp_ln80_reg_486_pp0_iter8_reg;
        icmp_ln87_reg_482_pp0_iter10_reg <= icmp_ln87_reg_482_pp0_iter9_reg;
        icmp_ln87_reg_482_pp0_iter11_reg <= icmp_ln87_reg_482_pp0_iter10_reg;
        icmp_ln87_reg_482_pp0_iter12_reg <= icmp_ln87_reg_482_pp0_iter11_reg;
        icmp_ln87_reg_482_pp0_iter13_reg <= icmp_ln87_reg_482_pp0_iter12_reg;
        icmp_ln87_reg_482_pp0_iter14_reg <= icmp_ln87_reg_482_pp0_iter13_reg;
        icmp_ln87_reg_482_pp0_iter15_reg <= icmp_ln87_reg_482_pp0_iter14_reg;
        icmp_ln87_reg_482_pp0_iter16_reg <= icmp_ln87_reg_482_pp0_iter15_reg;
        icmp_ln87_reg_482_pp0_iter2_reg <= icmp_ln87_reg_482_pp0_iter1_reg;
        icmp_ln87_reg_482_pp0_iter3_reg <= icmp_ln87_reg_482_pp0_iter2_reg;
        icmp_ln87_reg_482_pp0_iter4_reg <= icmp_ln87_reg_482_pp0_iter3_reg;
        icmp_ln87_reg_482_pp0_iter5_reg <= icmp_ln87_reg_482_pp0_iter4_reg;
        icmp_ln87_reg_482_pp0_iter6_reg <= icmp_ln87_reg_482_pp0_iter5_reg;
        icmp_ln87_reg_482_pp0_iter7_reg <= icmp_ln87_reg_482_pp0_iter6_reg;
        icmp_ln87_reg_482_pp0_iter8_reg <= icmp_ln87_reg_482_pp0_iter7_reg;
        icmp_ln87_reg_482_pp0_iter9_reg <= icmp_ln87_reg_482_pp0_iter8_reg;
        trunc_ln81_1_reg_503_pp0_iter10_reg <= trunc_ln81_1_reg_503_pp0_iter9_reg;
        trunc_ln81_1_reg_503_pp0_iter11_reg <= trunc_ln81_1_reg_503_pp0_iter10_reg;
        trunc_ln81_1_reg_503_pp0_iter12_reg <= trunc_ln81_1_reg_503_pp0_iter11_reg;
        trunc_ln81_1_reg_503_pp0_iter13_reg <= trunc_ln81_1_reg_503_pp0_iter12_reg;
        trunc_ln81_1_reg_503_pp0_iter14_reg <= trunc_ln81_1_reg_503_pp0_iter13_reg;
        trunc_ln81_1_reg_503_pp0_iter2_reg <= trunc_ln81_1_reg_503;
        trunc_ln81_1_reg_503_pp0_iter3_reg <= trunc_ln81_1_reg_503_pp0_iter2_reg;
        trunc_ln81_1_reg_503_pp0_iter4_reg <= trunc_ln81_1_reg_503_pp0_iter3_reg;
        trunc_ln81_1_reg_503_pp0_iter5_reg <= trunc_ln81_1_reg_503_pp0_iter4_reg;
        trunc_ln81_1_reg_503_pp0_iter6_reg <= trunc_ln81_1_reg_503_pp0_iter5_reg;
        trunc_ln81_1_reg_503_pp0_iter7_reg <= trunc_ln81_1_reg_503_pp0_iter6_reg;
        trunc_ln81_1_reg_503_pp0_iter8_reg <= trunc_ln81_1_reg_503_pp0_iter7_reg;
        trunc_ln81_1_reg_503_pp0_iter9_reg <= trunc_ln81_1_reg_503_pp0_iter8_reg;
        urem_ln81_reg_508_pp0_iter10_reg <= urem_ln81_reg_508_pp0_iter9_reg;
        urem_ln81_reg_508_pp0_iter11_reg <= urem_ln81_reg_508_pp0_iter10_reg;
        urem_ln81_reg_508_pp0_iter12_reg <= urem_ln81_reg_508_pp0_iter11_reg;
        urem_ln81_reg_508_pp0_iter13_reg <= urem_ln81_reg_508_pp0_iter12_reg;
        urem_ln81_reg_508_pp0_iter9_reg <= urem_ln81_reg_508;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln80_reg_486_pp0_iter1_reg <= icmp_ln80_reg_486;
        icmp_ln87_reg_482 <= icmp_ln87_fu_205_p2;
        icmp_ln87_reg_482_pp0_iter1_reg <= icmp_ln87_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln87_fu_205_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln80_reg_486 <= icmp_ln80_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_482 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln81_1_reg_503 <= trunc_ln81_1_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_reg_482_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        urem_ln81_reg_508 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        value_1_fu_80 <= grp_fu_407_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln87_fu_205_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (icmp_ln87_reg_482_pp0_iter16_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter17_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter17_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_84;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_value_1_load_1 = grp_fu_407_p3;
    end else begin
        ap_sig_allocacmp_value_1_load_1 = value_1_fu_80;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_v2_I_ce0 = 1'b1;
    end else begin
        mul_v2_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_v2_filter_ce0 = 1'b1;
    end else begin
        mul_v2_filter_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_482_pp0_iter16_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln87_reg_482_pp0_iter16_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_out_ap_vld = 1'b1;
    end else begin
        shiftreg_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln81_1_fu_325_p0 = grp_fu_398_p4;

assign add_ln81_1_fu_325_p2 = ($signed(add_ln81_1_fu_325_p0) + $signed(urem_ln81_cast_cast_fu_321_p1));

assign add_ln81_2_fu_254_p2 = (zext_ln81_3_fu_250_p1 + mul21_mid2);

assign add_ln87_1_fu_296_p2 = (phi_ln44_fu_92 + 3'd1);

assign add_ln87_fu_211_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_33_fu_318_p1 = urem_ln81_reg_508_pp0_iter13_reg[4:0];

assign empty_34_fu_335_p1 = mul_v2_I_q0[2:0];

assign grp_fu_238_p0 = j_cast_fu_234_p1;

assign grp_fu_244_p0 = j_cast_fu_234_p1;

assign grp_fu_391_p0 = grp_fu_391_p00;

assign grp_fu_391_p00 = trunc_ln81_fu_285_p1;

assign grp_fu_398_p1 = grp_fu_398_p10;

assign grp_fu_398_p10 = select_ln87_1_fu_302_p3;

assign grp_fu_407_p0 = grp_fu_407_p00;

assign grp_fu_407_p00 = trunc_ln81_1_reg_503_pp0_iter14_reg;

assign grp_fu_407_p1 = grp_fu_407_p10;

assign grp_fu_407_p10 = empty_34_fu_335_p1;

assign icmp_ln80_fu_220_p2 = ((ap_sig_allocacmp_j_load == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_205_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd108) ? 1'b1 : 1'b0);

assign j_1_fu_265_p2 = (select_ln87_fu_226_p3 + 5'd1);

assign j_cast_fu_234_p1 = select_ln87_fu_226_p3;

assign lshr_ln82_dup_fu_350_p4 = {{shiftreg_fu_88[191:32]}};

assign mul_v2_I_address0 = zext_ln81_fu_330_p1;

assign mul_v2_filter_address0 = zext_ln81_1_fu_260_p1;

assign or_ln82_dup_fu_363_p3 = {{ap_sig_allocacmp_value_1_load_1}, {lshr_ln82_dup_fu_350_p4}};

assign p_out = value_1_fu_80;

assign select_ln87_1_fu_302_p3 = ((icmp_ln80_reg_486_pp0_iter10_reg[0:0] == 1'b1) ? add_ln87_1_fu_296_p2 : phi_ln44_fu_92);

assign select_ln87_2_fu_371_p3 = ((icmp_ln80_reg_486_pp0_iter16_reg[0:0] == 1'b1) ? or_ln82_dup_fu_363_p3 : shiftreg_fu_88);

assign select_ln87_fu_226_p3 = ((icmp_ln80_fu_220_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign shiftreg_out = shiftreg_fu_88;

assign trunc_ln81_1_fu_281_p1 = mul_v2_filter_q0[2:0];

assign trunc_ln81_fu_285_p1 = grp_fu_238_p2[4:0];

assign urem_ln81_cast_cast_fu_321_p1 = empty_33_fu_318_p1;

assign zext_ln81_1_fu_260_p1 = add_ln81_2_fu_254_p2;

assign zext_ln81_3_fu_250_p1 = select_ln87_fu_226_p3;

assign zext_ln81_fu_330_p1 = add_ln81_1_fu_325_p2;

endmodule //mul_v2_mul_v2_Pipeline_XCL_WG_DIM_X_mul_v2_label3
