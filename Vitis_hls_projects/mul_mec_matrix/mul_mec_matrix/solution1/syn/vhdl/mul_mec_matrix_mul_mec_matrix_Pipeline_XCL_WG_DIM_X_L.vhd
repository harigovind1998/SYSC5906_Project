-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_mec_matrix_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    bound : IN STD_LOGIC_VECTOR (34 downto 0);
    mul_ln3_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul : IN STD_LOGIC_VECTOR (31 downto 0);
    mul8_mid2 : IN STD_LOGIC_VECTOR (31 downto 0);
    hi : IN STD_LOGIC_VECTOR (31 downto 0);
    global_id_base_x : IN STD_LOGIC_VECTOR (31 downto 0);
    wi : IN STD_LOGIC_VECTOR (31 downto 0);
    mul16 : IN STD_LOGIC_VECTOR (31 downto 0);
    I : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln3_1_mid2 : IN STD_LOGIC_VECTOR (61 downto 0);
    shiftreg_out : OUT STD_LOGIC_VECTOR (191 downto 0);
    shiftreg_out_ap_vld : OUT STD_LOGIC;
    value_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    value_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mul_mec_matrix_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv35_1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal icmp_ln27_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state38_io : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter21 : BOOLEAN;
    signal icmp_ln27_reg_554_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state46_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln27_reg_554_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state39_io : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln3_1_mid2_cast_fu_212_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln3_1_mid2_cast_reg_549 : STD_LOGIC_VECTOR (62 downto 0);
    signal icmp_ln27_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_554_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_558_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_572 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal gmem_addr_1_reg_572_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_572_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_load_1_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_condition_exit_pp0_iter22_stage1 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln23_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln22_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal value_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_1_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shiftreg_fu_102 : STD_LOGIC_VECTOR (191 downto 0);
    signal select_ln27_3_fu_440_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal phi_ln3_fu_106 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_2_fu_326_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_110 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln27_fu_250_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal indvar_cast_fu_295_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln23_fu_302_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln27_1_fu_320_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_342_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln27_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_1_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_378_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln22_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_2_fu_390_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_395_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal lshr_ln26_dup_fu_419_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal or_ln26_dup_fu_432_p3 : STD_LOGIC_VECTOR (191 downto 0);
    signal mul_ln24_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_1_fu_452_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_298_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to23 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_629 : BOOLEAN;
    signal ap_condition_631 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component mul_mec_matrix_udiv_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_urem_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    udiv_32ns_32ns_32_36_1_U1 : component mul_mec_matrix_udiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln27_fu_265_p3,
        din1 => mul,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    urem_32ns_32ns_32_36_1_U2 : component mul_mec_matrix_urem_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln27_reg_565,
        din1 => mul,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p2);

    mul_32s_32s_32_1_1_U3 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp4_fu_342_p0,
        din1 => hi,
        dout => tmp4_fu_342_p2);

    mul_32s_32s_32_1_1_U4 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp2_reg_578,
        din1 => wi,
        dout => tmp5_fu_363_p2);

    mul_32s_32s_32_1_1_U5 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => k_reg_599,
        din1 => i_reg_589,
        dout => mul_ln24_fu_458_p2);

    flow_control_loop_pipe_sequential_init_U : component mul_mec_matrix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage1) or ((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln27_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_110 <= add_ln27_fu_250_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_110 <= ap_const_lv35_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln27_fu_244_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_98 <= j_1_fu_279_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_98 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    phi_ln3_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                phi_ln3_fu_106 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                phi_ln3_fu_106 <= select_ln27_2_fu_326_p3;
            end if; 
        end if;
    end process;

    shiftreg_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg_fu_102 <= ap_const_lv192_lc_1;
            elsif (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0))) then 
                shiftreg_fu_102 <= select_ln27_3_fu_440_p3;
            end if; 
        end if;
    end process;

    value_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    value_fu_94 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter23 = ap_const_logic_1)) then 
                    value_fu_94 <= value_1_fu_462_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                gmem_addr_1_reg_572_pp0_iter10_reg <= gmem_addr_1_reg_572_pp0_iter9_reg;
                gmem_addr_1_reg_572_pp0_iter11_reg <= gmem_addr_1_reg_572_pp0_iter10_reg;
                gmem_addr_1_reg_572_pp0_iter12_reg <= gmem_addr_1_reg_572_pp0_iter11_reg;
                gmem_addr_1_reg_572_pp0_iter13_reg <= gmem_addr_1_reg_572_pp0_iter12_reg;
                gmem_addr_1_reg_572_pp0_iter14_reg <= gmem_addr_1_reg_572_pp0_iter13_reg;
                gmem_addr_1_reg_572_pp0_iter15_reg <= gmem_addr_1_reg_572_pp0_iter14_reg;
                gmem_addr_1_reg_572_pp0_iter16_reg <= gmem_addr_1_reg_572_pp0_iter15_reg;
                gmem_addr_1_reg_572_pp0_iter17_reg <= gmem_addr_1_reg_572_pp0_iter16_reg;
                gmem_addr_1_reg_572_pp0_iter18_reg <= gmem_addr_1_reg_572_pp0_iter17_reg;
                gmem_addr_1_reg_572_pp0_iter1_reg <= gmem_addr_1_reg_572;
                gmem_addr_1_reg_572_pp0_iter2_reg <= gmem_addr_1_reg_572_pp0_iter1_reg;
                gmem_addr_1_reg_572_pp0_iter3_reg <= gmem_addr_1_reg_572_pp0_iter2_reg;
                gmem_addr_1_reg_572_pp0_iter4_reg <= gmem_addr_1_reg_572_pp0_iter3_reg;
                gmem_addr_1_reg_572_pp0_iter5_reg <= gmem_addr_1_reg_572_pp0_iter4_reg;
                gmem_addr_1_reg_572_pp0_iter6_reg <= gmem_addr_1_reg_572_pp0_iter5_reg;
                gmem_addr_1_reg_572_pp0_iter7_reg <= gmem_addr_1_reg_572_pp0_iter6_reg;
                gmem_addr_1_reg_572_pp0_iter8_reg <= gmem_addr_1_reg_572_pp0_iter7_reg;
                gmem_addr_1_reg_572_pp0_iter9_reg <= gmem_addr_1_reg_572_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554 = ap_const_lv1_0))) then
                gmem_addr_1_reg_572 <= sext_ln23_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_554_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_reg_583 <= sext_ln22_fu_405_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_589 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_558 <= icmp_ln20_fu_259_p2;
                select_ln27_reg_565 <= select_ln27_fu_265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_558_pp0_iter10_reg <= icmp_ln20_reg_558_pp0_iter9_reg;
                icmp_ln20_reg_558_pp0_iter11_reg <= icmp_ln20_reg_558_pp0_iter10_reg;
                icmp_ln20_reg_558_pp0_iter12_reg <= icmp_ln20_reg_558_pp0_iter11_reg;
                icmp_ln20_reg_558_pp0_iter13_reg <= icmp_ln20_reg_558_pp0_iter12_reg;
                icmp_ln20_reg_558_pp0_iter14_reg <= icmp_ln20_reg_558_pp0_iter13_reg;
                icmp_ln20_reg_558_pp0_iter15_reg <= icmp_ln20_reg_558_pp0_iter14_reg;
                icmp_ln20_reg_558_pp0_iter16_reg <= icmp_ln20_reg_558_pp0_iter15_reg;
                icmp_ln20_reg_558_pp0_iter17_reg <= icmp_ln20_reg_558_pp0_iter16_reg;
                icmp_ln20_reg_558_pp0_iter18_reg <= icmp_ln20_reg_558_pp0_iter17_reg;
                icmp_ln20_reg_558_pp0_iter19_reg <= icmp_ln20_reg_558_pp0_iter18_reg;
                icmp_ln20_reg_558_pp0_iter1_reg <= icmp_ln20_reg_558;
                icmp_ln20_reg_558_pp0_iter20_reg <= icmp_ln20_reg_558_pp0_iter19_reg;
                icmp_ln20_reg_558_pp0_iter21_reg <= icmp_ln20_reg_558_pp0_iter20_reg;
                icmp_ln20_reg_558_pp0_iter22_reg <= icmp_ln20_reg_558_pp0_iter21_reg;
                icmp_ln20_reg_558_pp0_iter2_reg <= icmp_ln20_reg_558_pp0_iter1_reg;
                icmp_ln20_reg_558_pp0_iter3_reg <= icmp_ln20_reg_558_pp0_iter2_reg;
                icmp_ln20_reg_558_pp0_iter4_reg <= icmp_ln20_reg_558_pp0_iter3_reg;
                icmp_ln20_reg_558_pp0_iter5_reg <= icmp_ln20_reg_558_pp0_iter4_reg;
                icmp_ln20_reg_558_pp0_iter6_reg <= icmp_ln20_reg_558_pp0_iter5_reg;
                icmp_ln20_reg_558_pp0_iter7_reg <= icmp_ln20_reg_558_pp0_iter6_reg;
                icmp_ln20_reg_558_pp0_iter8_reg <= icmp_ln20_reg_558_pp0_iter7_reg;
                icmp_ln20_reg_558_pp0_iter9_reg <= icmp_ln20_reg_558_pp0_iter8_reg;
                icmp_ln27_reg_554 <= icmp_ln27_fu_244_p2;
                icmp_ln27_reg_554_pp0_iter10_reg <= icmp_ln27_reg_554_pp0_iter9_reg;
                icmp_ln27_reg_554_pp0_iter11_reg <= icmp_ln27_reg_554_pp0_iter10_reg;
                icmp_ln27_reg_554_pp0_iter12_reg <= icmp_ln27_reg_554_pp0_iter11_reg;
                icmp_ln27_reg_554_pp0_iter13_reg <= icmp_ln27_reg_554_pp0_iter12_reg;
                icmp_ln27_reg_554_pp0_iter14_reg <= icmp_ln27_reg_554_pp0_iter13_reg;
                icmp_ln27_reg_554_pp0_iter15_reg <= icmp_ln27_reg_554_pp0_iter14_reg;
                icmp_ln27_reg_554_pp0_iter16_reg <= icmp_ln27_reg_554_pp0_iter15_reg;
                icmp_ln27_reg_554_pp0_iter17_reg <= icmp_ln27_reg_554_pp0_iter16_reg;
                icmp_ln27_reg_554_pp0_iter18_reg <= icmp_ln27_reg_554_pp0_iter17_reg;
                icmp_ln27_reg_554_pp0_iter19_reg <= icmp_ln27_reg_554_pp0_iter18_reg;
                icmp_ln27_reg_554_pp0_iter1_reg <= icmp_ln27_reg_554;
                icmp_ln27_reg_554_pp0_iter20_reg <= icmp_ln27_reg_554_pp0_iter19_reg;
                icmp_ln27_reg_554_pp0_iter21_reg <= icmp_ln27_reg_554_pp0_iter20_reg;
                icmp_ln27_reg_554_pp0_iter22_reg <= icmp_ln27_reg_554_pp0_iter21_reg;
                icmp_ln27_reg_554_pp0_iter2_reg <= icmp_ln27_reg_554_pp0_iter1_reg;
                icmp_ln27_reg_554_pp0_iter3_reg <= icmp_ln27_reg_554_pp0_iter2_reg;
                icmp_ln27_reg_554_pp0_iter4_reg <= icmp_ln27_reg_554_pp0_iter3_reg;
                icmp_ln27_reg_554_pp0_iter5_reg <= icmp_ln27_reg_554_pp0_iter4_reg;
                icmp_ln27_reg_554_pp0_iter6_reg <= icmp_ln27_reg_554_pp0_iter5_reg;
                icmp_ln27_reg_554_pp0_iter7_reg <= icmp_ln27_reg_554_pp0_iter6_reg;
                icmp_ln27_reg_554_pp0_iter8_reg <= icmp_ln27_reg_554_pp0_iter7_reg;
                icmp_ln27_reg_554_pp0_iter9_reg <= icmp_ln27_reg_554_pp0_iter8_reg;
                sext_ln3_1_mid2_cast_reg_549 <= sext_ln3_1_mid2_cast_fu_212_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0))) then
                k_reg_599 <= m_axi_gmem_RDATA;
                value_load_1_reg_594 <= value_fu_94;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_554_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp2_reg_578 <= tmp2_fu_352_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to23, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to23 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln22_1_fu_372_p2 <= std_logic_vector(unsigned(add_ln22_fu_367_p2) + unsigned(grp_fu_298_p2));
    add_ln22_2_fu_390_p2 <= std_logic_vector(unsigned(zext_ln22_fu_386_p1) + unsigned(I));
    add_ln22_fu_367_p2 <= std_logic_vector(unsigned(tmp5_fu_363_p2) + unsigned(mul16));
    add_ln23_fu_302_p2 <= std_logic_vector(unsigned(indvar_cast_fu_295_p1) + unsigned(sext_ln3_1_mid2_cast_reg_549));
    add_ln27_1_fu_320_p2 <= std_logic_vector(unsigned(phi_ln3_fu_106) + unsigned(ap_const_lv3_1));
    add_ln27_fu_250_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv35_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter22, m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter21_reg, ap_block_state39_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state39_io)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter22, m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter21_reg, ap_block_state39_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state39_io)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter22, m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter22_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter22, m_axi_gmem_RVALID, ap_block_state38_io, icmp_ln27_reg_554_pp0_iter22_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state38_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter22, m_axi_gmem_RVALID, ap_block_state38_io, icmp_ln27_reg_554_pp0_iter22_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state38_io)));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state38_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln27_reg_554_pp0_iter18_reg)
    begin
                ap_block_state38_io <= ((icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln27_reg_554_pp0_iter18_reg)
    begin
                ap_block_state39_io <= ((icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state39_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state45_pp0_stage0_iter22_assign_proc : process(m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter21_reg)
    begin
                ap_block_state45_pp0_stage0_iter22 <= ((icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;


    ap_block_state46_pp0_stage1_iter22_assign_proc : process(m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter22_reg)
    begin
                ap_block_state46_pp0_stage1_iter22 <= ((icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state47_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_629_assign_proc : process(ap_enable_reg_pp0_iter18, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_629 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_631_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
                ap_condition_631 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln27_reg_554 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter22_stage1_assign_proc : process(ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554_pp0_iter22_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter22_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter22_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter22_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg, ap_loop_exit_ready_pp0_iter11_reg, ap_loop_exit_ready_pp0_iter12_reg, ap_loop_exit_ready_pp0_iter13_reg, ap_loop_exit_ready_pp0_iter14_reg, ap_loop_exit_ready_pp0_iter15_reg, ap_loop_exit_ready_pp0_iter16_reg, ap_loop_exit_ready_pp0_iter17_reg, ap_loop_exit_ready_pp0_iter18_reg, ap_loop_exit_ready_pp0_iter19_reg, ap_loop_exit_ready_pp0_iter20_reg, ap_loop_exit_ready_pp0_iter21_reg, ap_loop_exit_ready_pp0_iter22_reg)
    begin
        if (not(((ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter19_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter16_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter13_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_loop_exit_ready = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to23_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to23 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to23 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_110)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv35_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_110;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_98)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_98;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, m_axi_gmem_ARREADY, icmp_ln27_reg_554_pp0_iter18_reg, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage1, m_axi_gmem_RVALID, icmp_ln27_reg_554_pp0_iter22_reg, ap_block_pp0_stage1, ap_block_pp0_stage0, icmp_ln27_reg_554_pp0_iter21_reg)
    begin
        if ((((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_273_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_298_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_298_ce <= ap_const_logic_1;
        else 
            grp_fu_298_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln20_fu_259_p2 <= "1" when (ap_sig_allocacmp_j_load = mul_ln3_4) else "0";
    icmp_ln27_fu_244_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = bound) else "0";
    indvar_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_reg_565),63));
    j_1_fu_279_p2 <= std_logic_vector(unsigned(select_ln27_fu_265_p3) + unsigned(ap_const_lv32_1));
    lshr_ln26_dup_fu_419_p4 <= shiftreg_fu_102(191 downto 32);

    m_axi_gmem_ARADDR_assign_proc : process(icmp_ln27_reg_554_pp0_iter18_reg, gmem_addr_1_reg_572_pp0_iter18_reg, gmem_addr_reg_583, ap_condition_629, ap_condition_631)
    begin
        if ((icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_631)) then 
                m_axi_gmem_ARADDR <= gmem_addr_1_reg_572_pp0_iter18_reg;
            elsif ((ap_const_boolean_1 = ap_condition_629)) then 
                m_axi_gmem_ARADDR <= gmem_addr_reg_583;
            else 
                m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554_pp0_iter18_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter18_reg = ap_const_lv1_0)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter22, ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554_pp0_iter22_reg, icmp_ln27_reg_554_pp0_iter21_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (icmp_ln27_reg_554_pp0_iter21_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    or_ln26_dup_fu_432_p3 <= (value_fu_94 & lshr_ln26_dup_fu_419_p4);
    select_ln27_1_fu_452_p3 <= 
        ap_const_lv32_0 when (icmp_ln20_reg_558_pp0_iter22_reg(0) = '1') else 
        value_load_1_reg_594;
    select_ln27_2_fu_326_p3 <= 
        add_ln27_1_fu_320_p2 when (icmp_ln20_reg_558_pp0_iter17_reg(0) = '1') else 
        phi_ln3_fu_106;
    select_ln27_3_fu_440_p3 <= 
        or_ln26_dup_fu_432_p3 when (icmp_ln20_reg_558_pp0_iter22_reg(0) = '1') else 
        shiftreg_fu_102;
    select_ln27_fu_265_p3 <= 
        ap_const_lv32_0 when (icmp_ln20_fu_259_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
        sext_ln22_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_395_p4),64));

        sext_ln23_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_fu_302_p2),64));

        sext_ln3_1_mid2_cast_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln3_1_mid2),63));

    shiftreg_out <= shiftreg_fu_102;

    shiftreg_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554_pp0_iter22_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_1))) then 
            shiftreg_out_ap_vld <= ap_const_logic_1;
        else 
            shiftreg_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_378_p3 <= (add_ln22_1_fu_372_p2 & ap_const_lv2_0);
    tmp2_fu_352_p2 <= std_logic_vector(unsigned(tmp9_fu_347_p2) + unsigned(zext_ln27_fu_333_p1));
    tmp4_fu_342_p0 <= std_logic_vector(unsigned(grp_fu_273_p2) + unsigned(mul8_mid2));
    tmp9_fu_347_p2 <= std_logic_vector(unsigned(tmp4_fu_342_p2) + unsigned(global_id_base_x));
    trunc_ln1_fu_395_p4 <= add_ln22_2_fu_390_p2(63 downto 2);
    value_1_fu_462_p2 <= std_logic_vector(unsigned(mul_ln24_fu_458_p2) + unsigned(select_ln27_1_fu_452_p3));
    value_out <= value_fu_94;

    value_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln27_reg_554_pp0_iter22_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln27_reg_554_pp0_iter22_reg = ap_const_lv1_1))) then 
            value_out_ap_vld <= ap_const_logic_1;
        else 
            value_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln22_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_378_p3),64));
    zext_ln27_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_2_fu_326_p3),32));
end behav;
