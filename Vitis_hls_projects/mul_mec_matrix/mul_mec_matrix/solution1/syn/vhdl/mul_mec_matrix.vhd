-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1.1 (64-bit)
-- Version: 2021.1.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mul_mec_matrix is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of mul_mec_matrix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mul_mec_matrix_mul_mec_matrix,hls_ip_2021_1_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=8148,HLS_SYN_LUT=8227,HLS_VERSION=2021_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (92 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (92 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (92 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (92 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (92 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (92 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (92 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (92 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (92 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (92 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (92 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (92 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (92 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (92 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal group_id_x : STD_LOGIC_VECTOR (31 downto 0);
    signal group_id_y : STD_LOGIC_VECTOR (31 downto 0);
    signal group_id_z : STD_LOGIC_VECTOR (31 downto 0);
    signal global_offset_x : STD_LOGIC_VECTOR (31 downto 0);
    signal global_offset_y : STD_LOGIC_VECTOR (31 downto 0);
    signal global_offset_z : STD_LOGIC_VECTOR (31 downto 0);
    signal I : STD_LOGIC_VECTOR (63 downto 0);
    signal wi : STD_LOGIC_VECTOR (31 downto 0);
    signal hi : STD_LOGIC_VECTOR (31 downto 0);
    signal ci : STD_LOGIC_VECTOR (31 downto 0);
    signal wk : STD_LOGIC_VECTOR (31 downto 0);
    signal nk : STD_LOGIC_VECTOR (31 downto 0);
    signal O : STD_LOGIC_VECTOR (63 downto 0);
    signal wo : STD_LOGIC_VECTOR (31 downto 0);
    signal ho : STD_LOGIC_VECTOR (31 downto 0);
    signal co : STD_LOGIC_VECTOR (31 downto 0);
    signal s : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal empty_fu_378_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_905 : STD_LOGIC_VECTOR (5 downto 0);
    signal global_id_base_z_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_id_base_z_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_id_base_y_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_id_base_y_reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_id_base_x_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal global_id_base_x_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_3_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_3_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_fu_464_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_41_reg_938 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_33_fu_485_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_33_reg_980 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_fu_493_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln31_reg_991 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln31_1_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln31_1_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_2_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_2_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_4_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_4_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_541_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal bound_reg_1011 : STD_LOGIC_VECTOR (34 downto 0);
    signal empty_42_fu_550_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln31_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_840_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln31_reg_1044 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln70_1_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_3_fu_650_p2 : STD_LOGIC_VECTOR (5 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln31_3_fu_650_p2 : signal is "no";
    signal add_ln31_3_reg_1063 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp8_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_1073 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul16_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul16_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal mul8_mid2_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_mid2_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_6_mid2_fu_777_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln31_6_mid2_reg_1099 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal tmp_s_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_idle : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_ready : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out : STD_LOGIC_VECTOR (191 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out_ap_vld : STD_LOGIC;
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out_ap_vld : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (92 downto 0);
    signal ap_NS_fsm_state80 : STD_LOGIC;
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal sext_ln31_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lid_1_fu_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_1_fu_727_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal lid_2_fu_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid218_v_v_fu_617_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten21_fu_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln70_fu_589_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_378_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_36_fu_392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_34_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_37_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_38_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_fu_434_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_fu_452_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_396_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_35_fu_388_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln31_1_fu_501_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_1_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_529_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl3_fu_521_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_shl29_fu_537_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal lid_2_cast12_cast_fu_554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lid_2_cast_cast_fu_572_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_2_fu_612_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid218_fu_628_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_44_fu_633_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal lid_2_cast12_cast_mid1_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid119_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_655_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lid_1_mid2_fu_604_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_45_fu_664_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal lid_1_cast_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_674_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid218_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_690_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_cast19_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_47_fu_702_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln31_1_fu_707_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul8_mid2_fu_762_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln31_6_mid2_v_v_fu_767_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_847_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln31_6_mid2_v_fu_772_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln31_6_mid2_v_fu_772_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_840_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_840_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_fu_563_ap_start : STD_LOGIC;
    signal grp_fu_563_ap_done : STD_LOGIC;
    signal grp_fu_655_ap_start : STD_LOGIC;
    signal grp_fu_655_ap_done : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal p_mid218_fu_628_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mul_mec_matrix_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        bound : IN STD_LOGIC_VECTOR (34 downto 0);
        mul_ln31_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        mul : IN STD_LOGIC_VECTOR (31 downto 0);
        mul8_mid2 : IN STD_LOGIC_VECTOR (31 downto 0);
        hi : IN STD_LOGIC_VECTOR (31 downto 0);
        global_id_base_x : IN STD_LOGIC_VECTOR (31 downto 0);
        wi : IN STD_LOGIC_VECTOR (31 downto 0);
        mul16 : IN STD_LOGIC_VECTOR (31 downto 0);
        I : IN STD_LOGIC_VECTOR (63 downto 0);
        mul_ln31_6_mid2 : IN STD_LOGIC_VECTOR (5 downto 0);
        shiftreg_out : OUT STD_LOGIC_VECTOR (191 downto 0);
        shiftreg_out_ap_vld : OUT STD_LOGIC;
        value_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        value_out_ap_vld : OUT STD_LOGIC );
    end component;


    component mul_mec_matrix_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_udiv_32ns_32ns_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_mul_2ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_mul_3ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mul_mec_matrix_mul_6s_6s_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_mec_matrix_mac_mulsub_6s_6s_6ns_6_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component mul_mec_matrix_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        group_id_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        group_id_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        group_id_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_x : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_y : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_z : OUT STD_LOGIC_VECTOR (31 downto 0);
        I : OUT STD_LOGIC_VECTOR (63 downto 0);
        wi : OUT STD_LOGIC_VECTOR (31 downto 0);
        hi : OUT STD_LOGIC_VECTOR (31 downto 0);
        ci : OUT STD_LOGIC_VECTOR (31 downto 0);
        wk : OUT STD_LOGIC_VECTOR (31 downto 0);
        nk : OUT STD_LOGIC_VECTOR (31 downto 0);
        O : OUT STD_LOGIC_VECTOR (63 downto 0);
        wo : OUT STD_LOGIC_VECTOR (31 downto 0);
        ho : OUT STD_LOGIC_VECTOR (31 downto 0);
        co : OUT STD_LOGIC_VECTOR (31 downto 0);
        s : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component mul_mec_matrix_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358 : component mul_mec_matrix_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start,
        ap_done => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done,
        ap_idle => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_idle,
        ap_ready => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_ready,
        m_axi_gmem_AWVALID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        bound => bound_reg_1011,
        mul_ln31_4 => mul_ln31_4_reg_1006,
        mul => mul_reg_986,
        mul8_mid2 => mul8_mid2_reg_1094,
        hi => hi,
        global_id_base_x => global_id_base_x_reg_922,
        wi => wi,
        mul16 => mul16_reg_1084,
        I => I,
        mul_ln31_6_mid2 => mul_ln31_6_mid2_reg_1099,
        shiftreg_out => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out,
        shiftreg_out_ap_vld => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out_ap_vld,
        value_out => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out,
        value_out_ap_vld => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out_ap_vld);

    control_s_axi_U : component mul_mec_matrix_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        group_id_x => group_id_x,
        group_id_y => group_id_y,
        group_id_z => group_id_z,
        global_offset_x => global_offset_x,
        global_offset_y => global_offset_y,
        global_offset_z => global_offset_z,
        I => I,
        wi => wi,
        hi => hi,
        ci => ci,
        wk => wk,
        nk => nk,
        O => O,
        wo => wo,
        ho => ho,
        co => co,
        s => s,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component mul_mec_matrix_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARADDR,
        I_ARID => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARID,
        I_ARLEN => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLEN,
        I_ARSIZE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARSIZE,
        I_ARLOCK => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARLOCK,
        I_ARCACHE => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARCACHE,
        I_ARQOS => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARQOS,
        I_ARPROT => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARPROT,
        I_ARUSER => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARUSER,
        I_ARBURST => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARBURST,
        I_ARREGION => grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_reg_1073,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_6,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    mul_32s_32s_32_1_1_U24 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln31_fu_452_p0,
        din1 => ho,
        dout => mul_ln31_fu_452_p2);

    mul_32s_32s_32_1_1_U25 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => ci,
        din1 => wk,
        dout => mul_ln31_3_fu_458_p2);

    mul_32s_32s_32_1_1_U26 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => wk,
        din1 => wk,
        dout => mul_fu_489_p2);

    mul_32s_32s_32_1_1_U27 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln31_1_fu_501_p0,
        din1 => wo,
        dout => mul_ln31_1_fu_501_p2);

    mul_32s_32s_32_1_1_U28 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => ho,
        din1 => wo,
        dout => mul_ln31_2_fu_512_p2);

    mul_32s_32s_32_1_1_U29 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln31_3_reg_933,
        din1 => wk,
        dout => mul_ln31_4_fu_517_p2);

    udiv_32ns_32ns_32_36_seq_1_U30 : component mul_mec_matrix_udiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_563_ap_start,
        done => grp_fu_563_ap_done,
        din0 => grp_fu_563_p0,
        din1 => co,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p2);

    mul_2ns_32s_32_1_1_U31 : component mul_mec_matrix_mul_2ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_mid218_fu_628_p0,
        din1 => mul_ln31_2_reg_1001,
        dout => p_mid218_fu_628_p2);

    udiv_32ns_32ns_32_36_seq_1_U32 : component mul_mec_matrix_udiv_32ns_32ns_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_655_ap_start,
        done => grp_fu_655_ap_done,
        din0 => grp_fu_655_p0,
        din1 => co,
        ce => ap_const_logic_1,
        dout => grp_fu_655_p2);

    mul_3ns_32s_32_1_1_U33 : component mul_mec_matrix_mul_3ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => empty_45_fu_664_p0,
        din1 => wo,
        dout => empty_45_fu_664_p2);

    mul_32s_32s_32_1_1_U34 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp8_fu_674_p0,
        din1 => wk,
        dout => tmp8_fu_674_p2);

    mul_32s_32s_32_1_1_U35 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => tmp8_reg_1068,
        din1 => s,
        dout => mul16_fu_748_p2);

    mul_32s_32s_32_1_1_U36 : component mul_mec_matrix_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul8_mid2_fu_762_p0,
        din1 => ci,
        dout => mul8_mid2_fu_762_p2);

    mul_6s_6s_6_1_1_U37 : component mul_mec_matrix_mul_6s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => mul_ln31_6_mid2_v_fu_772_p0,
        din1 => empty_reg_905,
        dout => mul_ln31_6_mid2_v_fu_772_p2);

    mul_6s_6s_6_1_1_U38 : component mul_mec_matrix_mul_6s_6s_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        din0 => mul_ln31_6_mid2_v_fu_772_p2,
        din1 => trunc_ln31_reg_991,
        dout => mul_ln31_6_mid2_fu_777_p2);

    mac_mulsub_6s_6s_6ns_6_4_1_U39 : component mul_mec_matrix_mac_mulsub_6s_6s_6ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_840_p0,
        din1 => empty_33_reg_980,
        din2 => grp_fu_840_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_840_p3);

    mac_mulsub_6s_6s_6ns_6_4_1_U40 : component mul_mec_matrix_mac_mulsub_6s_6s_6ns_6_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_847_p0,
        din1 => empty_33_reg_980,
        din2 => add_ln31_3_reg_1063,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state80) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
                    grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten21_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_fu_194 <= ap_const_lv4_0;
            elsif (((icmp_ln70_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                indvar_flatten21_fu_194 <= add_ln70_fu_589_p2;
            end if; 
        end if;
    end process;

    lid_1_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                lid_1_fu_186 <= ap_const_lv3_0;
            elsif (((icmp_ln70_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                lid_1_fu_186 <= add_ln70_1_fu_727_p2;
            end if; 
        end if;
    end process;

    lid_2_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                lid_2_fu_190 <= ap_const_lv2_0;
            elsif (((icmp_ln70_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                lid_2_fu_190 <= p_mid218_v_v_fu_617_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln31_1_reg_996 <= add_ln31_1_fu_507_p2;
                    bound_reg_1011(34 downto 1) <= bound_fu_541_p2(34 downto 1);
                empty_33_reg_980 <= empty_33_fu_485_p1;
                mul_ln31_2_reg_1001 <= mul_ln31_2_fu_512_p2;
                mul_ln31_4_reg_1006 <= mul_ln31_4_fu_517_p2;
                mul_reg_986 <= mul_fu_489_p2;
                trunc_ln31_reg_991 <= trunc_ln31_fu_493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                add_ln31_3_reg_1063 <= add_ln31_3_fu_650_p2;
                gmem_addr_reg_1073 <= sext_ln31_fu_717_p1;
                icmp_ln70_1_reg_1052 <= icmp_ln70_1_fu_598_p2;
                tmp8_reg_1068 <= tmp8_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_41_reg_938 <= empty_41_fu_464_p2;
                empty_reg_905 <= empty_fu_378_p1;
                global_id_base_x_reg_922 <= global_id_base_x_fu_446_p2;
                global_id_base_y_reg_916 <= global_id_base_y_fu_422_p2;
                global_id_base_z_reg_910 <= global_id_base_z_fu_404_p2;
                mul_ln31_3_reg_933 <= mul_ln31_3_fu_458_p2;
                mul_ln31_reg_928 <= mul_ln31_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_42_reg_1019 <= empty_42_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                mul16_reg_1084 <= mul16_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                mul8_mid2_reg_1094 <= mul8_mid2_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
                mul_ln31_6_mid2_reg_1099 <= mul_ln31_6_mid2_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                sub_ln31_reg_1044 <= grp_fu_840_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                tmp_1_reg_1109 <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out(127 downto 96);
                tmp_2_reg_1114 <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out(159 downto 128);
                tmp_3_reg_1119 <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out(191 downto 160);
                tmp_s_reg_1104 <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                udiv_ln31_reg_1029 <= grp_fu_563_p2;
            end if;
        end if;
    end process;
    bound_reg_1011(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state93, ap_CS_fsm_state41, icmp_ln70_fu_583_p2, grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done, gmem_AWREADY, gmem_WREADY, gmem_BVALID, ap_CS_fsm_state81)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((icmp_ln70_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_state81;
                end if;
            when ap_ST_fsm_state82 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_507_p2 <= std_logic_vector(unsigned(mul_ln31_1_fu_501_p2) + unsigned(global_id_base_x_reg_922));
    add_ln31_3_fu_650_p2 <= std_logic_vector(unsigned(p_mid119_fu_641_p1) + unsigned(empty_41_reg_938));
    add_ln70_1_fu_727_p2 <= std_logic_vector(unsigned(lid_1_mid2_fu_604_p3) + unsigned(ap_const_lv3_1));
    add_ln70_2_fu_612_p2 <= std_logic_vector(unsigned(lid_2_fu_190) + unsigned(ap_const_lv2_1));
    add_ln70_fu_589_p2 <= std_logic_vector(unsigned(indvar_flatten21_fu_194) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_NS_fsm_state80 <= ap_NS_fsm(79);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;

    ap_ST_fsm_state81_blk_assign_proc : process(grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done)
    begin
        if ((grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state81_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state81_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state82_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state83_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state83_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state83_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state84_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state85_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state85_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state85_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state86_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state86_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state86_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state87_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state88_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;

    ap_ST_fsm_state93_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state93_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state93_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state41, icmp_ln70_fu_583_p2)
    begin
        if (((icmp_ln70_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state41, icmp_ln70_fu_583_p2)
    begin
        if (((icmp_ln70_fu_583_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bound_fu_541_p2 <= std_logic_vector(unsigned(p_shl3_fu_521_p3) - unsigned(p_shl29_fu_537_p1));
    empty_33_fu_485_p1 <= co(6 - 1 downto 0);
    empty_34_fu_382_p2 <= std_logic_vector(shift_left(unsigned(group_id_z),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    empty_35_fu_388_p1 <= global_offset_z(6 - 1 downto 0);
    empty_36_fu_392_p1 <= group_id_z(5 - 1 downto 0);
    empty_37_fu_410_p2 <= std_logic_vector(shift_left(unsigned(group_id_y),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    empty_38_fu_428_p2 <= std_logic_vector(shift_left(unsigned(group_id_x),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    empty_39_fu_434_p2 <= std_logic_vector(shift_left(unsigned(group_id_x),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    empty_40_fu_440_p2 <= std_logic_vector(unsigned(empty_38_fu_428_p2) - unsigned(empty_39_fu_434_p2));
    empty_41_fu_464_p2 <= std_logic_vector(unsigned(tmp_4_fu_396_p3) + unsigned(empty_35_fu_388_p1));
    empty_42_fu_550_p1 <= lid_2_fu_190(1 - 1 downto 0);
    empty_44_fu_633_p1 <= add_ln70_2_fu_612_p2(1 - 1 downto 0);
    empty_45_fu_664_p0 <= lid_1_cast_fu_660_p1(3 - 1 downto 0);
    empty_46_fu_684_p2 <= std_logic_vector(unsigned(tmp11_fu_679_p2) + unsigned(p_mid218_fu_628_p2));
    empty_47_fu_702_p2 <= std_logic_vector(unsigned(p_cast19_fu_698_p1) + unsigned(O));
    empty_fu_378_p0 <= ci;
    empty_fu_378_p1 <= empty_fu_378_p0(6 - 1 downto 0);
    global_id_base_x_fu_446_p2 <= std_logic_vector(unsigned(empty_40_fu_440_p2) + unsigned(global_offset_x));
    global_id_base_y_fu_422_p2 <= std_logic_vector(unsigned(tmp1_fu_416_p2) + unsigned(empty_37_fu_410_p2));
    global_id_base_z_fu_404_p2 <= std_logic_vector(unsigned(empty_34_fu_382_p2) + unsigned(global_offset_z));

    gmem_ARVALID_assign_proc : process(grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARVALID, ap_CS_fsm_state81, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            gmem_ARVALID <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state82, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state93, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_RREADY, ap_CS_fsm_state81, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state81))) then 
            gmem_RREADY <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, tmp_s_reg_1104, tmp_1_reg_1109, tmp_2_reg_1114, tmp_3_reg_1119, grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out, grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            gmem_WDATA <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_value_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            gmem_WDATA <= tmp_3_reg_1119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            gmem_WDATA <= tmp_2_reg_1114;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            gmem_WDATA <= tmp_1_reg_1109;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            gmem_WDATA <= tmp_s_reg_1104;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            gmem_WDATA <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_shiftreg_out(63 downto 32);
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, gmem_WREADY)
    begin
        if ((((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state85)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_563_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_563_ap_start <= ap_const_logic_1;
        else 
            grp_fu_563_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_563_p0 <= std_logic_vector(unsigned(lid_2_cast12_cast_fu_554_p1) + unsigned(global_id_base_z_reg_910));

    grp_fu_655_ap_start_assign_proc : process(ap_CS_fsm_state41, icmp_ln70_fu_583_p2)
    begin
        if (((icmp_ln70_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_655_ap_start <= ap_const_logic_1;
        else 
            grp_fu_655_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_655_p0 <= std_logic_vector(unsigned(lid_2_cast12_cast_mid1_fu_637_p1) + unsigned(global_id_base_z_reg_910));
    grp_fu_840_p0 <= grp_fu_563_p2(6 - 1 downto 0);
    grp_fu_840_p2 <= std_logic_vector(unsigned(lid_2_cast_cast_fu_572_p1) + unsigned(empty_41_reg_938));
    grp_fu_847_p0 <= grp_fu_655_p2(6 - 1 downto 0);
    grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start <= grp_mul_mec_matrix_Pipeline_XCL_WG_DIM_X_L_fu_358_ap_start_reg;
    icmp_ln70_1_fu_598_p2 <= "1" when (lid_1_fu_186 = ap_const_lv3_5) else "0";
    icmp_ln70_fu_583_p2 <= "1" when (indvar_flatten21_fu_194 = ap_const_lv4_A) else "0";
    lid_1_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lid_1_mid2_fu_604_p3),32));
    lid_1_mid2_fu_604_p3 <= 
        ap_const_lv3_0 when (icmp_ln70_1_fu_598_p2(0) = '1') else 
        lid_1_fu_186;
    lid_2_cast12_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_fu_550_p1),32));
    lid_2_cast12_cast_mid1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_44_fu_633_p1),32));
    lid_2_cast_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_reg_1019),6));
    mul8_mid2_fu_762_p0 <= 
        grp_fu_655_p2 when (icmp_ln70_1_reg_1052(0) = '1') else 
        udiv_ln31_reg_1029;
    mul_ln31_1_fu_501_p0 <= std_logic_vector(unsigned(mul_ln31_reg_928) + unsigned(global_id_base_y_reg_916));
    mul_ln31_6_mid2_v_fu_772_p0 <= 
        mul_ln31_6_mid2_v_v_fu_767_p1 when (icmp_ln70_1_reg_1052(0) = '1') else 
        sub_ln31_reg_1044;
    mul_ln31_6_mid2_v_v_fu_767_p1 <= grp_fu_847_p3;
    mul_ln31_fu_452_p0 <= std_logic_vector(unsigned(empty_34_fu_382_p2) + unsigned(global_offset_z));
    p_cast19_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_690_p3),64));
    p_mid119_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_44_fu_633_p1),6));
    p_mid218_fu_628_p0 <= p_mid218_fu_628_p00(2 - 1 downto 0);
    p_mid218_fu_628_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid218_v_v_fu_617_p3),32));
    p_mid218_v_v_fu_617_p3 <= 
        add_ln70_2_fu_612_p2 when (icmp_ln70_1_fu_598_p2(0) = '1') else 
        lid_2_fu_190;
    p_shl29_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_529_p3),35));
    p_shl3_fu_521_p3 <= (mul_ln31_4_fu_517_p2 & ap_const_lv3_0);
        sext_ln31_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln31_1_fu_707_p4),64));

    tmp11_fu_679_p2 <= std_logic_vector(unsigned(empty_45_fu_664_p2) + unsigned(add_ln31_1_reg_996));
    tmp1_fu_416_p2 <= std_logic_vector(unsigned(group_id_y) + unsigned(global_offset_y));
    tmp8_fu_674_p0 <= std_logic_vector(unsigned(lid_1_cast_fu_660_p1) + unsigned(global_id_base_y_reg_916));
    tmp_4_fu_396_p3 <= (empty_36_fu_392_p1 & ap_const_lv1_0);
    tmp_8_fu_529_p3 <= (mul_ln31_4_fu_517_p2 & ap_const_lv1_0);
    tmp_9_fu_690_p3 <= (empty_46_fu_684_p2 & ap_const_lv2_0);
    trunc_ln31_1_fu_707_p4 <= empty_47_fu_702_p2(63 downto 2);
    trunc_ln31_fu_493_p1 <= mul_fu_489_p2(6 - 1 downto 0);
end behav;
